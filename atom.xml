<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>troyCoder</title>
  <subtitle>爱生活爱编程，分享学习工作中的知识和见解！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.troylc.cc/"/>
  <updated>2017-09-03T09:26:20.000Z</updated>
  <id>http://www.troylc.cc/</id>
  
  <author>
    <name>troylc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ranchervm上运行kvm的win7-docker容器</title>
    <link href="http://www.troylc.cc/rancher/2017/09/03/docker-kvm-win7.html"/>
    <id>http://www.troylc.cc/rancher/2017/09/03/docker-kvm-win7.html</id>
    <published>2017-09-03T09:26:15.000Z</published>
    <updated>2017-09-03T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直忙于老项目的spring boot和spring cloud改造，8月份没有任何自己的学习笔记，实在是感到惭愧。说好的每个月写几篇自己的工作与学习中的技术笔记与心得，又没完成。9月继续努力！<br>本文主要是在docker的环境下运行一个kvm版的win7虚拟机，至于为什么要在docker环境中运行win7虚拟机，这就得看各自的业务需求了，我这是因为工作中需要，所以整理成这篇文章。感谢大家的支持与关注。</p>
<h1 id="centos7下制作kvm的win7虚拟机"><a href="#centos7下制作kvm的win7虚拟机" class="headerlink" title="centos7下制作kvm的win7虚拟机"></a>centos7下制作kvm的win7虚拟机</h1><h2 id="centos7上安装KVM虚拟化"><a href="#centos7上安装KVM虚拟化" class="headerlink" title="centos7上安装KVM虚拟化"></a>centos7上安装KVM虚拟化</h2><ul>
<li>检测cpu是否支持硬件虚拟化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# grep -o -E &apos;(vmx|svm)&apos; /proc/cpuinfo</div><div class="line">vmx</div><div class="line">vmx</div></pre></td></tr></table></figure>
<p>输出vmx或svm代表支持虚拟化  否则如果什么都没输出代表cpu不支持虚拟化  </p>
<ul>
<li>安装KVM以及相关组件  </li>
</ul>
<p>安装 kvm 基础包    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# sudo yum install -y kvm </div><div class="line">``` </div><div class="line"></div><div class="line">安装kvm 管理工具</div></pre></td></tr></table></figure>
<p>[root@bogon ~]# sudo yum install -y qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 开启并运行libvirtd 服务，以及检查kvm是否加载成功</div></pre></td></tr></table></figure></p>
<p>[root@bogon ~]# systemctl start libvirtd<br>[root@bogon ~]# systemctl enable libvirtd</p>
<p>#查看KVM模块是否被正确加载<br>[root@bogon ~]# lsmod | grep kvm<br>kvm_intel             170181  0<br>kvm                   554609  1 kvm_intel<br>irqbypass              13503  1 kvm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 配置宿主机网络</div><div class="line">默认情况下，KVM 虚拟机是基于 NAT 的网络配置，只有同一宿主机的虚拟键之间可以互相访问，跨宿主机是不能访问的。所以需要和宿主机配置成桥接模式，以便虚拟机可以在局域网内可见。</div><div class="line">  </div><div class="line">- 配置宿主机的桥接模式  </div><div class="line"></div><div class="line">创建桥接网卡</div></pre></td></tr></table></figure></p>
<p>[root@bogon ~]# cd /etc/sysconfig/network-scripts<br>[root@bogon ~]# cp ifcfg-ens33 ifcfg-br0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">修改 ifcfg-br0 文件</div></pre></td></tr></table></figure></p>
<p>[root@bogon ~]# vim ifcfg-br0<br>TYPE=”Bridge” #将br0指定为桥接类型<br>BOOTPROTO=”static”<br>DEFROUTE=”yes”<br>PEERDNS=”yes”<br>PEERROUTES=”yes”<br>NAME=”br0”<br>DEVICE=”br0” #将em1改为br0<br>ONBOOT=”yes”<br>DELAY=”0”<br>STP=”yes”<br>IPADDR=192.168.188.109<br>PREFIX=24<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.188.1<br>DNS1=192.168.188.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">修改 ifcfg-ens33， ifcfg-ens33 为宿主机的物理网卡配置文件</div></pre></td></tr></table></figure></p>
<p>[root@bogon ~]# vim ifcfg-ens33<br>TYPE=Ethernet<br>BOOTPROTO=static<br>DEVICE=ens33<br>ONBOOT=yes<br>BRIDGE=br0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">重启网络并检查网络情况：</div></pre></td></tr></table></figure></p>
<p>[root@bogon network-scripts]# systemctl restart network<br>[root@bogon network-scripts]# ip a<br>1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue state UNKNOWN qlen 1<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host<br>       valid_lft forever preferred_lft forever<br>2: ens33: <broadcast,multicast,up,lower_up> mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000<br>    link/ether 00:0c:29:a1:78:75 brd ff:ff:ff:ff:ff:ff<br>3: br0: <broadcast,multicast,up,lower_up> mtu 1500 qdisc noqueue state UP qlen 1000<br>    link/ether 00:0c:29:a1:78:75 brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.188.109/24 brd 192.168.188.255 scope global br0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fea1:7875/64 scope link<br>       valid_lft forever preferred_lft forever<br>4: virbr0: <no-carrier,broadcast,multicast,up> mtu 1500 qdisc noqueue state DOWN qlen 1000<br>    link/ether 52:54:00:97:73:51 brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0<br>       valid_lft forever preferred_lft forever<br>5: virbr0-nic: <broadcast,multicast> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN qlen 1000<br>    link/ether 52:54:00:97:73:51 brd ff:ff:ff:ff:ff:ff<br>[root@bogon network-scripts]# brctl show<br>bridge name    bridge id        STP enabled    interfaces<br>br0        8000.000c29a17875    yes        ens33<br>virbr0        8000.525400977351    yes        virbr0-nic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 通过界面创建KVM-win7虚拟机</div><div class="line"></div><div class="line">- centos桌面版系统下运行 virt-manager，创建KVM虚拟机的管理端界面程序  </div><div class="line"></div><div class="line">![创建KVM虚拟机的管理端界面程序](/images/rancher/win7-kvm/15042794157148.jpg)  </div><div class="line"></div><div class="line">如果centos7安装的是mini版本的系统，这个界面是弹不出来。需要安装桌面版本</div><div class="line"></div><div class="line">![新建虚拟机](/images/rancher/win7-kvm/15042837170527.jpg)  </div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15042838698836.jpg)  </div><div class="line"></div><div class="line">运行到此，我们需要把win7的安装iso映像下载并传入到当前centos7系统中，由于我们需要在kvm虚拟机中安装win7所以需要下载win7的虚拟安装的驱动程序，不然在安装选择虚拟硬盘和虚拟网络时，都找不到对就的硬件。 </div><div class="line"></div><div class="line">- 下载映像和虚拟驱动  </div><div class="line">win7的映像就不在这里说明下载方式了，网上搜索win7安装的iso下载下来。</div><div class="line">这里主要说一下下载kvm安装windows虚拟驱动程序：</div><div class="line">通过浏览器打开`https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.136-1/`</div><div class="line">  </div><div class="line">![下载kvm安装windows虚拟驱动程序](/images/rancher/win7-kvm/15042851617902.jpg)  </div><div class="line"> </div><div class="line">下载两个文件后，传入当前系统中</div></pre></td></tr></table></figure></broadcast,multicast></no-carrier,broadcast,multicast,up></broadcast,multicast,up,lower_up></broadcast,multicast,up,lower_up></loopback,up,lower_up></p>
<p>[root@bogon iso]# ll -sh<br>总用量 4.2G<br>4.1G -rw-r–r–. 1 qemu qemu 4.1G 8月  31 22:49 cn_windows_7_ultimate_with_sp1_x64_oem.iso<br>163M -rwxr-xr-x. 1 qemu qemu 163M 9月   1 13:06 virtio-win.iso</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 继续安装win7-kvm虚拟机  </div><div class="line"></div><div class="line">![选择win7安装iso映像](/images/rancher/win7-kvm/15042857117144.jpg)</div><div class="line">![选择操作系统类型及版本](/images/rancher/win7-kvm/15042858163697.jpg)</div><div class="line">![](/images/rancher/win7-kvm/15042861371348.jpg)</div><div class="line">![](/images/rancher/win7-kvm/15042862327834.jpg)</div><div class="line"></div><div class="line">- 安装前需要自定义一些虚拟化的配置，以便于后面的在ranchervm环境下运行kvm-win7虚拟机不出蓝屏的问题。</div><div class="line"></div><div class="line">![NIC网络配置](/images/rancher/win7-kvm/15042872495377.jpg)</div><div class="line">![虚拟硬盘配置](/images/rancher/win7-kvm/15042873659918.jpg)</div><div class="line">![系统启动引导配置](/images/rancher/win7-kvm/15042874519000.jpg)</div><div class="line"></div><div class="line">增加一个硬件IDE-CDROM2-选择前面下载的virtio-win.iso</div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15042878514430.jpg)</div><div class="line">![开始安装](/images/rancher/win7-kvm/15042879820835.jpg)</div><div class="line"></div><div class="line">- 进入安装win7的界面  </div><div class="line"></div><div class="line">![win7安装界面](/images/rancher/win7-kvm/15043520681409.jpg)</div><div class="line"></div><div class="line">![选择虚拟硬盘](/images/rancher/win7-kvm/15043522644121.jpg)</div><div class="line"></div><div class="line">正常情况下因为没安装虚拟化的驱动程序，安装是找不到硬盘和网络的，所以需要在选择安装盘的界面，浏览安装虚拟化驱动程序，这个时候就要通过浏览找到之前加载的IDE-CDROM2中的virtio-win.isok中的内容大致如下：</div><div class="line">`NetKVM/`: Virtio网络驱动</div><div class="line">`viostor/`: Virtio块驱动</div><div class="line">`vioscsi/`: Virtio SCSI驱动</div><div class="line">`viorng/`: Virtio RNG驱动</div><div class="line">`vioser/`: Virtio串口驱动</div><div class="line">`Balloon/`: Virtio 内存气球驱动</div><div class="line">`qxl/`: 用于Windows 7及之前版本的QXL显卡驱动. (virtio-win-0.1.103-1和之后版本会创建)</div><div class="line">`qxldod/`: 用于Windows 8及之后版本的QXL显卡驱动. (virtio-win-0.1.103-2和之后版本会创建)</div><div class="line">`pvpanic/`: QEMU pvpanic 设备驱动 (virtio-win-0.1.103-2和之后版本会创建)</div><div class="line">`guest-agent/`: QEMU Guest Agent 32bit 和 64bit 安装包</div><div class="line">`qemupciserial/`: QEMU PCI 串口设备驱动</div><div class="line">`*.vfd`: 用于Windows XP下的VFD软驱镜像  </div><div class="line"></div><div class="line">我在这里主要安装网络和硬盘的驱动：viostor、NetKVM找到对应win7系统版本安装完后，就会出现安装的硬盘，后面就安步骤安装win7就可以完成kvm-win7的安装了。</div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15043524690030.jpg)</div><div class="line"></div><div class="line">安装虚拟硬盘驱动：</div><div class="line"></div><div class="line">![安装虚拟硬盘驱动](/images/rancher/win7-kvm/15043525084334.jpg)</div><div class="line"></div><div class="line">安装虚拟网络驱动：</div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15043526013165.jpg)</div><div class="line"></div><div class="line">安装完后，就会出现虚拟的硬盘的安装界面  </div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15043526819944.jpg)</div><div class="line"></div><div class="line">下一步，就等待系统的安装完成：</div><div class="line"></div><div class="line">![](/images/rancher/win7-kvm/15043532760334.jpg)</div><div class="line"></div><div class="line">然后在centos7下的/var/lib/libvirt/images下有刚安装好的win7-kvm虚拟机文件。</div></pre></td></tr></table></figure>
<p>[root@localhost iso]# cd /var/lib/libvirt/images/<br>[root@localhost images]# ll -sh<br>总用量 12G<br>4.0K -rw-r–r–. 1 root root 101 9月   1 15:26 Dockerfile<br>3.4G -rw——-. 1 qemu qemu 21G 9月   2 19:46 win7-kvm-base.qcow2<br>8.1G -rw——-. 1 root root 21G 9月   1 15:13 win7-kvm-docker.qcow2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">win7版的kvm虚拟机安装完成，后结通过虚拟机制作docker镜像</div><div class="line"># 通过kvm虚拟机制作的docker镜像  </div><div class="line"></div><div class="line">由于我们后续要通过ranchervm运行kvm虚拟机，所以默认的</div><div class="line">RancherVM镜像就已经是捆绑的标准KVM软件的docker镜像。  </div><div class="line"></div><div class="line">- 制作docker版本的kvm-win7镜像，首页压缩原kvm镜像，这样可以使kvm镜像压缩50%以上的空间。</div></pre></td></tr></table></figure></p>
<p>[root@localhost images]# ll -sh<br>总用量 17G<br>4.0K -rw-r–r–. 1 root root 101 9月   1 15:26 Dockerfile<br>8.3G -rw——-. 1 root root 21G 9月   2 20:31 win7-kvm-base.qcow2<br>[root@localhost images]# qemu-img convert -O qcow2 -c win7-kvm-base.qcow2 win7-kvm-base.gz.img<br>[root@localhost images]# ll -sh<br>总用量 21G<br>4.0K -rw-r–r–. 1 root root  101 9月   1 15:26 Dockerfile<br>3.8G -rw-r–r–. 1 root root 3.8G 9月   2 22:53 win7-kvm-base.gz.img<br>8.3G -rw——-. 1 root root  21G 9月   2 20:31 win7-kvm-base.qcow2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过rancher-base来构建win7-kvm的docker镜像：</div></pre></td></tr></table></figure></p>
<p>[root@localhost win7-vm]# vim Dockerfile<br>FROM rancher/vm-base<br>COPY win7-kvm-base.gz.img /base_image/win7-kvm-base.gz.img<br>CMD [“-m 2048m”]<br>[root@localhost win7-vm]# docker build -t rancher/win7-kvm-docker-base .<br>Sending build context to Docker daemon  4.322GB<br>Step 1/3 : FROM rancher/vm-base<br> —&gt; 051656d3329d<br>Step 2/3 : COPY win7-kvm-base.gz.img /base_image/win7-kvm-base.gz.img<br> —&gt; ffbfd3b91c42<br>Step 3/3 : CMD -m 2048m<br> —&gt; Running in 7fc2475f49b5<br> —&gt; 80e35bd6ff43<br>Removing intermediate container 7fc2475f49b5<br>Successfully built 80e35bd6ff43<br>Successfully tagged rancher/win7-kvm-docker-base:latest<br>[root@localhost win7-vm]# docker images<br>REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE<br>rancher/win7-kvm-docker-base     latest              80e35bd6ff43        9 seconds ago       4.35GB<br>rancher/vm-base                  latest              051656d3329d        15 months ago       288MB<br>rancher/ranchervm                latest              f3005c29aa04        21 months ago       250MB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 运行并测试docker中win7系统容器</div><div class="line">RancherVM镜像是Docker镜像中捆绑的标准KVM镜像，下面我们要通过ranchervm来创建并运行win7的kvm镜像。</div><div class="line">首先，确保Docker和KVM都安装在您的系统上。按照分发特定的说明确保KVM工作。我们只需要在内核中启用KVM。我们不需要像任何用户空间的工具qemu-kvm或libvirt。centos7确保启用了KVM，我们最开始就已经讲过。</div><div class="line">一旦你设置了Docker和KVM，就运行：</div></pre></td></tr></table></figure></p>
<p>[root@localhost ~]# docker run -v /var/run:/var/run -p 8080:80 -v /var/lib/rancher/vm:/vm rancher/ranchervm<br>[root@localhost ~]# docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES<br>a926b7dd1740        rancher/ranchervm   “/var/lib/rancher/…”   2 days ago          Up 2 days           0.0.0.0:8080-&gt;80/tcp   xenodochial_b<br>anach<br>```</p>
<p>打开浏览器输入：https://<kvm hostname="">:8080，我们可以通过web浏览器创建虚拟机：</kvm></p>
<p><img src="/images/rancher/win7-kvm/15043668394036.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043669239599.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043669629235.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043671343957.jpg" alt=""></p>
<p>至此在centos7上通过docker运行一个win7的kvm虚拟机的安装全部完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直忙于老项目的spring boot和spring cloud改造，8月份没有任何自己的学习笔记，实在是感到惭愧。说好的每个月写几篇自己的工作与学习中的技术笔记与心得，又没完成。9月继续努力！&lt;br&gt;本文主要是在docker的环境下运行一个kvm版的win7虚拟机，至
    
    </summary>
    
      <category term="rancher" scheme="http://www.troylc.cc/categories/rancher/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="rancher" scheme="http://www.troylc.cc/tags/rancher/"/>
    
      <category term="Dockerfile" scheme="http://www.troylc.cc/tags/Dockerfile/"/>
    
      <category term="kvm" scheme="http://www.troylc.cc/tags/kvm/"/>
    
      <category term="win7" scheme="http://www.troylc.cc/tags/win7/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile制作openjdk-8u131-jdk-alpine基础镜像</title>
    <link href="http://www.troylc.cc/docker/2017/07/28/dockerfile-alpine-tz-curl.html"/>
    <id>http://www.troylc.cc/docker/2017/07/28/dockerfile-alpine-tz-curl.html</id>
    <published>2017-07-28T09:26:15.000Z</published>
    <updated>2017-07-28T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>从dockerhub上下载openjdk:8u131-jdk-alpine本身是一个轻量级的操作系统，只带有jre，不带任何jre外的软件，如果想增加其它软件就需要我们自己在此基础上再构建自己想的基础镜像。</p>
<h2 id="下载openjdk-8u131-jdk-alpine基础镜像"><a href="#下载openjdk-8u131-jdk-alpine基础镜像" class="headerlink" title="下载openjdk:8u131-jdk-alpine基础镜像"></a>下载openjdk:8u131-jdk-alpine基础镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">openjdk-8-time                  latest                 ab859b2c2910        14 hours ago        107.8 MB</div><div class="line">nginx                           1.13.3-alpine          ba60b24dbad5        2 weeks ago         15.51 MB</div><div class="line">openjdk                         8u131-jdk-alpine       478bf389b75b        4 weeks ago         101 MB</div></pre></td></tr></table></figure>
<p>本次在openjdk:8u131-jdk-alpine基础上增加时区文件和CURL、TREE等工具。</p>
<hr>
<h2 id="编写Dockerfile文件，并构建alpine基础镜像"><a href="#编写Dockerfile文件，并构建alpine基础镜像" class="headerlink" title="编写Dockerfile文件，并构建alpine基础镜像"></a>编写Dockerfile文件，并构建alpine基础镜像</h2><p>由于docker构建的时候要到alpine官网上下载软件，因我的构建服务器不能上外网，所在在构建的时候特殊增加http_proxy代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# vim Dockerfile</div><div class="line">FROM openjdk:8u131-jdk-alpine</div><div class="line"># MAINTAINER指令允许你给将要制作的镜像设置作者信息</div><div class="line">MAINTAINER iucheng &lt;iu_cheng@troylc.com&gt;</div><div class="line"></div><div class="line">#ADD cacerts /etc/ssl/certs/java/cacerts</div><div class="line"></div><div class="line">ARG http_proxy</div><div class="line"></div><div class="line">ENV http_proxy=$&#123;http_proxy&#125;</div><div class="line">ENV https_proxy=$&#123;http_proxy&#125;</div><div class="line"></div><div class="line"># 设置时区 中国的时区有多种表述 分别为: UTC+8:00 GMT+8 # 写/etc/TZ, 不要设置TZ环境变量 ENV TZ UTC+8:00</div><div class="line">RUN  apk update \</div><div class="line">    &amp;&amp; apk add --no-cache \</div><div class="line">    &amp;&amp; apk add curl bash tree tzdata &amp;&amp; \</div><div class="line">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</div><div class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"></div><div class="line">ENV http_proxy=</div><div class="line">ENV https_proxy=</div><div class="line"></div><div class="line">[root@registry-jenkins ~]# docker build --build-arg http_proxy=http://192.168.72.188:808 -t openjdk:8u131-jdk-tz-curl-alpine .</div><div class="line">Sending build context to Docker daemon 49.15 kB</div><div class="line">Step 1 : FROM openjdk:8u131-jdk-alpine</div><div class="line"> ---&gt; 478bf389b75b</div><div class="line">Step 2 : MAINTAINER iucheng &lt;liu_cheng@topsec.com.cn&gt;</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; 0fe3b8ac71b7</div><div class="line">Step 3 : ARG http_proxy</div><div class="line"> ---&gt; Running in 2069da05a659</div><div class="line"> ---&gt; 74c725e41083</div><div class="line">Removing intermediate container 2069da05a659</div><div class="line">Step 4 : ENV http_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in ac0bf48d4b6c</div><div class="line"> ---&gt; 8c058688cfa8</div><div class="line">Removing intermediate container ac0bf48d4b6c</div><div class="line">Step 5 : ENV https_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in 55e645b7c4b8</div><div class="line"> ---&gt; df34875db960</div><div class="line">Removing intermediate container 55e645b7c4b8</div><div class="line">Step 6 : RUN apk update     &amp;&amp; apk add --no-cache     &amp;&amp; apk add curl bash tree tzdata &amp;&amp;     ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"> ---&gt; Running in 387ca24a223a</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">v3.6.2-40-gf1c202674f [http://dl-cdn.alpinelinux.org/alpine/v3.6/main]</div><div class="line">v3.6.2-32-g6f53cfcccd [http://dl-cdn.alpinelinux.org/alpine/v3.6/community]</div><div class="line">OK: 8436 distinct packages available</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">OK: 99 MiB in 51 packages</div><div class="line">(1/10) Installing ncurses-terminfo-base (6.0-r7)</div><div class="line">(2/10) Installing ncurses-terminfo (6.0-r7)</div><div class="line">(3/10) Installing ncurses-libs (6.0-r7)</div><div class="line">(4/10) Installing readline (6.3.008-r5)</div><div class="line">(5/10) Installing bash (4.3.48-r1)</div><div class="line">Executing bash-4.3.48-r1.post-install</div><div class="line">(6/10) Installing libssh2 (1.8.0-r1)</div><div class="line">(7/10) Installing libcurl (7.54.0-r0)</div><div class="line">(8/10) Installing curl (7.54.0-r0)</div><div class="line">(9/10) Installing tree (1.7.0-r0)</div><div class="line">(10/10) Installing tzdata (2017a-r0)</div><div class="line">Executing busybox-1.26.2-r5.trigger</div><div class="line">OK: 111 MiB in 61 packages</div><div class="line"> ---&gt; d2ed313ab5f3</div><div class="line">Removing intermediate container 387ca24a223a</div><div class="line">Step 7 : ENV http_proxy</div><div class="line"> ---&gt; Running in 104af5cd52df</div><div class="line"> ---&gt; 7c2f38e0d8fd</div><div class="line">Removing intermediate container 104af5cd52df</div><div class="line">Step 8 : ENV https_proxy</div><div class="line"> ---&gt; Running in d93dd0df2c4a</div><div class="line"> ---&gt; 4ad2436778d3</div><div class="line">Removing intermediate container d93dd0df2c4a</div><div class="line">Successfully built 4ad2436778d3</div></pre></td></tr></table></figure>
<p>构建命中中增加了<code>--build-arg http_proxy=http://192.168.72.188:808</code>，主要是为了构建过程中通过代理上外网，从外网下载所需的软件。</p>
<h2 id="验证构建的镜像是否成功"><a href="#验证构建的镜像是否成功" class="headerlink" title="验证构建的镜像是否成功"></a>验证构建的镜像是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@registry-jenkins ~]# docker run -it --rm --name jdk-test openjdk:8u131-jdk-tz-curl-alpine /bin/bash</div><div class="line">bash-4.3# date</div><div class="line">Fri Jul 28 09:44:59 CST 2017</div><div class="line">bash-4.3# curl</div><div class="line">curl: try &apos;curl --help&apos; or &apos;curl --manual&apos; for more information</div><div class="line">bash-4.3# exit</div><div class="line">exit</div><div class="line">[root@registry-jenkins ~]#</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从dockerhub上下载openjdk:8u131-jdk-alpine本身是一个轻量级的操作系统，只带有jre，不带任何jre外的软件，如果想增加其它软件就需要我们自己在此基础上再构建自己想的基础镜像。&lt;/p&gt;
&lt;h2 id=&quot;下载openjdk-8u131-jdk-a
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="Dockerfile" scheme="http://www.troylc.cc/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>docker-registry私有仓库及web ui镜像管理</title>
    <link href="http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html"/>
    <id>http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html</id>
    <published>2017-06-20T09:26:15.000Z</published>
    <updated>2017-06-20T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><img src="/images/docker/registry/registry.jpeg" alt="registry"></p>
<p>docker提供了开放式的dockerhub公共中央仓库，我们可以从这上面下载到自己工作和学习中想要的各种镜像，但由于dockerhub是国外的服务器，很多时候国内是很难下载，这里我们可以通过国内的中转服务器来下载。<br>国内常用的中转服务器有：  </p>
<ol>
<li>daocloud： 在<a href="https://hub.daocloud.io/" target="_blank" rel="external">daocloud</a>通过<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">安装daocloud加载器</a>可以下载到需要的镜像</li>
<li>阿里云容器hub：在<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">开发者平台的-&gt;容器hub</a>中搜索镜像，如果想通过阿里云服务来下载镜像，需要登录阿里云-&gt;产品与服务-&gt;云计算基础服务-&gt;弹性计算-&gt;容器服务-&gt;镜像与方案-&gt;镜像-&gt;镜像仓库控制台-&gt;Docker Hub 镜像站点中有安装阿里云的dockerhub加载器</li>
<li>网易蜂巢镜像中心：在<a href="https://c.163.com/hub#/m/home/" target="_blank" rel="external">网易蜂巢镜像中心</a>搜索镜像，然后复制docker pull 链接，到服务器上执行就行</li>
</ol>
<hr>
<p>以上是公共的docker仓库获取镜像的方法，但在国内大部分公司的情况是不能把项目上用到的镜像放到公网上，一般从公网上只会下载基础版本的镜像，然后基于这个基础版本的镜像自己在本地build镜像，由于在本地build的镜像，不能在内部网络中直接下载，上传，所以需要一个内部环境的私有仓库，做为内部镜像中心来让容器，可以在内容任何地方下载上传。<br>搭建私有仓库有如下的优点：</p>
<ul>
<li>节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；</li>
<li>私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。<br>本文就是基于以上目的，并参考<a href="https://docs.docker.com/registry/" target="_blank" rel="external">docker官方关于docker registry的构建</a>来进行搭建，并通过web ui来进行管理。</li>
</ul>
<hr>
<h3 id="从公共仓库中下载搭建私有仓库的镜像"><a href="#从公共仓库中下载搭建私有仓库的镜像" class="headerlink" title="从公共仓库中下载搭建私有仓库的镜像"></a>从公共仓库中下载搭建私有仓库的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull registry</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull hyper/docker-registry-web</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">registry                        latest                    9d0c4eabab4d        5 weeks ago         33.2MB</div><div class="line">registry:5000/myhub/rabbitmp    latest                    758cc906ba57        2 months ago        37.5MB</div><div class="line">tcr:5000/myhub/rabbitmq         3.6.9-management-alpine   758cc906ba57        2 months ago        37.5MB</div><div class="line">hyper/docker-registry-web       latest                    0db5683824d8        8 months ago        599MB</div></pre></td></tr></table></figure>
<h3 id="启用身份验证搭建私有仓库"><a href="#启用身份验证搭建私有仓库" class="headerlink" title="启用身份验证搭建私有仓库"></a>启用身份验证搭建私有仓库</h3><p>令牌认证需要具有PEM格式的RSA私钥和与该密钥相匹配的证书</p>
<h4 id="生成私钥和证书"><a href="#生成私钥和证书" class="headerlink" title="生成私钥和证书"></a>生成私钥和证书</h4><p>编写生成证书的shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim generate-key.s</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">openssl req \</div><div class="line">    -new \</div><div class="line">    -newkey rsa:4096 \</div><div class="line">    -days 3650 \</div><div class="line">    -subj <span class="string">"/CN=localhost"</span> \</div><div class="line">    -nodes \</div><div class="line">    -x509 \</div><div class="line">    -keyout /devops/registry-web/conf/auth.key \</div><div class="line">    -out /devops/registry/conf/auth.cert</div><div class="line"></div><div class="line">:wq 保存</div><div class="line">[root@docker-node01 devops]<span class="comment"># chmod +x generate-key.sh</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># ./generate-key.sh</span></div><div class="line">Generating a 4096 bit RSA private key</div><div class="line">.................................................................++</div><div class="line">..................++</div><div class="line">writing new private key to <span class="string">'/devops/registry-web/conf/auth.key'</span></div><div class="line">-----</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry</span></div><div class="line">registry/     registry-web/</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry/conf/</span></div><div class="line">auth.cert</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry-web/conf/</span></div><div class="line">auth.key</div></pre></td></tr></table></figure>
<h4 id="创建registry配置文件"><a href="#创建registry配置文件" class="headerlink" title="创建registry配置文件"></a>创建registry配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry/config.yml</span></div><div class="line">version: 0.1</div><div class="line"></div><div class="line">storage:</div><div class="line">  filesystem:</div><div class="line">    rootdirectory: /var/lib/registry</div><div class="line">  delete:</div><div class="line">    enabled: <span class="literal">true</span></div><div class="line"></div><div class="line">http:</div><div class="line">  addr: 0.0.0.0:5000</div><div class="line"></div><div class="line">auth:</div><div class="line">  token:</div><div class="line">    realm: http://localhost:8090/api/auth</div><div class="line">    service: registry:5000</div><div class="line">    issuer: <span class="built_in">test</span></div><div class="line">    rootcertbundle: /etc/docker/registry/auth.cert</div><div class="line"></div><div class="line"><span class="built_in">log</span>:</div><div class="line">  level: info</div><div class="line"></div><div class="line">notifications:</div><div class="line">  endpoints:</div><div class="line">    - name: listener</div><div class="line">      url: http://localhost:8090/api/notification</div><div class="line">      timeout: 500ms</div><div class="line">      threshold: 5</div><div class="line">      backoff: 1s</div><div class="line"></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>storage</code>选项是必需的<br>|—<code>filesystem</code> 使用本地磁盘来存储注册表文件。它是开发的理想选择，适用于一些小规模的生产应用<br>|—<code>delete</code> 用delete结构启用通过摘要删除图像斑点和清单。它默认为false,可以设置true来启用<br><code>log</code>小节配置了日志系统的行为。日志记录系统将所有内容输出到stdout<br>|—<code>level</code>设置测井输出的级别。允许值是error，warn，info，和debug。默认是info<br><code>http</code>选项详细说明托管registry的HTTP服务器的配置。<br>|—<code>addr</code>服务器应该接受连接的地址。表单取决于网络类型（使用HOST:PORTTCP和FILE一个UNIX套接字。<br><code>auth</code>是验证方式，该选项是可选的。<br>|—<code>token</code>基于令牌的身份验证允许您将身份验证系统与注册表分离。它是一种具有高度安全性的已建立的认证范例。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>realm</td>
<td>是</td>
<td>registry服务器认证的API接口，这是通过registry-web中的权限来认证</td>
</tr>
<tr>
<td>service</td>
<td>是</td>
<td>指定需要被认证的服务。</td>
</tr>
<tr>
<td>issuer</td>
<td>是</td>
<td>令牌颁发者的名称。发行人将其插入到令牌中，因此它必须与为发行者配置的值相匹配</td>
</tr>
<tr>
<td>rootcertbundle</td>
<td>是</td>
<td>根证书包的绝对路径。此捆绑包包含用于签署身份验证令牌的证书的公共部分</td>
</tr>
</tbody>
</table>
<p><code>notifications</code>，registry通知，此项不是必须的，可选选项<br>|—<code>endpoints</code>结构包含可以接受事件通知的命名服务（URL）的列表。具体参考<a href="https://docs.docker.com/registry/configuration/#notifications" target="_blank" rel="external">官网说明</a></p>
<h4 id="创建regsitry的web-ui管理镜像的配置文件"><a href="#创建regsitry的web-ui管理镜像的配置文件" class="headerlink" title="创建regsitry的web ui管理镜像的配置文件"></a>创建regsitry的web ui管理镜像的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry-web/config.yml</span></div><div class="line">registry:</div><div class="line">   url: http://registry:5000/v2</div><div class="line">   name: registry:5000</div><div class="line">   <span class="built_in">readonly</span>: <span class="literal">false</span></div><div class="line">   auth:</div><div class="line">     enabled: <span class="literal">true</span></div><div class="line">     key: /conf/auth.key</div><div class="line">     issuer: <span class="built_in">test</span></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>url</code>-指定registry的地址<br><code>name</code>-regsitry私服的名称<br><code>readonly</code>-是否为只读模式，设置为true时不允许删除<br><code>auth</code>-registry-web的验证方式<br>|—<code>enabled</code> 是否启动验证<br>|—<code>key</code> 验证的证书key<br>|—<code>issuer</code> 证书颁发者的名称</p>
<h4 id="创建docker-compose文件来编排registry两个服务"><a href="#创建docker-compose文件来编排registry两个服务" class="headerlink" title="创建docker-compose文件来编排registry两个服务"></a>创建docker-compose文件来编排registry两个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim docker-compose.yml</span></div><div class="line">version: <span class="string">'2'</span></div><div class="line">services:</div><div class="line">  registry:</div><div class="line">    image: registry</div><div class="line">    container_name: registry</div><div class="line">    ports:</div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry/conf:/etc/docker/registry:ro</div><div class="line">      - /devops/registry:/var/lib/registry</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">  registry-web:</div><div class="line">    image: hyper/docker-registry-web</div><div class="line">    container_name: registry-web</div><div class="line">    ports:</div><div class="line">      - <span class="string">"8090:8080"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry-web/conf:/conf:ro</div><div class="line">      - /devops/registry-web/db:/data</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    depends_on:</div><div class="line">      - registry</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">networks:</div><div class="line">  registry-net:</div><div class="line">:wq 保存</div><div class="line"></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose up -d</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose log -f 查看日志</span></div></pre></td></tr></table></figure>
<h4 id="配置本地hosts表"><a href="#配置本地hosts表" class="headerlink" title="配置本地hosts表"></a>配置本地hosts表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /etc/hosts</span></div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">10.211.55.7 registry  <span class="comment">#增加registry的hosts表</span></div></pre></td></tr></table></figure>
<h3 id="验证registry及web-ui管理"><a href="#验证registry及web-ui管理" class="headerlink" title="验证registry及web ui管理"></a>验证registry及web ui管理</h3><ol>
<li>登录到<a href="http://localhost:8090/" target="_blank" rel="external">http://localhost:8090/</a> 默认用户名/密码  admin/admin<br><img src="/images/docker/registry/1.jpg" alt="registry-web管理界面"></li>
<li>创建测试用户并向该用户授予“全部写入”角色。<br><img src="/images/docker/registry/2.jpg" alt=""></li>
<li>在本地shell上：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># docker login registry:5000</span></div><div class="line">Username: troylc</div><div class="line">Password:</div><div class="line">Login Succeeded</div><div class="line">[root@docker-node01 devops]<span class="comment"># docker pull hello-world</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker tag hello-world registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker push registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker rmi registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker run registry:5000/hello-world:latest</span></div></pre></td></tr></table></figure>
<ol>
<li>在界面上查看，并操作（列表中可删除）<br>用troylc用户名登录，可以看到有一个hello-worlad镜像，展开列表<br><img src="/images/docker/registry/3.jpg" alt=""></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/docker/registry/registry.jpeg&quot; alt=&quot;registry&quot;&gt;&lt;/p&gt;
&lt;p&gt;docker提供了开放式的dockerhub公共中央仓库，我们可以从这上面下载到自己工作和学习中想要的各种镜像，但由于d
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="registry" scheme="http://www.troylc.cc/tags/registry/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA For Mac 快捷键</title>
    <link href="http://www.troylc.cc/IntelliJ-IDEA/2017/06/17/idea-01.html"/>
    <id>http://www.troylc.cc/IntelliJ-IDEA/2017/06/17/idea-01.html</id>
    <published>2017-06-17T09:26:15.000Z</published>
    <updated>2017-06-17T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。本文参考以下内容摘记下来，方便自己记忆。<br><strong>参考地址：</strong><br><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a><br><a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">IntelliJ IDEA 官方快捷键说明</a></p>
<h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul>
<li><code>⌘</code> Command</li>
<li><code>⇧</code> Shift</li>
<li><code>⌥</code> Option</li>
<li><code>⌃</code> Control</li>
<li><code>↩︎</code> Return/Enter</li>
<li><code>⌫</code> Delete</li>
<li><code>⌦</code> 向前删除键（Fn+Delete）</li>
<li><code>↑</code> 上箭头</li>
<li><code>↓</code> 下箭头</li>
<li><code>←</code> 左箭头</li>
<li><code>→</code> 右箭头</li>
<li><code>⇞</code> Page Up（Fn+↑）</li>
<li><code>⇟</code> Page Down（Fn+↓）</li>
<li><code>Home</code> Fn + ←</li>
<li><code>End</code> Fn + →</li>
<li><code>⇥</code> 右制表符（Tab键）</li>
<li><code>⇤</code> 左制表符（Shift+Tab）</li>
<li><code>⎋</code> Escape (Esc)</li>
</ul>
<h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul>
<li><code>Control + Space</code> 基本的代码补全（补全任何类、方法、变量）</li>
<li><code>Control + Shift + Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>
<li><code>Command + Shift + Enter</code> 自动结束代码，行末自动添加分号</li>
<li><code>Command + P</code> 显示方法的参数信息</li>
<li><code>Control + J</code> 快速查看文档</li>
<li><code>Shift + F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>
<li><code>Command + 鼠标放在代码上</code> 显示代码简要信息</li>
<li><code>Command + F1</code> 在错误或警告处显示具体描述信息</li>
<li><code>Command + N, Control + Enter, Control + N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>
<li><code>Control + O</code> 覆盖方法（重写父类方法）</li>
<li><code>Control + I</code> 实现方法（实现接口中的方法）</li>
<li><code>Command + Option + T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>
<li><code>Command + /</code> 注释/取消注释与行注释</li>
<li><code>Command + Option + /</code> 注释/取消注释与块注释</li>
<li><code>Option + 方向键上</code> 连续选中代码块</li>
<li><code>Option + 方向键下</code> 减少当前选中的代码块</li>
<li><code>Control + Shift + Q</code> 显示上下文信息</li>
<li><code>Option + Enter</code> 显示意向动作和快速修复代码</li>
<li><code>Command + Option + L</code> 格式化代码</li>
<li><code>Control + Option + O</code> 优化import</li>
<li><code>Control + Option + I</code> 自动缩进线</li>
<li><code>Tab / Shift + Tab</code> 缩进代码 / 反缩进代码</li>
<li><code>Command + X</code> 剪切当前行或选定的块到剪贴板</li>
<li><code>Command + C</code> 复制当前行或选定的块到剪贴板</li>
<li><code>Command + V</code> 从剪贴板粘贴</li>
<li><code>Command + Shift + V</code> 从最近的缓冲区粘贴</li>
<li><code>Command + D</code> 复制当前行或选定的块</li>
<li><code>Command + Delete</code> 删除当前行或选定的块的行</li>
<li><code>Control + Shift + J</code> 智能的将代码拼接成一行</li>
<li><code>Command + Enter</code> 智能的拆分拼接的行</li>
<li><code>Shift + Enter</code> 开始新的一行</li>
<li><code>Command + Shift + U</code> 大小写切换</li>
<li><code>Command + Shift + ] / Command + Shift + [</code> 选择直到代码块结束/开始 </li>
<li><code>Option + Fn + Delete</code> 删除到单词的末尾</li>
<li><code>Option + Delete</code> 删除到单词的开头</li>
<li><code>Command + 加号 / Command + 减号</code> 展开 / 折叠代码块</li>
<li><code>Command + Shift + 加号</code> 展开所以代码块</li>
<li><code>Command + Shift + 减号</code> 折叠所有代码块</li>
<li><code>Command + W</code> 关闭活动的编辑器选项卡</li>
</ul>
<h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul>
<li><code>Double Shift</code> 查询任何东西</li>
<li><code>Command + F</code> 文件内查找</li>
<li><code>Command + G</code> 查找模式下，向下查找</li>
<li><code>Command + Shift + G</code> 查找模式下，向上查找</li>
<li><code>Command + R</code> 文件内替换</li>
<li><code>Command + Shift + F</code> 全局查找（根据路径）</li>
<li><code>Command + Shift + R</code> 全局替换（根据路径）</li>
<li><code>Command + Shift + S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
<li><code>Command + Shift + M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
</ul>
<h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul>
<li><code>Option + F7 / Command + F7</code> 在文件中查找用法 / 在类中查找用法</li>
<li><code>Command + Shift + F7</code> 在文件中突出显示的用法</li>
<li><code>Command + Option + F7</code> 显示用法</li>
</ul>
<h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul>
<li><code>Command + F9</code> 编译Project</li>
<li><code>Command + Shift + F9</code> 编译选择的文件、包或模块</li>
<li><code>Control + Option + R</code> 弹出 Run 的可选择菜单</li>
<li><code>Control + Option + D</code> 弹出 Debug 的可选择菜单</li>
<li><code>Control + R</code> 运行</li>
<li><code>Control + D</code> 调试</li>
<li><code>Control + Shift + R, Control + Shift + D</code> 从编辑器运行上下文环境配置</li>
</ul>
<h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul>
<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>
<li><code>Shift + F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>
<li><code>Shift + F8</code> 跳出</li>
<li><code>Option + F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>
<li><code>Option + F8</code> 计算表达式（可以更改变量值使其生效）</li>
<li><code>Command + Option + R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>
<li><code>Command + F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>
<li><code>Command + Shift + F8</code> 查看断点信息</li>
</ul>
<h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul>
<li><code>Command + O</code> 查找类文件</li>
<li><code>Command + Shift + O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>
<li><code>Command + Option + O</code> 前往指定的变量 / 方法</li>
<li><code>Control + 方向键左 / Control + 方向键右</code> 左右切换打开的编辑tab页</li>
<li><code>F12</code> 返回到前一个工具窗口</li>
<li><code>Esc</code> 从工具窗口进入代码文件窗口</li>
<li><code>Shift + Esc</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>
<li><code>Command + Shift + F4</code> 关闭活动run/messages/find/… tab</li>
<li><code>Command + L</code> 在当前文件跳转到某一行的指定处</li>
<li><code>Command + E</code> 显示最近打开的文件记录列表</li>
<li><code>Option + 方向键左 / Option + 方向键右</code> 光标跳转到当前单词 / 中文句的左 / 右侧开头位置</li>
<li><code>Command + Option + 方向键左 / Command + Option + 方向键右</code> 退回 / 前进到上一个操作的地方</li>
<li><code>Command + Shift + Delete</code> 跳转到最后一个编辑的地方</li>
<li><code>Option + F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>
<li><code>Command + B / Command +  鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>
<li><code>Command + Option + B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>
<li><code>Option + Space, Command + Y</code> 快速打开光标所在方法、类的定义</li>
<li><code>Control + Shift + B</code> 跳转到类型声明处</li>
<li><code>Command + U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>
<li><code>Control + 方向键下 / Control + 方向键上</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>
<li><code>Command + ] / Command + [</code> 移动光标到当前所在代码的花括号开始/结束位置</li>
<li><code>Command + F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>
<li><code>Control + H</code> 显示当前类的层次结构</li>
<li><code>Command + Shift + H</code> 显示方法层次结构</li>
<li><code>Control + Option + H</code> 显示调用层次结构</li>
<li><code>F2 / Shift + F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>
<li><code>F4 / Command + 方向键下</code> 编辑/查看代码源</li>
<li><code>Option + Home</code> 显示到当前文件的导航条</li>
<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>
<li><code>Option + F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>
<li><code>Control + 0...Control + 9</code> 定位到对应数值的书签位置</li>
<li><code>Command + F3</code> 显示所有书签</li>
</ul>
<h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul>
<li><code>F5</code> 复制文件到指定目录</li>
<li><code>F6</code> 移动文件到指定目录</li>
<li><code>Command + Delete</code> 在文件上为安全删除文件，弹出确认框</li>
<li><code>Shift + F6</code> 重命名文件</li>
<li><code>Command + F6</code> 更改签名</li>
<li><code>Command + Option + N</code> 一致性</li>
<li><code>Command + Option + M</code> 将选中的代码提取为方法</li>
<li><code>Command + Option + V</code> 提取变量</li>
<li><code>Command + Option + F</code> 提取字段</li>
<li><code>Command + Option + C</code> 提取常量</li>
<li><code>Command + Option + P</code> 提取参数</li>
</ul>
<h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul>
<li><code>Command + K</code> 提交代码到版本控制器</li>
<li><code>Command + T</code> 从版本控制器更新代码</li>
<li><code>Option + Shift + C</code> 查看最近的变更记录</li>
<li><code>Control + C</code> 快速弹出版本控制器操作面板</li>
</ul>
<h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul>
<li><code>Command + Option + J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>
<li><code>Command + J</code> 插入自定义动态代码模板</li>
</ul>
<h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul>
<li><code>Command + 1...Command + 9</code> 打开相应编号的工具窗口</li>
<li><code>Command + S</code> 保存所有</li>
<li><code>Command + Option + Y</code> 同步、刷新</li>
<li><code>Control + Command + F</code> 切换全屏模式</li>
<li><code>Command + Shift + F12</code> 切换最大化编辑器</li>
<li><code>Option + Shift + F</code> 添加到收藏夹</li>
<li><code>Option + Shift + I</code> 检查当前文件与当前的配置文件</li>
<li>Control + ` 快速切换当前的scheme（切换主题、代码样式等）</li>
<li><code>Command + ,</code> 打开IDEA系统设置</li>
<li><code>Command + ;</code> 打开项目结构对话框</li>
<li><code>Shift + Command + A</code> 查找动作（可设置相关选项）</li>
<li><code>Control + Shift + Tab</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>
</ul>
<h4 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h4><ul>
<li><code>Command + Shift +8</code> 竖编辑模式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。本文参考以下内容摘记下来，方便自己记忆。&lt;br&gt;&lt;strong&gt;参考地址：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
      <category term="IntelliJ IDEA" scheme="http://www.troylc.cc/categories/IntelliJ-IDEA/"/>
    
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="IntelliJIDEA" scheme="http://www.troylc.cc/tags/IntelliJIDEA/"/>
    
  </entry>
  
  <entry>
    <title>macOs环境下搭建hexo静态博客</title>
    <link href="http://www.troylc.cc/macOs/2017/06/12/macos-02.html"/>
    <id>http://www.troylc.cc/macOs/2017/06/12/macos-02.html</id>
    <published>2017-06-12T09:26:15.000Z</published>
    <updated>2017-06-12T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-Github Pages静态博客，需要node js的支持，由于我的环境，之前在有安装过hexo，本身已经用的是之前的较早版本的node js，最新由于工作需要，用到angular js，准备安装一个最新的node js,所以对node js有多版本支持的要求，因此我通过nvm来进行管理node的版本。  </p>
<h3 id="安装NVM工具"><a href="#安装NVM工具" class="headerlink" title="安装NVM工具"></a>安装NVM工具</h3><p>由于上一节安装了oh my zsh命令增强工具，安装nvm我是通过安装zsh的插件方式安装的，<br>参考：<a href="http://www.troylc.cc/macOs/2017/06/11/macos-01.html">macOs终端工具优化iTerm2+oh my zsh</a><br>如下所示：<br>首页：Clone zsh-nvm 到oh my zsh 自定义插件库中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm</div></pre></td></tr></table></figure>
<p>其次：修改oh my zsh的配置文件.zshrc，增加以下内容</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins+=(zsh-nvm) 或者加到之前的后面，用空格分开 plugins=(*** zsh-nvm)</div></pre></td></tr></table></figure>
<p>最后：如果要即时生效刚执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment">#或者关闭当前终端重新打开。</span></div></pre></td></tr></table></figure></p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node js"></a>安装node js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm list-remote</div><div class="line">        v0.1.14</div><div class="line">        v0.1.15</div><div class="line">        v0.1.16</div><div class="line">        ......</div><div class="line">       v0.12.15</div><div class="line">       v0.12.16</div><div class="line">       v0.12.17</div><div class="line">       v0.12.18</div><div class="line">       ......</div><div class="line">       v7.7.2</div><div class="line">       v7.10.0</div><div class="line">       v8.0.0</div><div class="line">       v8.1.0</div></pre></td></tr></table></figure>
<p>由于之前折腾hexo静态博客的时候用的是node js v0.12.17版本，安装此版本以便于和之前的hexo保持一致，最近工作中需要用到新版本的node js,所以再安装一个v8.1.0版本，让两个版本共存  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm install v0.12.17</div><div class="line">Downloading and installing node v0.12.17...</div><div class="line">Downloading https://nodejs.org/dist/v0.12.17/node-v0.12.17-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v0.12.17 (npm v2.15.1)</div><div class="line">Creating default <span class="built_in">alias</span>: default -&gt; v0.12.17</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm install v8.1.0</div><div class="line">Downloading and installing node v8.1.0...</div><div class="line">Downloading https://nodejs.org/dist/v8.1.0/node-v8.1.0-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v8.1.0 (npm v5.0.3)</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm list</div><div class="line">       v0.12.17</div><div class="line">-&gt;       v8.1.0</div><div class="line">default -&gt; v0.12.17</div><div class="line">node -&gt; stable (-&gt; v8.1.0) (default)</div><div class="line">stable -&gt; 8.1 (-&gt; v8.1.0) (default)</div><div class="line">iojs -&gt; N/A (default)</div><div class="line">lts/* -&gt; lts/boron (-&gt; N/A)</div><div class="line">lts/argon -&gt; v4.8.3 (-&gt; N/A)</div><div class="line">lts/boron -&gt; v6.11.0 (-&gt; N/A)</div></pre></td></tr></table></figure>
<p>node js已经安装完了，由于先安装的v0.12.17版本，所以被设置为默认的node版本，这里先用这个为默认版本，后续用到新版本时，再切换到新的版本中。</p>
<h3 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  npm install hexo-cli -g</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">......</div><div class="line">/Users/zdgqiuysn/.nvm/versions/node/v0.12.17/bin/hexo -&gt; /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/bin/hexo</div><div class="line">hexo-cli@1.0.3 /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── object-assign@4.1.1</div><div class="line">├── <span class="built_in">command</span>-exists@1.2.2</div><div class="line">├── minimist@1.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── chalk@1.1.3 (supports-color@2.0.0, escape-string-regexp@1.0.5, ansi-styles@2.2.1, strip-ansi@3.0.1, has-ansi@2.0.0)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, camel-case@3.0.0, cross-spawn@4.0.2)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">└── hexo-fs@0.2.0 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line"></div><div class="line"> zdgqiuysn@zqy  ~  npm install hexo --save</div><div class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</div><div class="line">npm WARN engine esprima@3.1.3: wanted: &#123;<span class="string">"node"</span>:<span class="string">"&gt;=4"</span>&#125; (current: &#123;<span class="string">"node"</span>:<span class="string">"0.12.17"</span>,<span class="string">"npm"</span>:<span class="string">"2.15.1"</span>&#125;)</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/node_modules/hexo/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">hexo@3.3.7 node_modules/hexo</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── pretty-hrtime@1.0.3</div><div class="line">├── hexo-front-matter@0.2.3</div><div class="line">├── archy@1.0.0</div><div class="line">├── titlecase@1.1.2</div><div class="line">├── text-table@0.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── moment-timezone@0.5.13</div><div class="line">├── moment@2.13.0</div><div class="line">├── lodash@4.17.4</div><div class="line">├── deep-assign@2.0.0 (is-obj@1.0.1)</div><div class="line">├── hexo-i18n@0.2.1 (sprintf-js@1.1.1)</div><div class="line">├── minimatch@3.0.4 (brace-expansion@1.1.7)</div><div class="line">├── strip-indent@1.0.1 (get-stdin@4.0.1)</div><div class="line">├── chalk@1.1.3 (escape-string-regexp@1.0.5, ansi-styles@2.2.1, supports-color@2.0.0, has-ansi@2.0.0, strip-ansi@3.0.1)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, cross-spawn@4.0.2, camel-case@3.0.0)</div><div class="line">├── js-yaml@3.8.4 (esprima@3.1.3, argparse@1.0.9)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">├── swig-extras@0.0.1 (markdown@0.5.0)</div><div class="line">├── swig@1.4.2 (optimist@0.6.1, uglify-js@2.4.24)</div><div class="line">├── hexo-fs@0.1.6 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line">├── hexo-cli@1.0.3 (object-assign@4.1.1, <span class="built_in">command</span>-exists@1.2.2, minimist@1.2.0, hexo-fs@0.2.0)</div><div class="line">├── nunjucks@2.5.2 (asap@2.0.5, yargs@3.32.0, chokidar@1.7.0)</div><div class="line">├── warehouse@2.2.0 (graceful-fs@4.1.11, JSONStream@1.3.1, is-plain-object@2.0.3, cuid@1.3.8)</div><div class="line">└── cheerio@0.20.0 (entities@1.1.1, dom-serializer@0.1.0, css-select@1.2.0, htmlparser2@3.8.3, jsdom@7.2.2)</div></pre></td></tr></table></figure>
<h3 id="hexo命令生成静态页面"><a href="#hexo命令生成静态页面" class="headerlink" title="hexo命令生成静态页面"></a>hexo命令生成静态页面</h3><p>由于之前已经搭建过了hexo的静态博客，这次只要安装完hexo，通过hexo命令生成页面和上传到github上就行，<br>参考：<a href="http://www.troylc.cc/categories/hexo/">Hexo教程(系列)-hexo静态博客</a></p>
<p>创建一篇新的文章，执行hexo g -d 操作</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy <span class="built_in">pwd</span></div><div class="line">/myspace/java/githubPages/Blog/hexo</div><div class="line"></div><div class="line">zdgqiuysn@zqy  hexo g -d</div><div class="line"> </div><div class="line">[master c4513b5] Site updated: 2017-06-11 19:31:39</div><div class="line"> 107 files changed, 598 insertions(+), 325 deletions(-)</div><div class="line"> rewrite archives/2017/06/index.html (72%)</div><div class="line"> rewrite archives/2017/index.html (79%)</div><div class="line"> rewrite archives/index.html (82%)</div><div class="line"> create mode 100644 categories/macOs/index.html</div><div class="line"> create mode 100644 images/macos/macos-01/1.png</div><div class="line"> create mode 100644 images/macos/macos-01/10.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/11.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/12.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/2.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/3.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/4.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/5.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/6.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/7.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/8.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/9.jpg</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-01.html</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-02.html</div><div class="line"> rewrite page/4/index.html (76%)</div><div class="line"> create mode 100644 page/5/index.html</div><div class="line"> create mode 100644 tags/git/index.html</div><div class="line"> rewrite tags/hexo/index.html (74%)</div><div class="line"> rewrite tags/linux/index.html (76%)</div><div class="line"> create mode 100644 tags/macOs/index.html</div><div class="line"> create mode 100644 tags/zsh/index.html</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To github.com:troychn/troychn.github.io.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:troychn/troychn.github.io.git.</div><div class="line">On branch master</div><div class="line">nothing to commit, working tree clean</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To git.coding.net:troylc/troylc.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@git.coding.net:troylc/troylc.git.</div><div class="line">INFO  Deploy <span class="keyword">done</span>: git</div></pre></td></tr></table></figure>
<p>打开浏览器输入<a href="http://www.troylc.cc/">http://www.troylc.cc/</a><br><img src="/images/macos/macos-02/1.png" alt="1"></p>
<p><strong>如何卸载Hexo：</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3.0.0版本执行</div><div class="line">npm uninstall hexo-cli -g</div><div class="line"></div><div class="line">之前版本执行</div><div class="line">npm uninstall hexo -g</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo-Github Pages静态博客，需要node js的支持，由于我的环境，之前在有安装过hexo，本身已经用的是之前的较早版本的node js，最新由于工作需要，用到angular js，准备安装一个最新的node js,所以对node js有多版本支持的要求，因
    
    </summary>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/macOs/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="hexo" scheme="http://www.troylc.cc/tags/hexo/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="git" scheme="http://www.troylc.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>macOs终端工具优化iTerm2+oh my zsh</title>
    <link href="http://www.troylc.cc/macOs/2017/06/11/macos-01.html"/>
    <id>http://www.troylc.cc/macOs/2017/06/11/macos-01.html</id>
    <published>2017-06-11T09:26:15.000Z</published>
    <updated>2017-06-11T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事,必先利其器。能从千百年传承下来，必定是经过各行各业的实践与验证，到今年仍然适用，今天就分享一些软件行业对程序员来说的利器(zsh+oh my zsh)这款屌炸天linux下的增加命令行的工具。</p>
<p>之前一直都是用着各种环境下的默认的终端工具，在逛github时，发现了zsh和oh my zsh增强终端工具，觉得很强大，让程序员的逼格瞬间提升一个T，但发现这工具其实老外都是几年前就开始逼格了，一直持续到现在，而且star都是好几万，要不怎么说开源质量方面老个都这么强大呢。虚心学习什么时候都不晚，既然发现了，咋也来逼格一下，并分享自己的安装与配置的过程，记录下逼格过程的快感；扯远了，回正题。</p>
<p>本次安装环境为macOS Sierra 10.12.5下安装与配置iTerm2+zsh+oh my zs，当然网上大神们也有其它环境下的针对(zsh+oh my zs)这工具的安装，后续也给出相关的链接地址。</p>
<h2 id="iTerm2终端工具"><a href="#iTerm2终端工具" class="headerlink" title="iTerm2终端工具"></a>iTerm2终端工具</h2><p>虽然mac系统自带有终端工具，但今天说的Iterm2在mac上显得更加强大与突出，它能使命令行工具变得更加美观与便捷。</p>
<h3 id="iTerm2安装"><a href="#iTerm2安装" class="headerlink" title="iTerm2安装"></a>iTerm2安装</h3><p>在iTerm2<a href="http://iterm2.com" target="_blank" rel="external">官方网站</a>下载最新版本的iTerm2安装包，解压之后将iTerm2.app程序文件移动或复制到应用程序(Applications)目录下，即可以完成安装。安装完成后，启动iTerm2，这里先分享我配置好的iTerm2的界面：<br><img src="/images/macos/macos-01/1.png" alt="iTerm2管理界面"></p>
<h3 id="iTerm2基本配置与操作"><a href="#iTerm2基本配置与操作" class="headerlink" title="iTerm2基本配置与操作"></a>iTerm2基本配置与操作</h3><h4 id="修改iTerm2配置方案-配置"><a href="#修改iTerm2配置方案-配置" class="headerlink" title="修改iTerm2配置方案-配置"></a>修改iTerm2配置方案-配置</h4><p>首页要选择一个iTerm2的配置主题，我们这里选择的是solarized，这个主题也很强大，有很多工具的配色方案可以选择，从github上下载主题到本地的一个目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:altercation/solarized.git</div></pre></td></tr></table></figure>
<p><img src="/images/macos/macos-01//2.jpg" alt="配置方案下载"><br>进入iterm2-colors-solarized目录，双击Solarized Dark.itermcolors和Solarized Light.itermcolors这两个文件。<br>然后进入iTerm2设置preferences-&gt;Profiles-&gt;Colors-&gt;Color Presets-&gt;选择刚刚安装的solarized Dark;<br><img src="/images/macos/macos-01/3.jpg" alt="设置iTerm2配置方案"></p>
<h4 id="让新窗口的命令行跟随上一个打开的窗口的目录-配置"><a href="#让新窗口的命令行跟随上一个打开的窗口的目录-配置" class="headerlink" title="让新窗口的命令行跟随上一个打开的窗口的目录-配置"></a>让新窗口的命令行跟随上一个打开的窗口的目录-配置</h4><p>iTerm2设置preferences-&gt;Profiles/Default/General,Working DIrectory选择 Reuse previous session’s directory<br><img src="/images/macos/macos-01/4.jpg" alt="跟随目录"></p>
<h4 id="保存ssh远程登录指令及相关用户名密码-配置"><a href="#保存ssh远程登录指令及相关用户名密码-配置" class="headerlink" title="保存ssh远程登录指令及相关用户名密码-配置"></a>保存ssh远程登录指令及相关用户名密码-配置</h4><p>在iTerm2中可以直接存储登录命令，如：<code>ssh root@localhost</code>然后就会出现提示，让我们输入密码，但这样每次输入密码也很烦恼，有时远程机器太多，真记不住，然而iTerm2中可以使用expect脚本实现。   </p>
<p>首先打开iTerm2设置preferences-&gt;Profiles-&gt;在左侧最下方有一个<code>+</code>和<code>-</code>，或者旁边的Other Actions来新建，删除，复制一个现有的profiles。  </p>
<p>然后接着上面的配置，在配置profiles的界面右侧中，填写相关的信息与快捷键，tags等。<br>最后在在配置profiles的界面右侧的Command下面的Send Text at start 输入我们编写的expect脚本来运行，如下所示<br>编写expect脚本  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ vim /usr/<span class="built_in">local</span>/bin/item2login.sh</div><div class="line"><span class="comment">#!/usr/bin/expect</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> timeout 30</div><div class="line">spawn ssh -o ServerAliveInterval=60 -p [lindex <span class="variable">$argv</span> 0] [lindex <span class="variable">$argv</span> 1]@[lindex <span class="variable">$argv</span> 2]</div><div class="line">expect &#123;</div><div class="line">        <span class="string">"(yes/no)?"</span></div><div class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</div><div class="line">        <span class="string">"password:"</span></div><div class="line">        &#123;send <span class="string">"[lindex <span class="variable">$argv</span> 3]\n"</span>&#125;</div><div class="line">&#125;</div><div class="line">interact</div></pre></td></tr></table></figure>
<p>这里<code>[lindex $argv 0]， [lindex $argv 1]， [lindex $argv 2]， [lindex $argv 3]</code> 分别代表着4个参数。<br>将item2login.sh保存到 /usr/local/bin 就可以了，然后在iTerm2中设置：脚本 端口号 用户名 服务器地址 <code>密码</code> 一定要一一对应,如果密码中含有特殊字符，就需要把密码这个参数用<code>`包起来</code>item2login.sh 22 root 10.211.55.4 ‘edfr@#3’  这里最后密码参数中含有@#，所以需要把密码用’’单引号包括起来的。`</p>
<p><img src="/images/macos/macos-01/5.jpg" alt=""></p>
<h4 id="iTerm2选择即为复制-操作"><a href="#iTerm2选择即为复制-操作" class="headerlink" title="iTerm2选择即为复制-操作"></a>iTerm2选择即为复制-操作</h4><p>在用命令行中进行复制，之前的命令行要么是不能使用常规复制快键来操作,要么是选中后再按复制command+C,然而在iTerm2这个功能就非常出色了,选中就自动复制成功.<br>然后我们只需要在粘贴的地方按下 command + v 即可粘贴成功。</p>
<h4 id="命令行界面全文查找功能-操作"><a href="#命令行界面全文查找功能-操作" class="headerlink" title="命令行界面全文查找功能-操作"></a>命令行界面全文查找功能-操作</h4><p>全文查找功能和在文本编辑器中一样,只需按下command + f 输入要查找的内容,即可在当前命令行界面查找并高亮显示,点击搜索框右侧箭头可以循环逐个定位，如下所示：<br><img src="/images/macos/macos-01/6.jpg" alt=""></p>
<h4 id="分隔屏幕显示-操作"><a href="#分隔屏幕显示-操作" class="headerlink" title="分隔屏幕显示-操作"></a>分隔屏幕显示-操作</h4><p>水平分隔 <code>command +shift +d</code>，垂直分隔 <code>command+d</code><br><img src="/images/macos/macos-01/7.jpg" alt=""></p>
<h4 id="命令行补全-操作"><a href="#命令行补全-操作" class="headerlink" title="命令行补全-操作"></a>命令行补全-操作</h4><p><code>command + ;</code>  自动补全命令，<code>command + shift +h</code> 把历史输入命令全部显示出来<br><img src="/images/macos/macos-01/8.jpg" alt=""><br><img src="/images/macos/macos-01/9.jpg" alt=""><br>iTerm2就先说这么多了，以后用到了新的功能，再更新分享吧。</p>
<h2 id="终端命令增强工具zsh和oh-my-zsh"><a href="#终端命令增强工具zsh和oh-my-zsh" class="headerlink" title="终端命令增强工具zsh和oh my zsh"></a>终端命令增强工具zsh和oh my zsh</h2><p>这两个命令行增强工具不单单是适用macOs，其它linux上也是支持的。安装说明可以参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH]</a>上的说明  </p>
<h3 id="macOs下安装zsh工具"><a href="#macOs下安装zsh工具" class="headerlink" title="macOs下安装zsh工具"></a>macOs下安装zsh工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ brew install zsh zsh-completions</div><div class="line">......</div><div class="line">***@localhost ~ zsh --version</div><div class="line">zsh 5.2 (x86_64-apple-darwin16.0)</div></pre></td></tr></table></figure>
<h3 id="macOs下安装oh-my-zsh"><a href="#macOs下安装oh-my-zsh" class="headerlink" title="macOs下安装oh my zsh"></a>macOs下安装oh my zsh</h3><p>oh my zsh是在zsh基础上增加了许多插件化的增强功能，安装说明也可以在<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh]</a>找到说明，以下以github参考进行安装：<br><strong>curl:</strong>  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p><strong>wget</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="oh-my-zsh-配置主题及添加自带的插件和自定义的插件"><a href="#oh-my-zsh-配置主题及添加自带的插件和自定义的插件" class="headerlink" title="oh my zsh 配置主题及添加自带的插件和自定义的插件"></a>oh my zsh 配置主题及添加自带的插件和自定义的插件</h4><p>oh my zsh安装完后，一般配置都会~/.zshrc配置文件中进行配置，<br><strong>配置主题agnoster：</strong>  </p>
<p>修改~/.zshrc文件，把主题修改为agnoster,<code>ZSH_THEME=&quot;agnoster&quot;</code>，修改完后重新打开终端就会生效，或者用<code>source ~/.zshrc</code>,让配置即时生效。由于agnoster需要Powerline字体的支持，不然终端的命令中中的三角会显示乱码。  </p>
<p><strong><a href="https://github.com/powerline/fonts" target="_blank" rel="external">安装Powerline字体</a>：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clone</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</div><div class="line"><span class="comment"># install</span></div><div class="line"><span class="built_in">cd</span> fonts</div><div class="line">./install.sh</div><div class="line"><span class="comment"># clean-up a bit</span></div><div class="line"><span class="built_in">cd</span> ..</div><div class="line">rm -rf fonts</div></pre></td></tr></table></figure>
<p>如果终端是iTerm2,需要在Term2设置preferences-&gt;Profiles/Default/Text-&gt;chang font中选择上面安装的powerline字体<br><img src="/images/macos/macos-01/10.jpg" alt=""></p>
<p><strong>配置oh my zsh插件</strong><br>oh my zsh中插件分为两种:<br>一种是oh my zsh默认自带的插件，自带的插件是在~/.oh-my-zsh/plugins/目录下，这里面有很多插件，一般应该是足够逼格了。配置插件只需要修改~/.zshrc文件中的<code>plugins=(git cp z vim-interaction npm)</code>  </p>
<p>另一种是oh my zsh自定义插件，处定义的插件是放在~/ .oh-my-zsh/custom/plugins/目录下，这个目录下的插件，就需要我们自己到网络上下载，然后再放到这个目录下，然后也是修改~/.zshrc文件中的<code>plugins=(git zsh-syntax-highlighting cp z vim-interaction npm zsh-nvm)</code>,<br><img src="/images/macos/macos-01/11.jpg" alt=""><br>比如我这里安装了一个自定义的插件zsh-syntax-highlighting，用来增强zsh在命令行中输入正确的命令为绿色，如果输入错误的命令则显示为红色。如图所示：<br><img src="/images/macos/macos-01/12.jpg" alt=""><br><strong>安装oh my zsh自定义插件的方法，参考<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="external">github源码</a></strong>：<br>首先将这个插件的源码克隆到oh-my-zsh的自定义plugins目录中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</div></pre></td></tr></table></figure>
<p>其实在oh my zsh配置文件中配置激活插件，修改~/.zshrc：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=( [plugins...] zsh-syntax-highlighting)</div></pre></td></tr></table></figure>
<p>最后执行<code>source ~/.zshrc</code>让插件即时生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>其它自定义的插件，安装方法类似，大家可以自行到网络上搜索oh my zsh的插件，我也是在慢慢的探索新逼格的新插件中。至此分享结束，后续也会持续关注有关macOs上的工具优化。希望能够帮到大家，相互学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事,必先利其器。能从千百年传承下来，必定是经过各行各业的实践与验证，到今年仍然适用，今天就分享一些软件行业对程序员来说的利器(zsh+oh my zsh)这款屌炸天linux下的增加命令行的工具。&lt;/p&gt;
&lt;p&gt;之前一直都是用着各种环境下的默认的终端工具，在逛git
    
    </summary>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/macOs/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="git" scheme="http://www.troylc.cc/tags/git/"/>
    
      <category term="zsh" scheme="http://www.troylc.cc/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>RANCHER容器平台管理(一)-环境构建与配置</title>
    <link href="http://www.troylc.cc/rancher/2017/06/02/rancher-01.html"/>
    <id>http://www.troylc.cc/rancher/2017/06/02/rancher-01.html</id>
    <published>2017-06-02T09:26:15.000Z</published>
    <updated>2017-06-02T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>rancher是什么，它能为我们做些什么？rancher是一个开源的软件平台，使企业能够在生产环境中运行容器。使用Rancher，我们不再需要使用不同的开源技术从头开始构建容器服务平台。Rancher提供管理生产环境中的容器所需的整个软件堆栈。  </p>
<p>如下为rancher的功能图：<br><img src="/images/rancher/rancher-base/1.png" alt="rancher功能图"></p>
<h2 id="安装Rancher服务器"><a href="#安装Rancher服务器" class="headerlink" title="安装Rancher服务器"></a>安装Rancher服务器</h2><p>Rancher被部署为一组Docker容器。运行的牧场主是简单的启动两个容器。一个容器作为管理服务器，另一个容器在节点上作为代理。</p>
<p><strong>运行Rancher的要求：</strong>  </p>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。如：RancherOS，Ubuntu，RHEL / CentOS 7，这些都进行了更严格的测试。<ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>MySQL服务器应该有一个max_connections设置&gt; 150<ul>
<li>MYSQL配置要求<ul>
<li>选项1：用Antelope文件格式运行，默认值为 COMPACT</li>
<li>选项2：使用Barracuda运行MySQL5.7，默认ROW_FORMAT值为Dynamic  </li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>rancher目前的版本情况：</strong><br>Rancher服务器端的容器有2个不同的版本。</p>
<ul>
<li>rancher/server:latest标签将是我们最新的开发版本。这些构建将通过我们的CI自动化框架进行验证。这些版本不适用于部署在生产中。</li>
<li>rancher/server:stable标签将是我们最新的稳定发布版本。此标签是我们推荐用于生产的版本。  </li>
</ul>
<p>请不要使用任何带有rc{n}后缀的版本。这些rc构建意味着Rancher团队测试构建。</p>
<h3 id="安装一个单容器rancher-service"><a href="#安装一个单容器rancher-service" class="headerlink" title="安装一个单容器rancher service"></a>安装一个单容器rancher service</h3><ul>
<li>运行一个单容器的rancher service，<br>如果要将容器内的数据库保存到主机上的卷上，请通过绑定MySQL卷来启动Rancher服务器  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -v &lt;宿主机目录&gt;:/var/lib/mysql --restart=unless-stopped -p 8080:8080 rancher/server:stable</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>UI和API将在暴露端口上可用8080。在Docker镜像下载完成之后，Rancher成功启动后可能需要一两分钟的时间才能查看。<br>导航到以下网址：http://<server_ip>:8080。该<server_ip>是运行牧场主服务器主机的公网IP地址。</server_ip></server_ip></p>
<p>一旦UI启动并运行，您可以通过添加主机或从基础架构目录中选择一个容器编排。默认情况下，如果不选择不同的容器编排类型，环境将使用rancher默认的编排模型Cattle。将主机添加到Rancher之后，您可以从Rancher目录开始添加服务或启动模板。  </p>
<p>用浏览器打开<a href="http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher" target="_blank" rel="external">http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher</a> Server搭建成功了  </p>
<p><img src="/images/rancher/rancher-base/2.png" alt="rancher">  </p>
<h2 id="RANCHER管理"><a href="#RANCHER管理" class="headerlink" title="RANCHER管理"></a>RANCHER管理</h2><h3 id="设置权限访问"><a href="#设置权限访问" class="headerlink" title="设置权限访问"></a>设置权限访问</h3><p>第一次启动rancher后，它本身是没有给权限控制，所有人都可以访问，并且访问的权限是一样的。在RANCHER UI中我们可以看到系统管理旁边有一个红色的“！”，其实际标识当前的RANCHER是没有权限控制的，需要我们在系统管理下的二级菜单中选择访问控制，添加相应的管理用户后来启动访问权限的控制，Rancher支持多种权限控制方案，分别是：Active Directory、Azure AD、GitHub、Local Auth、OpenLDAP和SHIBBOLETH。我们这里选择简单的本地数据权限local Auth,即设置一个用户名密码，然后启动本地权限控制。<br><img src="/images/rancher/rancher-base/3.png" alt="访问权限"><br><img src="/images/rancher/rancher-base/4.png" alt="本地控制"><br>启动本地权限控制后，我们可以点击账号管理来添加更多的管理账号<br><img src="/images/rancher/rancher-base/5.png" alt="账号添加"><br>或者在系统管理的二级菜单中找到账号设置：<br><img src="/images/rancher/rancher-base/6.png" alt="账号设置"><br>点击添加账号，添加更多的管理账号：<br><img src="/images/rancher/rancher-base/7.png" alt="添加账号信息">  </p>
<h3 id="RANCHER环境管理"><a href="#RANCHER环境管理" class="headerlink" title="RANCHER环境管理"></a>RANCHER环境管理</h3><p>Rancher支持将资源分组到多个环境中。每个环境都从用于创建环境的环境模板定义的一组基础结构服务开始。每个环境都有自己的资源集，由一个或多个用户或组拥有。例如，您可以创建单独的“开发”，“测试”和“生产”环境，以保持彼此的隔离，并为您的整个组织提供“开发”访问权限，但将“生产”环境限制为较小的团队。所有主机和任何Rancher资源（如容器，基础设施服务等）都可以在环境中创建。</p>
<ol>
<li><p>添加RANCHER环境<br><img src="/images/rancher/rancher-base/8.png" alt="环境管理"><br><img src="/images/rancher/rancher-base/9.png" alt="环境管理界面"><br>点击添加环境界面，输入名称与描述，从rancher预制的模板中选择一个模板。然后添加具有访问权限的用户<br><img src="/images/rancher/rancher-base/10.png" alt="添加环境"><br><img src="/images/rancher/rancher-base/11.png" alt="给环境授权用户"><br>在添加完环境的列表中，也可以编辑对应的环境，编辑环境的内容和添加一样。<br><img src="/images/rancher/rancher-base/12.png" alt="编辑环境"></p>
</li>
<li><p>添加主机到RANCHER环境<br>主机是Rancher中最基本的资源单元，并且表示为虚拟或物理的任何Linux服务器，具有以下最低要求：</p>
</li>
</ol>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。RancherOS，Ubuntu，RHEL / CentOS 7进行了更严格的测试。</li>
<li><ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，请使用内核版本3.10.0-514.2.2.el7.x86_64或更高版本。使用7.3版或更高版本时包括。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>推荐CPU / AES-NI</li>
<li>能够通过预先配置的端口通过http或https与Rancher服务器进行通信。默认值为8080。</li>
<li>能够在同一环境下路由到任何其他主机，以利用Rancher对Docker容器的跨主机网络。</li>
<li>Rancher还支持Docker Machine，并允许您通过任何支持的驱动程序添加主机。</li>
<li>主机上必须安装rancher所支持的版本，可参考<a href="http://docs.rancher.com/rancher/v1.5/en/hosts/#supported-docker-versions" target="_blank" rel="external">rancher支持的docker版本</a></li>
</ul>
<p>从基础设施 - &gt; 主机选项卡，单击添加主机。<br><img src="/images/rancher/rancher-base/13.png" alt="添加主机"><br>点击保存，进入添加主机界面，选择不同类型的主机，这里添加本地服务器，可以给每个主机添加不同的labels<br><img src="/images/rancher/rancher-base/14.png" alt="添加主机1"><br><img src="/images/rancher/rancher-base/15.png" alt="添加主机2"><br>点击复制链接，在指定的本地的服务器上粘贴复制的内容，等待下截rancher agent下载运行后，关闭rancher的复制页面，在主机界面就会出现对应的主机信息：<br><img src="/images/rancher/rancher-base/16.png" alt="主机"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rancher是什么，它能为我们做些什么？rancher是一个开源的软件平台，使企业能够在生产环境中运行容器。使用Rancher，我们不再需要使用不同的开源技术从头开始构建容器服务平台。Rancher提供管理生产环境中的容器所需的整个软件堆栈。  &lt;/p&gt;
&lt;p&gt;如下为ra
    
    </summary>
    
      <category term="rancher" scheme="http://www.troylc.cc/categories/rancher/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="rancher" scheme="http://www.troylc.cc/tags/rancher/"/>
    
  </entry>
  
  <entry>
    <title>linux系列(三)-linux在线调整分区大小-centos7</title>
    <link href="http://www.troylc.cc/linux/2017/06/02/linux-03.html"/>
    <id>http://www.troylc.cc/linux/2017/06/02/linux-03.html</id>
    <published>2017-06-02T09:26:15.000Z</published>
    <updated>2017-06-02T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用和维护Linux服务器的过程中有时会出现需要调整分区大小的情况。如果配置了lvm（logical volume management）的话，<br>可以很方便使用lvextend/lvreduce无损失增加和减少lvm分区的大小。做任何磁盘操作请做好备份！</p>
<h2 id="summary（概要）"><a href="#summary（概要）" class="headerlink" title="summary（概要）"></a>summary（概要）</h2><ul>
<li>系统环境: centos7</li>
<li>情况：<ol>
<li>home：50G</li>
<li>root：50G</li>
<li>root分区不够用</li>
</ol>
</li>
<li>思路：把home分区的空间划一部分到root分区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 设置home分区大小为200G，释放300G空间</div><div class="line">$ lvreduce -L 200G /dev/centos/home</div><div class="line"></div><div class="line"># 将空闲空间扩展到root分区</div><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line"></div><div class="line"># 使用XFS文件系统自带的命令集增加分区空间</div><div class="line">$ xfs_growfs /dev/mapper/centos-root</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><p>挂载在根目录的分区 <code>/dev/mapper/centos-root</code> 爆满，占用100%</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ df -h</div><div class="line">Filesystem               Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/centos-root   50G   50G   19M 100% /</div><div class="line">devtmpfs                  32G     0   32G   0% /dev</div><div class="line">tmpfs                     32G     0   32G   0% /dev/shm</div><div class="line">tmpfs                     32G  2.5G   29G   8% /run</div><div class="line">tmpfs                     32G     0   32G   0% /sys/fs/cgroup</div><div class="line">/dev/mapper/centos-home  50G   33M  49G   1% /home</div><div class="line">/dev/sda1                497M  238M  259M  48% /boot</div><div class="line">tmpfs                    6.3G     0  6.3G   0% /run/user/0</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>挂载在根目录的分区空间太小，只有50G，而服务器 <code>home</code> 目录为非常用目录，挂在了近50G的空间。</p>
<p>思路：从 <code>centos-home</code> 分区划出40G空间到 <code>centos-root</code> 分区。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="1-查看各分区信息"><a href="#1-查看各分区信息" class="headerlink" title="1.查看各分区信息"></a>1.查看各分区信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# lvdisplay</div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/swap</div><div class="line">  LV Name                swap</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                16Tima-Q9Us-F2NC-sPqb-YmPo-qxjl-zQZdRB</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:17 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 2</div><div class="line">  LV Size                4.00 GiB</div><div class="line">  Current LE             1024</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:1</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/home</div><div class="line">  LV Name                home</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                r42xE3-WwVn-an7C-WQzJ-NK3R-vg10-aWnHwE</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:18 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.45 GiB</div><div class="line">  Current LE             3444</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:2</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/root</div><div class="line">  LV Name                root</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                d74yiv-jdym-sg5h-v49g-cpxZ-6Ttn-JtUoa7</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:20 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.05 GiB</div><div class="line">  Current LE             23054</div><div class="line">  Segments               2</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:0</div></pre></td></tr></table></figure>
<h4 id="2-umount卸载-home目录"><a href="#2-umount卸载-home目录" class="headerlink" title="2.umount卸载/home目录"></a>2.umount卸载/home目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# umount /home/</div></pre></td></tr></table></figure>
<h4 id="3-减少-home分区空间"><a href="#3-减少-home分区空间" class="headerlink" title="3.减少/home分区空间"></a>3.减少/home分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 释放 /dev/centos/home 分区 40G 的空间</div><div class="line"># 命令设置 /dev/centos/home 分区 10G空间</div><div class="line">$ lvreduce -L 10G /dev/centos/home</div><div class="line">WARNING: Reducing active logical volume to 200.00 GiB.</div><div class="line"> THIS MAY DESTROY YOUR DATA (filesystem etc.)</div><div class="line">Do you really want to reduce centos/home? [y/n]: y</div><div class="line"> Size of logical volume centos/home changed from 50.70 GiB (121778 extents) to 10.00 GiB (51200 extents).</div><div class="line"> Logical volume centos/home successfully resized.</div></pre></td></tr></table></figure>
<h4 id="4-增加-root分区空间"><a href="#4-增加-root分区空间" class="headerlink" title="4.增加/root分区空间"></a>4.增加/root分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line">Size of logical volume centos/root changed from 50.06 GiB (12816 extents) to 90.76 GiB (83394 extents).</div><div class="line">Logical volume centos/root successfully resized.</div></pre></td></tr></table></figure>
<h4 id="5-扩展XFS文件空间大小"><a href="#5-扩展XFS文件空间大小" class="headerlink" title="5.扩展XFS文件空间大小"></a>5.扩展XFS文件空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ xfs_growfs /dev/mapper/centos-root</div><div class="line">meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=3276800 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=0        finobt=0 spinodes=0</div><div class="line">data     =                       bsize=4096   blocks=13107200, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</div><div class="line">log      =internal               bsize=4096   blocks=6400, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">data blocks changed from 13107200 to 85395456</div></pre></td></tr></table></figure>
<p>由于xfs文件系统不能执行分区减小的调整！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# xfs_growfs /dev/mapper/centos-home</div><div class="line">xfs_growfs: /dev/mapper/centos-home is not a mounted XFS filesystem</div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line">mount: /dev/mapper/centos-home：不能读超级块</div></pre></td></tr></table></figure>
<p>这样，只能通过重新格式化这个分区，格式化后才能再次挂载到home下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mkfs.xfs /dev/mapper/centos-home -f</div><div class="line">meta-data=/dev/mapper/centos-home isize=512    agcount=4, agsize=41156608 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=1        finobt=0, sparse=0</div><div class="line">data     =                       bsize=4096   blocks=164626432, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</div><div class="line">log      =internal log           bsize=4096   blocks=80384, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">  </div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line"></div><div class="line">[root@localhost ~]# reboot</div></pre></td></tr></table></figure>
<p>再次查看分区，发现home分区已经减小了100G,只不过这个分区里之前的数据都没有了。</p>
<p>完成</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用和维护Linux服务器的过程中有时会出现需要调整分区大小的情况。如果配置了lvm（logical volume management）的话，&lt;br&gt;可以很方便使用lvextend/lvreduce无损失增加和减少lvm分区的大小。做任何磁盘操作请做好备份！&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="linux" scheme="http://www.troylc.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="shell" scheme="http://www.troylc.cc/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>如何在linux配置DockerSwarm的Linux防火墙</title>
    <link href="http://www.troylc.cc/docker-swarm/2017/05/16/docker-swarm-firewalld.html"/>
    <id>http://www.troylc.cc/docker-swarm/2017/05/16/docker-swarm-firewalld.html</id>
    <published>2017-05-16T02:10:07.000Z</published>
    <updated>2017-05-16T02:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker Swarm是Docker的一个功能，可以轻松地在规模上运行Docker主机和容器。Docker Swarm或Docker集群由一个或多个Dockerized主机组成，它们作为管理器节点和任意数量的工作节点。设置这样的系统需要仔细操纵Linux防火墙。</p>
<p>Docker Swarm正常工作所需的网络端口有： </p>
<p><strong>TCP端口 2376 </strong><br>用于安全Docker客户端通信。Docker Machine可以使用此端口。Docker Machine用于编排Docker主机。<br><strong>TCP端口 2377 </strong><br>。该端口用于Docker群集或群集节点之间的通信。它只需要在管理器节点上打开。<br><strong>TCP和UDP端口7946</strong><br>用于节点间的通信（容器网络发现）。<br><strong>4789</strong><br>用于覆盖网络流量的UDP端口（容器入口组网）。<br>注意：除了这些端口之外，<br><strong>端口22  </strong><br>（用于SSH流量）和特定服务在集群上运行所需的任何其他端口都必须打开。</p>
<p>在本文中，您将学习如何使用所有Linux发行版上可用的不同防火墙管理应用程序在Ubuntu 16.04上配置Linux防火墙。这些防火墙管理应用程序是防火墙，IPTables工具和UFW，简单防火墙。UFW是Ubuntu发行版上的默认防火墙应用程序，包括Ubuntu 16.04。虽然本教程涵盖三种方法，但每种方法都会产生相同的结果，因此您可以选择您最熟悉的方法。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a><strong>先决条件</strong></h1><p>在继续阅读本文之前，您应该：</p>
<p>设置构成集群的主机，包括至少一个群组管理器和一个群组工作程序。您可以按照本教程如何在Ubuntu 16.04上使用Docker Machine配置和管理远程Docker主机进行设置。<br><strong>注意：</strong><br>你会注意到命令（和本文中的所有命令）不是前缀sudo。这是因为假设您<br>docker-machine ssh<br>使用Docker Machine配置之后，使用该命令登录到服务器。</p>
<h3 id="方法1-使用UFW打开Docker-Swarm端口"><a href="#方法1-使用UFW打开Docker-Swarm端口" class="headerlink" title="方法1 - 使用UFW打开Docker Swarm端口"></a>方法1 - 使用UFW打开Docker Swarm端口</h3><p>如果您只是设置Docker主机，则UFW已经安装。您只需要启用和配置它。按照本指南了解有关在Ubuntu 16.04上使用UFW的更多信息。</p>
<p>在将用作Swarm管理器的节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 2377/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>这可能不是必需的，但是无论何时更改并重新启动防火墙，都不会重新启动Docker守护程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在作为工作者的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请启用它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>然后重新启动Docker守护进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是您需要做的，使用UFW打开Docker Swarm的必要端口。</p>
<h3 id="方法2-使用FirewallD打开Docker-Swarm端口"><a href="#方法2-使用FirewallD打开Docker-Swarm端口" class="headerlink" title="方法2 - 使用FirewallD打开Docker Swarm端口"></a>方法2 - 使用FirewallD打开Docker Swarm端口</h3><p>FirewallD是基于Fedora，CentOS和其他Linux发行版的默认防火墙应用程序。但是FirewallD也可以在其他Linux发行版中使用，包括Ubuntu 16.04。</p>
<p>如果您选择使用FirewallD而不是UFW，请先卸载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get purge ufw</div></pre></td></tr></table></figure>
<p>然后安装FirewallD：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install firewalld</div></pre></td></tr></table></figure>
<p>验证它是否正在运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure>
<p>如果没有运行，启动它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure>
<p>然后启用它，以便它在启动时启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld</div></pre></td></tr></table></figure>
<p>在作为Swarm管理器的节点上，使用以下命令打开必要的端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=2377/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：如果您犯了错误，需要删除条目，请键入：。</div><div class="line"></div><div class="line">firewall-cmd --remove-port=port-number/tcp —permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在将作为Swarm工作器的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>您已成功使用FirewallD打开Docker Swarm所需的端口。</p>
<h3 id="方法3-使用IPTables打开Docker群集端口"><a href="#方法3-使用IPTables打开Docker群集端口" class="headerlink" title="方法3 - 使用IPTables打开Docker群集端口"></a>方法3 - 使用IPTables打开Docker群集端口</h3><p>要在任何Linux发行版上使用IPtables，您必须先卸载任何其他防火墙工具。如果您正在从FirewallD或UFW切换，请先卸载它们。</p>
<p>然后安装iptables-persistent软件包，管理自动加载IPtables规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<p>接下来，使用以下命令刷新现有规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>现在您可以使用该iptables实用程序添加规则。该第一组命令应该在作为Swarm管理器的节点上执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2377 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>输入所有命令后，将规则保存到磁盘：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>在将用作Swarm工作的节点上，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>将这些新规则保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是为Docker Swarm使用IPTables打开所需的端口。您可以在教程如何使用Iptables防火墙中了解更多关于这些规则如何工作的信息。</p>
<p>如果您希望在使用此方法后切换到FirewallD或UFW，正确的方法是先停止防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent stop</div></pre></td></tr></table></figure>
<p>然后冲洗规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>最后，将现在的空表保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后你可以切换到UFW或FirewallD。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>FirewallD，IPTables工具和UFW是Linux世界中的三个防火墙管理应用程序。你刚刚学会了如何使用它来打开设置Docker Swarm所需的网络端口。您使用哪种方法只是个人偏好的问题，因为它们都具有同等的功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Docker Swarm是Docker的一个功能，可以轻松地在规模上运行Docker主机和容器。Docker Swarm或Docker集群由
    
    </summary>
    
      <category term="docker swarm" scheme="http://www.troylc.cc/categories/docker-swarm/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>docker-swarm下部署mysql高可用(主从复制)</title>
    <link href="http://www.troylc.cc/mysql/2017/05/14/docker-swarm-mysql-ha.html"/>
    <id>http://www.troylc.cc/mysql/2017/05/14/docker-swarm-mysql-ha.html</id>
    <published>2017-05-14T07:50:47.000Z</published>
    <updated>2017-05-14T07:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在考虑MySQL数据库的高可用架构时，主要考虑以下几方面：</p>
<ul>
<li>如果数据库发生了宕机或者意外中断等故障，能尽快恢复数据库的可用性，尽可能的减少停机时间，保证业务不会因为数据库的故障而中断。</li>
<li>用作备份、只读副本等功能的非主节点的数据应该和主节点的数据实时或者最终保持一致。</li>
<li>当业务发生数据库切换时，切换前后的数据库内容应当一致，不会因为数据缺失或者数据不一致而影响业务。</li>
</ul>
<p>以下是在docker swarm环境中部署一个mysql的高可用环境，通过MaxScale的一个MySQL数据中间件，实现读写分离，并根据主从状态实现写库的自动切换。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>docker swarm环境</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.xxx</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<p>swarm集群的安装与管理，参考：<br><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a><br><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></p>
<p>查看swarm节点情况：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME         STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">60w2g6sd30iep1865qbi8tt87    docker-node02    Ready   Active        </div><div class="line">uy5jeecverzi7go34p5pkenz8 *  docker-master01  Ready   Active        Leader</div><div class="line">xgwetr888pf6ygkb3rh6zfjqx    docker-node01    Ready   Active</div></pre></td></tr></table></figure>
<h2 id="在swarm上部署myql高可用"><a href="#在swarm上部署myql高可用" class="headerlink" title="在swarm上部署myql高可用"></a>在swarm上部署myql高可用</h2><ul>
<li>创建一个swarm的全局网络：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network create -d overlay dbmysqlnet</span></div><div class="line">m26c1w6c1tilycfv8h6u1pogc</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">m26c1w6c1til        dbmysqlnet          overlay             swarm</div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个mysql cluster集群，设置副本为1，–replicas=1，当副本为1时 mariadb-cluster镜像为这个实例自动变成引导节点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker service create --name mysqldbcluster \</div><div class="line">--network dbmysqlnet \</div><div class="line">--replicas=1 \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">--env MYSQL_DATABASE=mytestdb \</div><div class="line">--env MYSQL_USER=mysqldbuser \</div><div class="line">--env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">toughiq/mariadb-cluster</div></pre></td></tr></table></figure>
<p>注：所提供的服务名称–name必须匹配环境变量DB_SERVICE_NAME镶有–env DB_SERVICE_NAME，并为数据库设置数据库名、root用户名的密码，以及为数据库单独创建的用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service create --name mysqldbcluster \</span></div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --replicas=1 \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">&gt; --env MYSQL_DATABASE=mytestdb \</div><div class="line">&gt; --env MYSQL_USER=mysqldbuser \</div><div class="line">&gt; --env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">&gt; toughiq/mariadb-cluster</div><div class="line">v7azlb9yvbv8uumoisddtd4pu</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  1/1       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02  Running        Running 27 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>再通过更新mysqldbcluster服务扩展mysql数据库，这个通过更新mysqldbcluster服务的2个副本的启动将出现在“cluster join”-mode中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service scale mysqldbcluster=3</span></div><div class="line">mysqldbcluster scaled to 3</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE             DESIRED STATE  CURRENT STATE          ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02    Running        Running 5 minutes ago         </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2  toughiq/mariadb-cluster:latest  docker-master01  Running        Running 7 seconds ago         </div><div class="line">wz5u3sdocykj  mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Running        Running 7 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建MaxScale代理服务并连接到mysqldbcluster   </li>
</ul>
<p>由于Swarm提供了一个负载平衡器，因此使用该Docker Swarm启用的数据库集群不需要MaxScale Proxy服务。因此，可以使用负载均衡器DNS名称连接到集群,上面运行的例子就是mysqldbcluster。它在同一个名字，由启动时提供–name。<br>但是MaxScale提供了一些关于负载平衡数据库流量的附加功能。它是获取有关群集状态的信息的简单方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">docker service create --name maxscale \</div><div class="line">--network dbmysqlnet \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env ENABLE_ROOT_USER=1 \</div><div class="line">--publish 3306:3306 \</div><div class="line">toughiq/maxscale</div><div class="line">```  </div><div class="line">要通过MaxScale禁用root对数据库的访问，只需设置--env ENABLE_ROOT_USER=0或删除该行即可。</div><div class="line">默认情况下禁用根访问。</div><div class="line"></div><div class="line">```bash</div><div class="line">[root@docker-master01 ~]# docker service create --name maxscale \</div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env ENABLE_ROOT_USER=1 \</div><div class="line">&gt; --publish 3306:3306 \</div><div class="line">&gt; toughiq/maxscale</div><div class="line">v50kns05a9f5ufb028g8u3zsr</div><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps maxscale</div><div class="line">ID            NAME        IMAGE                    NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">unny1x1y10hs  maxscale.1  toughiq/maxscale:latest  docker-node02  Running        Running 18 seconds ago</div></pre></td></tr></table></figure>
<p>可以查看到maxscale是在集群的docker-node02上，到这台主机上查看一下mysql集群的情况如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers</div><div class="line">Servers.</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">Server             | Address         | Port  | Connections | Status              </div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">10.0.0.4           | 10.0.0.4        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.5           | 10.0.0.5        |  3306 |           0 | Master, Synced, Running</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">[root@docker-node02 ~]#</div></pre></td></tr></table></figure>
<p>从上面的部署，mysql高可用集群基本上完成，我们可以做一下容灾的测试，比如停掉一台宿主机，或者停止一台集群节点上的容器，在通过以上命令，看看有什么结果，可以自行测试看看。  </p>
<h2 id="测试mysql高可用情况"><a href="#测试mysql高可用情况" class="headerlink" title="测试mysql高可用情况"></a>测试mysql高可用情况</h2><ul>
<li>首页查看master节点是那台机器，通过上面，可以看出ip为10.0.0.5为主节点，通过docker inspect,查看主节点在那台机器上，然后重启这台宿主机上的mysql容器，然后swarm集群会马上启动一个mysql容器，以达到mysql集群的副本数，</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">8a4d7deff9db        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   26 minutes ago      Up 26 minutes       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.wz5u3sdocykj1y0e47bbze1ti</div><div class="line">[root@docker-node01 ~]# docker stop 26d2e2a34089</div><div class="line">26d2e2a34089</div><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">2872c109eee8        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   24 seconds ago      Up 18 seconds       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.idh7t6r9h4nxivz1bm0hn7bi7</div></pre></td></tr></table></figure>
<ul>
<li>在通过swarm 管理节点，查看mysql集群的部署情况，通过maxscale中间件，查看mysql高可用情况<br>swarm manager节点查看：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps mysqldbcluster</div><div class="line">ID            NAME                  IMAGE                           NODE             DESIRED STATE  CURRENT STATE           ERROR                             PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1      toughiq/mariadb-cluster:latest  docker-node02    Running        Running 39 minutes ago                                    </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 33 minutes ago                                    </div><div class="line">boolbkf16bz2  mysqldbcluster.3      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 6 minutes ago                                     </div><div class="line">wz5u3sdocykj   \_ mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Shutdown       Failed 6 minutes ago    &quot;No such container: mysqldbclu…&quot;  </div><div class="line">```  </div><div class="line">maxscale中查看</div></pre></td></tr></table></figure>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Down<br>——————-+—————–+——-+————-+——————–<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">等待swarm集群再恢复所有节点后查看：</div></pre></td></tr></table></figure></p>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Slave, Synced, Running<br>——————-+—————–+——-+————-+——————–<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在考虑MySQL数据库的高可用架构时，主要考虑以下几方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果数据库发生了宕机或者意外中断等故障，能尽快恢复数据库的可用性，尽可能的减少停机时间，保证业务不会因为数据库的故障而中断。&lt;/li&gt;
&lt;li&gt;用作备份、只读副本等功能的非主节点的数据应该
    
    </summary>
    
      <category term="mysql" scheme="http://www.troylc.cc/categories/mysql/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="mysql" scheme="http://www.troylc.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用docker构建与部署spring-cloud的微服务(七)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/24/spring-cloud-deploy.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/24/spring-cloud-deploy.html</id>
    <published>2017-04-24T01:17:43.000Z</published>
    <updated>2017-04-24T10:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先总结一下前面一系列的spring-cloud微服务学习，我们用eureka做服务的注册中心，通过向服务注册中心注册了三个简单的服务，如：用户微服务(microservice-provider-userservice)，商品微服务(microservice-consumer-productservice)，异构平台的评论微服务(microservice-sidecar-comment),在商品微服务中，通过spring cloud FeignClient来进行微服务之间的相互调用，通过sprig cloud zuul来暴露外维系统想访问微服务的接口，并用spring cloud config搭建了一个分布式的配置中心，通过改造用户微服务，来实现分布式的服务的配置功能。用spring cloud bus以及kafka的消息机制来实现服务配置的无停机就能自动刷新加载。本系列相关的文章，在本节就结束了，此系统纯属老司机的学习总结，欢迎大家指正交流，达到相互学习的目的。</p>
<h2 id="此系统列参考文档："><a href="#此系统列参考文档：" class="headerlink" title="此系统列参考文档："></a>此系统列参考文档：</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud config不知道怎么配置</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html">SpringCloud构微服务之-配置中心</a></td>
</tr>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<p>本节通过maven和idea的插件来构建docker镜像，编写docker-compose.yml来编排各服务节点，通过compose命令在docker-swarm中部署前面章节编写的微服务内容。</p>
<h2 id="微服务镜像的构建。"><a href="#微服务镜像的构建。" class="headerlink" title="微服务镜像的构建。"></a>微服务镜像的构建。</h2><p>在构建镜像之前，我们需要把一台内容的docker的远程API开放，以及内网搭建了有自己的docker私有仓库等功能。参考<a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移</a>、<a href="http://www.troylc.cc/docker/2016/07/31/docker-02.html">docker系列(二)使用Docker-Remote-API</a></p>
<p>镜像的构建如果是maven管理的java程序，我们可以通过maven的插件来进行镜像构建，如以下几个项目，都是通过maven插件来构建的。<br>首先在项目的主pom文件中加载一下docker的maven插件docker-maven-plugin，如：<br><img src="/images/spring-cloud/docker-swarm/1.png" alt="build"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    ......</div><div class="line">    &lt;!--添加利用maven插件构建docker镜像的插件依赖--&gt;</div><div class="line">    &lt;pluginManagement&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;0.4.13&lt;/version&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/pluginManagement&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
<ul>
<li>microservice-eureka-service注册中心镜像构建，在pom.xml插件处加入如下配置，  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">    &lt;executions&gt;</div><div class="line">        &lt;execution&gt;</div><div class="line">            &lt;id&gt;build-image&lt;/id&gt;</div><div class="line">            &lt;phase&gt;install&lt;/phase&gt;</div><div class="line">            &lt;goals&gt;</div><div class="line">                &lt;goal&gt;build&lt;/goal&gt;</div><div class="line">            &lt;/goals&gt;</div><div class="line">        &lt;/execution&gt;</div><div class="line">    &lt;/executions&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</div><div class="line">        &lt;dockerHost&gt;http://10.211.55.4:8372&lt;/dockerHost&gt;</div><div class="line">        &lt;pushImage&gt;true&lt;/pushImage&gt;&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</div><div class="line">        &lt;!--镜像名称--&gt;</div><div class="line">        &lt;imageName&gt;$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</div><div class="line">        &lt;!--镜像的基础版本--&gt;</div><div class="line">        &lt;baseImage&gt;java:openjdk-8-jdk-alpine&lt;/baseImage&gt;</div><div class="line">        &lt;!--镜像启动参数--&gt;</div><div class="line">        &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt;</div><div class="line">        &lt;!--&lt;imageTags&gt;</div><div class="line">            &lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;</div><div class="line">        &lt;/imageTags&gt;--&gt;</div><div class="line">        &lt;resources&gt;</div><div class="line">            &lt;resource&gt;</div><div class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</div><div class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</div><div class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</div><div class="line">            &lt;/resource&gt;</div><div class="line">        &lt;/resources&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p><img src="/images/spring-cloud/docker-swarm/2.png" alt="maven的构建"><br>执行maven的构建：<br><img src="/images/spring-cloud/docker-swarm/3.png" alt="maven的构建"><br>查看对应docker环境上的镜像</p>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        4 minutes ago       186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-provider-userservice用户微服务镜像构建<br>在用户微服务的pom文件增加构建镜像配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/4.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        6 minutes ago       215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        36 minutes ago      186 MB</div><div class="line"></div><div class="line">```   </div><div class="line"></div><div class="line">  </div><div class="line">- microservice-consumer-productservice商品微服务镜像构建  </div><div class="line">在商品微服务的pom文件增加构建镜像的配置，并执行install命令构建镜像   </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/5.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：</div></pre></td></tr></table></figure>
<p>[root@docker-master01 ~]# docker images<br>REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE<br>tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB<br>tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB<br>tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  </div><div class="line">- microservice-sidecar-comment异构平台接入微服务构建代码  </div><div class="line">在接入微服务异构平台的接入项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像     </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/6.png)   </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-config-service配置中心服务的构建代码<br>在微服务配置中心的项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/7.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        5 minutes ago       204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-nodejs-comment异构平台构建方法<br>此服务是用nodes编写的，和现有的微服务不是一种语言，如果要接入到微服务中，并部署到docker-swarm集群中，其一就是把自己的服务提供rest接口供微服务接入项目sidecar来配置接入，其二把编写的整个项目docker化。<br>此项目的docker化，因为没有maven来管理，所以需要编写一个dockerfile文件来进行构建，并且构建的方式是通过idea工具的docker插件来操作的。<br>Dockerfile文件内容：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">FROM node:7.7.4-alpine</div><div class="line"></div><div class="line"># Create app directory</div><div class="line">RUN mkdir -p /usr/src/app</div><div class="line">WORKDIR /usr/src/app</div><div class="line"></div><div class="line"># Install app dependencies</div><div class="line">COPY package.json /usr/src/app/</div><div class="line">#RUN npm install</div><div class="line"></div><div class="line"># Bundle app source</div><div class="line">COPY . /usr/src/app</div><div class="line"></div><div class="line">EXPOSE 3000</div><div class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">docker插件构建nodejs项目的镜像：  </div><div class="line">1. 首页在idea工具中安装docker插件  </div><div class="line">![idea插件](/images/spring-cloud/docker-swarm/8.png)  </div><div class="line">2. 其次配置cloud连接远程docker环境  </div><div class="line">![插件配置](/images/spring-cloud/docker-swarm/9.png)  </div><div class="line">3. 最后通过docker控制台构建与运行镜像  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/10.png)  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/11.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        4 minutes ago       66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        About an hour ago   204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        About an hour ago   184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        About an hour ago   187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        About an hour ago   215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div></pre></td></tr></table></figure>
<p>7.microservice-api-gateway微服务的API对外网关镜像构建<br><img src="/images/spring-cloud/docker-swarm/12.png" alt="maven构建镜像">  </p>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-api-gateway               0.1.0                     208d6656085a        2 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        34 minutes ago      66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        2 hours ago         204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        2 hours ago         184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        2 hours ago         187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        2 hours ago         215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">到此运行本次微服务的所有镜像都已经构建完成。版本都为0.1.0  </div><div class="line">  </div><div class="line">## docker-compose.yml的编写</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于eurekaService1的节点，它需要连接http://eurekaService2/3:951X/eureka/，因此需要配置该服务的名称是eurekaService1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:    # 高可用eureka注册节点2</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:    # 高可用eureka注册节点3</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:    # 商品微服务</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:  #服务网关服务</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:    #异构平台商品评价服务</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:    #接入异构平台的微服务</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  zookeeper:       #zookeeper服务，主要是协助kafka消息中心的</div><div class="line">    image: tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;2181:2181&quot;</div><div class="line">  kafka:      #kafka消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9092:9092&quot;</div><div class="line">    environment:</div><div class="line">      - &apos;KAFKA_ADVERTISED_HOST_NAME=kafka&apos;</div><div class="line">      - &apos;KAFKA_ADVERTISED_PORT=9092&apos;</div><div class="line">      - &apos;KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181&apos;</div><div class="line">    depends_on:</div><div class="line">      - zookeeper</div><div class="line">  rabbitmq:     #rqbbitmq消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">    hostname: &apos;my-rabbit&apos;</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;5672:5672&quot;</div><div class="line">      - &quot;15672:15672&quot;</div><div class="line">  configService:    #微服务的配置中心</div><div class="line">    image: tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9518:9518&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:      #用户微服务，且通过config service中获取相关配置信息</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - configService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<h2 id="docker-compose在docker-swarm中部署微服务"><a href="#docker-compose在docker-swarm中部署微服务" class="headerlink" title="docker compose在docker-swarm中部署微服务"></a>docker compose在docker-swarm中部署微服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml microservice</div><div class="line">Creating network microservice_eureka-net</div><div class="line">Creating service microservice_apiGateway</div><div class="line">Creating service microservice_kafka</div><div class="line">Creating service microservice_configService</div><div class="line">Creating service microservice_eurekaService2</div><div class="line">Creating service microservice_userService</div><div class="line">Creating service microservice_zookeeper</div><div class="line">Creating service microservice_sidecarComment</div><div class="line">Creating service microservice_eurekaService3</div><div class="line">Creating service microservice_nodeComment</div><div class="line">Creating service microservice_rabbitmq</div><div class="line">Creating service microservice_eurekaService1</div><div class="line">Creating service microservice_productService</div><div class="line">[root@docker-master01 docker-compose]# docker stack services microservice</div><div class="line">ID            NAME                         MODE        REPLICAS  IMAGE</div><div class="line">3gjonfu6ebh5  microservice_kafka           replicated  1/1       tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">5qen0mvwwa5x  microservice_productService  replicated  1/1       tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">be7j9n6vdm69  microservice_apiGateway      replicated  1/1       tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">ifjhurz97i80  microservice_eurekaService2  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">j6gsnfet2esa  microservice_configService   replicated  1/1       tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">js55ijbe4crw  microservice_userService     replicated  1/1       tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">lqriwyu6npph  microservice_nodeComment     replicated  1/1       tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">qc7s6fm4lnqg  microservice_sidecarComment  replicated  1/1       tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">t67efu3aw48t  microservice_eurekaService3  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">tn33z3ebce8a  microservice_zookeeper       replicated  1/1       tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">wiqe6x1pqpx4  microservice_rabbitmq        replicated  1/1       tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">xd5owqhu7h61  microservice_eurekaService1  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps microservice</div><div class="line">ID            NAME                           IMAGE                                                      NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">3b6wsnap14jw  microservice_productService.1  tcr:5000/myhub/microservice-consumer-productservice:0.1.0  docker-node01    Running        Running 12 seconds ago         </div><div class="line">pwir78iy5gwr  microservice_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node01    Running        Running 31 seconds ago         </div><div class="line">sp3hcoibmh6l  microservice_rabbitmq.1        tcr:5000/myhub/rabbitmq:3.6.9-management-alpine            docker-node01    Running        Running 20 seconds ago         </div><div class="line">gwdrnfyyoia1  microservice_nodeComment.1     tcr:5000/myhub/microservice-nodejs-comment:0.1.0           docker-node02    Running        Running 26 seconds ago         </div><div class="line">rva9h3xc82ub  microservice_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-master01  Running        Running 25 seconds ago         </div><div class="line">a3qy8xlqq65p  microservice_sidecarComment.1  tcr:5000/myhub/microservice-sidecar-comment:0.1.0          docker-node01    Running        Running 15 seconds ago         </div><div class="line">d8s8lpwj7pp6  microservice_zookeeper.1       tcr:5000/myhub/zookeeper:3.4.9                             docker-node02    Running        Running 21 seconds ago         </div><div class="line">ob1z00fyzhov  microservice_userService.1     tcr:5000/myhub/microservice-provider-userservice:0.1.0     docker-master01  Running        Running 24 seconds ago         </div><div class="line">xjrakh9bxh0j  microservice_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node02    Running        Running 30 seconds ago         </div><div class="line">7y2nczvpi7wl  microservice_configService.1   tcr:5000/myhub/microservice-config-service:0.1.0           docker-node02    Running        Running 18 seconds ago         </div><div class="line">85k0gkln3k7p  microservice_kafka.1           tcr:5000/myhub/kafka:0.10.1.1                              docker-master01  Running        Running 25 seconds ago         </div><div class="line">csniz9pc8bbs  microservice_apiGateway.1      tcr:5000/myhub/microservice-api-gateway:0.1.0              docker-master01  Running        Running 29 seconds ago</div></pre></td></tr></table></figure>
<p>出现以上结束，表示通过compose对docker化的微服务部署就完成了。下面我们来验证一下</p>
<h2 id="测试相关微服务的功能"><a href="#测试相关微服务的功能" class="headerlink" title="测试相关微服务的功能"></a>测试相关微服务的功能</h2><p>查看一下eureka注册中心，我们可以看到所有的微服务都已经注册上来了，我们把之前每篇的spring cloud的验证环节的操作，都在此操作一下，就会看到相同的结束，这里就一一验证了，大家可根据上面的源码及部署方式自行测试一下。<br><img src="/images/spring-cloud/docker-swarm/13.png" alt="测试"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先总结一下前面一系列的spring-cloud微服务学习，我们用eureka做服务的注册中心，通过向服务注册中心注册了三个简单的服务，如：用户微服务(microservice-provider-userservice)，商品微服务(microservice-consume
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud构微服务之-配置中心(六)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html</id>
    <published>2017-04-16T10:39:21.000Z</published>
    <updated>2017-04-16T10:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面的章节介绍，我们使用Eureka实现了服务中心；通过Feign实现服务间的消费，为了使服务更为健壮，使用Hystrix的熔断来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制，为了整合异构平台提供的微服务，我们通过sidecar组件把异构平台的微服务集成到了整个微服务的环境中。<br>当我们的业务系统越来越庞大复杂的时候，各种配置就会层出不群。一旦配置修改了，那么我们就是必须修改后停服务，然后再上线，如果服务少，我们可以手动来操作，如果是成千上百的服务，如果是手动操作，肯定就不合适宜了，这个时候我们就需要考虑分布式配置管理，spring cloud config配置中心就是为了解决这个问题的组件， </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="spring-cloud-微服务配置中心"><a href="#spring-cloud-微服务配置中心" class="headerlink" title="spring cloud 微服务配置中心"></a>spring cloud 微服务配置中心</h2><p>spring cloud config 由server端和client端组成，下面我就来结合git仓库来实现分布式配置中心搭建，在此章节我们搭建一个configServer,一个configClient端，并把服务端注册到eureka中心，以便于configClient通过eureka上注册的信息连接到configServer上,通过在configServer中集成spring cloud bus利用rabbitmq或kafka消息机制来实现配置更新后的自动刷新。</p>
<p><img src="/images/spring-cloud/config/1.png" alt="image"></p>
<h2 id="配置中心-服务端"><a href="#配置中心-服务端" class="headerlink" title="配置中心 服务端"></a>配置中心 服务端</h2><h3 id="创建configService"><a href="#创建configService" class="headerlink" title="创建configService"></a>创建configService</h3><ul>
<li>新建一个microservice-config-service的子工程，添加spring-cloud-config-server、spring-cloud-starter-eureka、spring-boot-starter-security、spring-cloud-starter-bus-kafka，如果消息总线是rabbitmq则替换kafka的依赖为spring-cloud-starter-bus-amqp  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!--配置需要认证所需要引用的包--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在新建的工程中的spring boot启动类上加上@EnableConfigServer、@EnableDiscoveryClient注册，第一个注解是启动此项目为configService端，第二个注册是把这个configService注册到Eureka上。  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableConfigServer</div><div class="line">public class ConfigServceApplication</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServceApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置configservice的配置文件，在bootstrap.yml,添加安全认证的配置，git仓库的配置,eurekaservice的配置，zookeeper-kafka的配置。如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 9518</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: configService</div><div class="line">    prefer-ip-address: true</div><div class="line">    ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">    instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">     defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/   #把configservice注册到eureka上，以便于客户端通过eureka上注册的信息找到configservice</div><div class="line">#实现的基本的 HttpBasic 的认证</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: true     # 开启基于HTTP basic的认证</div><div class="line">  user:</div><div class="line">    name: cadmin      # 配置登录的账号是user</div><div class="line">    password: cadmin123   # 配置登录的密码是eadmin123</div><div class="line">#</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-config-service</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: https://git.oschina.net/gittroylc/microservice-config-repo  #配置git仓库位置</div><div class="line">          clone-on-start: true #在启动的时候克隆仓库</div><div class="line">          search-paths: &apos;&#123;application&#125;&apos; #配置仓库路径下的相对搜索位置，可以配置多个</div><div class="line">          username: username   #填写git仓库的用户名</div><div class="line">          password: password   #填写git仓库的密码</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181</div><div class="line">          brokers: kafka:9092</div></pre></td></tr></table></figure>
<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>创建一个git仓库microservice-config-repo目录作为配置仓库，在仓库下创建一个microservice-provider-userservice对应的微服务文件夹，并根据不同环境新建了下面四个配置文件：<br><img src="/images/spring-cloud/config/2.png" alt="image"><br>microservice-provider-userservice-dev.yml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  jpa:</div><div class="line">    generate-ddl: false</div><div class="line">    show-sql: true</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">  datasource:                           # 指定数据源</div><div class="line">    platform: h2                        # 指定数据源类型</div><div class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</div><div class="line">    data: classpath:data.sql            # 指定h2数据库的insert脚本</div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    root: INFO</div><div class="line">    org.hibernate: INFO</div><div class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</div><div class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</div><div class="line">    com.troylc.cloud: debug</div><div class="line"></div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line"># 测试配置属性的自动刷新功能，增加一个自定义的属性文件</div><div class="line">from: git-dev-15.0</div></pre></td></tr></table></figure>
<p>在这四个文件中都有一个from的属性，其属性值分别为：<br>from: git-default-1.0<br>from: git-dev-15.0<br>from: git-prod-1.0<br>from: git-test-1.0  </p>
<h3 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h3><p>启动eurekaservice和configservice两个应用，并把相关的zookeeper,kafka等服务启动，我这里是开发阶段，zookeeper,kafka是用docker镜像启动的服务，两个服务是直接通过idea启动来验证，后面全搭建完成了，直接通过一个docker-compose.yml来统一部署所有服务  </p>
<p>在浏览器中输入：<a href="http://configservice:9518/microservice-provider-userservice/dev" target="_blank" rel="external">http://configservice:9518/microservice-provider-userservice/dev</a><br><img src="/images/spring-cloud/config/3.png" alt="image"><br><img src="/images/spring-cloud/config/4.png" alt="image"><br>从返回的json可以看出，propertySources读取microservice-provider-userservice-dev.yml，还读取了microservice-provider-userservice.yml。从读取的情况来看，如果没有microservice-provider-userservice-dev.yml文件，他会默认的读取microservice-provider-userservice.yml文件</p>
<p>对git仓库中的配置文件microservice-provider-userservice.yml的访问方式有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -s http://localhost:端口/test-service/dev |jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.properties</div><div class="line">curl -s http://localhost:端口/test-service-dev.json | jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.yml</div></pre></td></tr></table></figure>
<p>HTTP服务的git资源构成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.properties</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</div></pre></td></tr></table></figure>
<ul>
<li>{application}:对应客户端的spring.application.name属性;</li>
<li>{profile}:对应客户端的 spring.profiles.active属性(逗号分隔的列表);</li>
<li>{label}:对应服务端属性配置文件的版本。对应git是:提交id,分支名称或tag。  </li>
</ul>
<p>优先级  </p>
<ul>
<li>profiles的优先级高于defaults,有多个profiles,最后一个起作用。</li>
<li>/{application}/{profile}[/{label}]优先级高于application.properties</li>
</ul>
<p>其它方式配置仓库位置：  </p>
<ul>
<li>Spring Cloud Config提供本地存储配置的方式。只需要设置属性spring.profiles.active=native，Config Server会从应用的src/main/resource目录下搜索配置文件。  </li>
<li>spring.cloud.config.server.native.searchLocations=file:F:/properties/ 属性来指定配置文件的位置。  </li>
</ul>
<p>虽然Spring Cloud Config提供了其它配置仓库的功能，但为了能更好的管理内容和版本控制，推荐使用git的方式。</p>
<h2 id="微服务端-configclient-配置"><a href="#微服务端-configclient-配置" class="headerlink" title="微服务端(configclient)配置"></a>微服务端(configclient)配置</h2><p>在开发完成并测试验证了configservice之后，下面我们看看如何在微服务应用中获取相关的配置信息。</p>
<ul>
<li>改造之前我们开发的用户微服务的项目，在pom文件中增加spring-cloud-starter-config、spring-cloud-starter-bus-kafka两个依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"> &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>新建一个配置文件bootstrap.yml,指定configservice相关的配置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-provider-userservice</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      username: cadmin  #configservice认证的用户名</div><div class="line">      password: cadmin123   #认证密码</div><div class="line">      label: master   # 仓库的分支节点</div><div class="line">      discovery:  </div><div class="line">        enabled: true  #开启通过eureka上configservice找到相应的配置</div><div class="line">        service-id: microservice-config-service #configservice注册在Eureka上的service-id</div><div class="line">      profile: dev   #仓库中对应文件的环境，如dev、prod、test等</div><div class="line">      fail-fast: true</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181  </div><div class="line">          brokers: kafka:9092</div><div class="line">    bus:</div><div class="line">      trace:</div><div class="line">        enabled: true   #Spring Cloud Bus事件传播的细节</div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line">#服务状态UNKNOWN</div><div class="line">#如果把微服务的 eureka.client.healthcheck.enabled 属性配置在 bootstrap.yml 里面，可能会引起一些不良反应</div><div class="line">#比如，实际测试发现，Eureka 首页显示的服务状态，本应是 UP(1)，却变成大红色的粗体 UNKNOWN(1)</div><div class="line">#    healthcheck:</div><div class="line">#      enabled: true</div></pre></td></tr></table></figure>
<p>指定相关的configservice的eureka上的注册ID，指定zookeeper、kafka服务配置信息。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.stream.kafka.binder.brokers</td>
<td>Kafka的服务端列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultBrokerPort</td>
<td>Kafka服务端的默认端口，当brokers属性中没有配置端口时，就会个默认这端口</td>
<td>9092</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.zk-nodes</td>
<td>Kafka服务端连接的ZooKeeper节点列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultZkPort</td>
<td>ZooKeeper节点的默认端口，当zk-nodes属性中没有配置端口时，就会默认这个端口</td>
<td>2181</td>
</tr>
</tbody>
</table>
<p>通过以上配置说明，可以看出，如果我们在配置文件中不配置相关的zookeeper和kafka信息时，就会使用以上说明的默认值</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>上面这些属性必须配置在bootstrap.yml，configservice的内容才能正确加载。因为通过bootstrap.yml的加载优先级比configService的高，configservice加载优先于application.yml，所以如果你把上面的配置写在application.yml中，相当于默认不是从configService中读取的配置信息，而是spring boot的默认加载。启动的时候就会看到加载的配置，不是你指定的configservice的服务器,而是默认的<a href="http://localhost:8888服务中加载" target="_blank" rel="external">http://localhost:8888服务中加载</a></p>
<ul>
<li>在userController中添加一个restAPI的方法，用来从配置仓库中读取一个from属性,如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@RefreshScope</div><div class="line">@RestController</div><div class="line">public class UserController &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;from&#125;&quot;)</div><div class="line">    private String fromInfostr;</div><div class="line">    /**</div><div class="line">     * 获取所有用户</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;获取自动刷新后的配置文件中from中的值&quot;, notes = &quot;获取自动刷新后的配置文件&quot;)</div><div class="line">    @GetMapping(&quot;/from&quot;)</div><div class="line">    public ResultInfo geFromInfo() &#123;</div><div class="line">        String fromInfostr = null;</div><div class="line">        try &#123;</div><div class="line">            fromInfostr = this.fromInfostr;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SUCCESS.getState(),ReturnInfoEnum.SUCCESS.getStateInfo(), fromInfostr);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    .......</div></pre></td></tr></table></figure>
<h2 id="微服务端测试"><a href="#微服务端测试" class="headerlink" title="微服务端测试"></a>微服务端测试</h2><p>启动configservice和configclient，为了便于观察消息总线刷新配置的效果，可以启动多个不同端口的configclient。可以看到configservice以及多个configclient都连接上由Kafka实现的消息总线。直接访问每个configclient上的/from请求，查看获取到的from配置的内容，可以看到一开始，都是之前写的默认值。之后，修改Git中对应配置文件中的参数内容，向configservice发送POST请求：/bus/refresh，再去访问各个configclient上的/from请求，可以看到各客户端上的配置都刷新为最新配置内容。<br>eureka上看启动的服务：<br><img src="/images/spring-cloud/config/5.png" alt="image"><br>请求configclient上的查看from属性值：<br><img src="/images/spring-cloud/config/6.png" alt="image"><br>修改git仓库对应的microservice-provider-userservice-dev.yml文件的from的值，并提交，push到git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from: git-dev-16.0</div></pre></td></tr></table></figure>
<p>再从本地ssh中用curl向configServic发送一个/bus/refresh刷新请求，会看到configservice和configclient端应用程序会打出刷新后重新加载配置文件的日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST cadmin:cadmin123@configService:9518/bus/refresh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2017-04-14 17:04:19.078  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - deregister  status: 200</div><div class="line">2017-04-14 17:04:19.092  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient</div><div class="line">2017-04-14 17:04:19.093  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">.......</div><div class="line">2017-04-14 17:04:19.224  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1492160659224 with initial instances count: 2</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.230  WARN 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1492160659230, current=UP, previous=DOWN]</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514: registering service...</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] o.s.cloud.bus.event.RefreshListener      : Received remote refresh request. Keys refreshed [config.client.version, from]</div><div class="line">2017-04-14 17:04:19.237  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - registration status: 204</div><div class="line">2017-04-14 17:04:19.248  INFO 4600 --- [afka-listener-1] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values:</div></pre></td></tr></table></figure>
<p>再次请求configclient的/from<br><img src="/images/spring-cloud/config/7.png" alt="image"></p>
<p>至此spring cloud 的基本使用总结到这里，后续会出一个在docker swarm中把这些微服务，通过docker-compose进行统一编排部署。</p>
<p>本系列的完整示例：<br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面的章节介绍，我们使用Eureka实现了服务中心；通过Feign实现服务间的消费，为了使服务更为健壮，使用Hystrix的熔断来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制，为了整合异构平台提供
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud构建异构平台的微服务之-sidecar(五)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html</id>
    <published>2017-04-13T05:52:51.000Z</published>
    <updated>2017-04-13T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面的几个章节介绍，我们使用Spring Cloud的Eureka实现了服务注册中心；而服务间通过Feign实现服务的消费，为了使得服务更为健壮，使用Hystrix的熔断机制来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，为了使外部系统能够调用微服务注册中心注册的各种微服务，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制。<br>本节我们主要讨论一下异构平台（比如，nodejs、python、php等提供的Rest接口服务）的服务，怎么通过spring cloud组件对这些服务注册到eureka中心以及与在微服务中怎么和异构平台的服务进行通信。这里主要是通过spring cloud的sidecar来构建异构平台的服务注册与通信。<br>sidecar灵感来自Netflix Prana。它可以获取注册中心的所有微服务实例的信息(例如host，端口等)的http api。也可以通过嵌入的Zuul代理来代理服务调用，该代理从Eureka获取其路由条目。 Spring Cloud配置服务器可以通过主机查找或通过Zuul代理直接访问。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="开启sidecar之旅"><a href="#开启sidecar之旅" class="headerlink" title="开启sidecar之旅"></a>开启sidecar之旅</h2><p>通过Node.js构建的评论服务通过Sidecar接入Spring Cloud微服务集群的整体架构，如下图：<br><img src="/images/spring-cloud/sidecar/11.png" alt="整体架构"> </p>
<h3 id="nodejs应用-简单的评论服务"><a href="#nodejs应用-简单的评论服务" class="headerlink" title="nodejs应用-简单的评论服务"></a>nodejs应用-简单的评论服务</h3><ul>
<li>首页需要构建一个异构平台的rest服务，我们这里采用nodejs创建，为了能够让微服务的注册中心知道这个异构平台的服务，需要在异构平台应用中实现一个健康检查接口，让Sidecar可以把这个服务实例的健康情况告诉Eureka注册中心。如：<br><img src="/images/spring-cloud/sidecar/1.png" alt="image"><br>创建一个nodejs的工程，在工程中实现一个健康接口并且返回如下形式的json文档： </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot;:&quot;UP&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编写一个首页和获取评论接口，该评论接口主要是供其它在微服务来调用，如：<br><img src="/images/spring-cloud/sidecar/2.png" alt="image"><br>评价返加接口的json数据如：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    status: &apos;100&apos;,</div><div class="line">    message: &apos;操作成功&apos;,</div><div class="line">    data: &#123;</div><div class="line">        commentId: &apos;123456&apos;,</div><div class="line">        userId: &apos;2&apos;,</div><div class="line">        productId: &apos;1&apos;,</div><div class="line">        commentContext: &apos;这个品质不错，快递速度很快！&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="把nodejs的评论服务接入微服务的sidecar应用"><a href="#把nodejs的评论服务接入微服务的sidecar应用" class="headerlink" title="把nodejs的评论服务接入微服务的sidecar应用"></a>把nodejs的评论服务接入微服务的sidecar应用</h3><ul>
<li>创建一个sidecar的子项目，在pom文件中添加sidecar的依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-netflix-sidecar&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在spring boot的启动类上，加上启动sidecar的注解@EnableSidecar</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableSidecar</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SidecarApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SidecarApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看看@EnableSidecar都做了些什么事，点击这个注解查看源码，我们发现hystrix熔断器、Eureka服务发现、zuul代理，这些组件都启动了，可以看到这个注解是一个组合注解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@EnableCircuitBreaker</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableZuulProxy</div><div class="line">@Target(&#123;ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Import(&#123;SidecarConfiguration.class&#125;)</div><div class="line">public @interface EnableSidecar &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置sidecar的application.yml属性文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-sidecar-comment</div><div class="line">server:</div><div class="line">  port: 9517</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">     hostname: sidecar</div><div class="line">     prefer-ip-address: true</div><div class="line">     ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">     instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">      serviceUrl:</div><div class="line">        defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">      healthcheck:</div><div class="line">        enabled: true</div><div class="line">        </div><div class="line">sidecar:</div><div class="line">  port: 3000    # Node.js微服务的端口</div><div class="line">  health-uri: http://sidecar:3000/health   # Node.js微服务的健康检查URL</div><div class="line"></div><div class="line">hystrix:</div><div class="line">  command:</div><div class="line">    default:</div><div class="line">      execution:</div><div class="line">        timeout:</div><div class="line">          enabled: false</div></pre></td></tr></table></figure>
<p>这里主要说明以下两个属性：<br>sidecar.port属性代表Node.js应用监听的端口。<br>sidecar.health-uri是一个用来模拟Spring Boot应用健康检查的接口的，接口返加的json必须是”status”:”UP”。</p>
<h3 id="消费端微服务定义"><a href="#消费端微服务定义" class="headerlink" title="消费端微服务定义"></a>消费端微服务定义</h3><p>在之前的商品微服务中，定义一个feign接口，写上对应的sidecar 的服务ID，如：</p>
<p><img src="/images/spring-cloud/sidecar/3.png" alt="image"></p>
<p>FeignClient可以根据serviceId去Eureka注册中心上找对应的服务信息，如果服务的实例不止一个，就会使用Ribbon进行客户端负载均衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@FeignClient(name = &quot;microservice-sidecar-comment&quot;)</div><div class="line">public interface CommentServiceFeign &#123;</div><div class="line">    @RequestMapping(value = &quot;/comment&quot;, method = RequestMethod.GET)</div><div class="line">    ResultInfo getComment() throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="compose部署并测试"><a href="#compose部署并测试" class="headerlink" title="compose部署并测试"></a>compose部署并测试</h2><p>通过docker-compose在swarm部署并启动所有服务进行测试，docker-compose文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.0.3</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>登录eureka，可看所有服务<br><img src="/images/spring-cloud/sidecar/4.png" alt="image"></p>
<p>通过sidecar访问一下nodejs的提供的健康检查接口：<br><img src="/images/spring-cloud/sidecar/5.png" alt="image"><br>这说明zuul功能已经开启了<br>通过<a href="http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：" target="_blank" rel="external">http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：</a><br><img src="/images/spring-cloud/sidecar/51.png" alt="image"><br>通过商品微服务访问nodejs异构平台构建的评论微服务信息，<br><img src="/images/spring-cloud/sidecar/6.png" alt="image"></p>
<p><strong>附代码仓库地址：</strong><br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面的几个章节介绍，我们使用Spring Cloud的Eureka实现了服务注册中心；而服务间通过Feign实现服务的消费，为了使得服务更为健壮，使用Hystrix的熔断机制来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，为了使外部系统能够调用微服务注册中心注册
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud和docker之微服务-apigateway(四)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html</id>
    <published>2017-03-19T14:43:44.000Z</published>
    <updated>2017-03-19T14:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面几节，我们已经通过spring cloud的组件构建了一个简单的微服务架构。<br>我们使用Spring Cloud中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Feign实现服务的消费，为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p>
<p>本文继续spring cloud和docker之微服务的api网关的相关介绍与案例，先来看看如下图：<br><img src="/images/spring-cloud/apigateway/1-1.png" alt="服务网关"></p>
<p>本图说明：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过负载均衡公开至服务调用方，在open Service中我们需要将权限控制从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器，它就是本文将要介绍的：服务网关。<br>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。 </p>
<p>为什么微服务中实现服务网关很重要：  </p>
<ul>
<li>服务网关实现了路由功能来屏蔽诸多服务细节，更实现了服务级别、均衡负载的路由。</li>
<li>实现了接口权限校验与微服务业务逻辑的解耦。通过服务网关中的过滤器，在各生命周期中去校验请求的内容，将原本在对外服务层做的校验前移，保证了微服务的无状态性，同时降低了微服务的测试难度，让服务本身更集中关注业务逻辑的处理。</li>
<li>实现了断路器，不会因为具体微服务的故障而导致服务网关的阻塞，依然可以对外服务。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在使用Zuul之前，我们先构建一个服务注册中心、以及两个简单的服务，比如：我构建了一个microservice-provider-userservice，一个microservice-consumer-productservice。然后启动eureka-server和这两个服务。通过访问eureka-server，我们可以看到microservice-provider-userservice和microservice-consumer-productservice已经注册到了服务中心。</p>
<p>如果不熟悉请在参考中找到对应的文章进行操作。也可以通过文章最后附的源码，自己构建。</p>
<h2 id="开始使用Zuul"><a href="#开始使用Zuul" class="headerlink" title="开始使用Zuul"></a>开始使用Zuul</h2><ul>
<li>引入依赖spring-cloud-starter-zuul、spring-cloud-starter-eureka，如果不是通过指定serviceId的方式，eureka依赖不需要，但是为了对服务集群细节的透明性，还是用serviceId来避免直接引用url的方式吧</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>应用主类使用@EnableZuulProxy注解开启Zuul</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</div><div class="line"></div><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ApiGatewayApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>application.yml中配置Zuul应用的基础信息，如：应用名、服务端口等。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-api-gateway</div><div class="line">server:</div><div class="line">  port: 9516</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">     hostname: apiGateway</div><div class="line">     prefer-ip-address: true</div><div class="line">     ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">     instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">      serviceUrl:</div><div class="line">        defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">      healthcheck:</div><div class="line">        enabled: true</div><div class="line"># 设置默认超时时间60s（default为全局；若想设置某项服务的超时时间，只需要将default替换为对应的服务名）</div><div class="line">hystrix:</div><div class="line">  command:</div><div class="line">    default:</div><div class="line">      execution:</div><div class="line">        isolation:</div><div class="line">          thread:</div><div class="line">            timeoutInMilliseconds: 60000</div><div class="line">zuul:</div><div class="line">   routes:</div><div class="line">     api-productservice:</div><div class="line">       path: /api/product/**</div><div class="line">       serviceId: microservice-consumer-productservice</div><div class="line">       stripPrefix: true</div><div class="line"># stripPrefix：是否去除前缀，默认为true</div><div class="line"># stripPrefix=true, http://apiGateway:9516/api/swagger/api/hello ==&gt; http://apiGateway:9516/api/hello</div><div class="line"># stripPrefix=false, http://apiGateway:9516/api/swagger/api/hello ==&gt; http://apiGateway:9516/api/swagger/api/hello</div><div class="line">     api-usertservice:</div><div class="line">       path: /api/users/**</div><div class="line">       serviceId: microservice-provider-userservice</div></pre></td></tr></table></figure>
<p>zuul配置：<br>我们在实现微服务架构时，服务名与服务实例地址的关系在eureka server中已经存在了，所以只需要将Zuul注册到eureka server上去发现其他服务，我们就可以实现对serviceId的映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zuul:</div><div class="line">   routes:</div><div class="line">     api-productservice:</div><div class="line">       path: /api/product/**</div><div class="line">       serviceId: microservice-consumer-productservice</div><div class="line">     api-usertservice:</div><div class="line">       path: /api/users/**</div><div class="line">       serviceId: microservice-provider-userservice</div></pre></td></tr></table></figure>
<p>针对我们在准备工作中实现的两个微服务microservice-provider-userservice和microservice-consumer-productservice，定义了两个路由api-a和api-b来分别映射。另外为了让Zuul能发现microservice-provider-userservice和microservice-consumer-productservice，也加入了eureka的配置  </p>
<h2 id="服务过滤"><a href="#服务过滤" class="headerlink" title="服务过滤"></a>服务过滤</h2><p>在完成了服务路由之后，我们对外开放服务还需要一些安全措施来保护客户端只能访问它应该访问到的资源。所以我们需要利用Zuul的过滤器来实现我们对外服务的安全控制。<br>在服务网关中定义过滤器只需要继承ZuulFilter，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</div><div class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.vbean.ResultInfo;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> * 自定义过滤器的实现，需要继承ZuulFilter，需要重写实现下面四个方法：</div><div class="line"> * filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</div><div class="line"> * pre：可以在请求被路由之前调用</div><div class="line"> * routing：在路由请求时候被调用</div><div class="line"> * post：在routing和error过滤器之后被调用</div><div class="line"> * error：处理请求时发生错误时被调用</div><div class="line"> * filterOrder：通过int值来定义过滤器的执行顺序</div><div class="line"> * shouldFilter：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。</div><div class="line"> * 在上例中，我们直接返回true，所以该过滤器总是生效。</div><div class="line"> * run：过滤器的具体逻辑。需要注意，这里我们通过ctx.setSendZuulResponse(false)令zuul过滤该请求，</div><div class="line"> * 不对其进行路由，然后通过ctx.setResponseStatusCode(401)设置了其返回的错误码，</div><div class="line"> * 当然我们也可以进一步优化我们的返回，比如，通过ctx.setResponseBody(body)对返回body内容进行编辑，</div><div class="line"> * 如果有中文乱码。则可以：ctx.getResponse().setContentType("text/html;charset=UTF-8")</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AccessControlFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line">        log.info(String.format(<span class="string">"%s request to %s"</span>, request.getMethod(), request.getRequestURL().toString()));</div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            log.warn(<span class="string">"access token is empty,please enter accessToken!"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            <span class="comment">//未认证</span></div><div class="line">            ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.NOT_AUTHENTICATE.getState(),ReturnInfoEnum.NOT_AUTHENTICATE.getStateInfo());</div><div class="line">            ctx.getResponse().setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">            ctx.getResponse().setContentType(String.valueOf(MediaType.APPLICATION_JSON));</div><div class="line">            ctx.setResponseBody(resultInfo.toString());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        log.info(<span class="string">"access token ok"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据对filterType生命周期介绍，可以参考下图去理解，并根据自己的需要在不同的生命周期中去实现不同类型的过滤器。<br><img src="/images/spring-cloud/apigateway/1-2.png" alt="filterType生命周期"></p>
<h2 id="定义服务fallback"><a href="#定义服务fallback" class="headerlink" title="定义服务fallback"></a>定义服务fallback</h2><p>完成了服务网站的filter,我们可以针对具体的内部服务，在zuul中定义服务的回退方法<br>如：<br>UserFallbackProvider：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.fallback;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.vbean.ResultInfo;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 路由网关的用户短路器返回调用</div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFallbackProvider</span> <span class="keyword">implements</span> <span class="title">ZuulFallbackProvider</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"microservice-provider-userservice"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> HttpStatus.OK;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">200</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.ERROR_SERVICE.getState(),</div><div class="line">                        ReturnInfoEnum.ERROR_SERVICE.getStateInfo() + <span class="string">";服务名为："</span> + UserFallbackProvider.<span class="keyword">this</span>.getRoute());</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(resultInfo.toString().getBytes());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">                <span class="keyword">return</span> headers;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ProductFallbackProvider：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.fallback;</div><div class="line"></div><div class="line">import com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line">import com.troylc.cloud.vbean.ResultInfo;</div><div class="line">import org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;</div><div class="line">import org.springframework.http.HttpHeaders;</div><div class="line">import org.springframework.http.HttpStatus;</div><div class="line">import org.springframework.http.MediaType;</div><div class="line">import org.springframework.http.client.ClientHttpResponse;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 路由网关的商品短路器返回调用</div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class ProductFallbackProvider implements ZuulFallbackProvider &#123;</div><div class="line">    @Override</div><div class="line">    public String getRoute() &#123;</div><div class="line">        return &quot;microservice-consumer-productservice&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ClientHttpResponse fallbackResponse() &#123;</div><div class="line">        return new ClientHttpResponse() &#123;</div><div class="line">            @Override</div><div class="line">            public HttpStatus getStatusCode() throws IOException &#123;</div><div class="line">                return HttpStatus.OK;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int getRawStatusCode() throws IOException &#123;</div><div class="line">                return 200;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public String getStatusText() throws IOException &#123;</div><div class="line">                return &quot;OK&quot;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void close() &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public InputStream getBody() throws IOException &#123;</div><div class="line">                ResultInfo resultInfo = new ResultInfo&lt;&gt;(ReturnInfoEnum.ERROR_SERVICE.getState(),</div><div class="line">                        ReturnInfoEnum.ERROR_SERVICE.getStateInfo()+&quot;;服务名为：&quot;+ProductFallbackProvider.this.getRoute());</div><div class="line">                return new ByteArrayInputStream(resultInfo.toString().getBytes());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public HttpHeaders getHeaders() &#123;</div><div class="line">                HttpHeaders headers = new HttpHeaders();</div><div class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">                return headers;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="docker-compose运行服务"><a href="#docker-compose运行服务" class="headerlink" title="docker-compose运行服务"></a>docker-compose运行服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">  productService:</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">  apiGateway:</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>接下来，我们将microservice-eureka-services、microservice-provider-userservice、microservice-consumer-productservice以及这里用Zuul实现的服务网关启动起来，在eureka-server的控制页面中，我们可以看到分别注册了icroservice-provider-userservice、microservice-consumer-productservice以及microservice-api-gateway<br>在swarm集群的manager节点中执行以下操作：<br><img src="/images/spring-cloud/apigateway/1.png" alt="image"><br>查看eureka注册中心<br><img src="/images/spring-cloud/apigateway/2.png" alt="image"></p>
<p>通过zuul去访问商品服务中的获取用户节点，此时不带accessToken参数，测试访问接受需要授权<br><img src="/images/spring-cloud/apigateway/3.png" alt="image"><br>加上accessToken参数访问：<br><img src="/images/spring-cloud/apigateway/4.png" alt="image"><br>下面测试停止商品服务后，zuul的fallback方法回调，首先操作swarm集群中，把商品服务停止<br><img src="/images/spring-cloud/apigateway/5.png" alt="image"><br>查看eureka注册中心，确认product服务是否已经停止<br><img src="/images/spring-cloud/apigateway/6.png" alt="image"><br>再次访问商品服务，提示fallback方法返回的内容：<br><img src="/images/spring-cloud/apigateway/7.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面几节，我们已经通过spring cloud的组件构建了一个简单的微服务架构。&lt;br&gt;我们使用Spring Cloud中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Feign实现服务的消费，为了使得服务集群更为健壮，使用Hystrix的融断机制来避
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud和docker之微服务-consumer(三)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html</id>
    <published>2017-03-10T16:39:41.000Z</published>
    <updated>2017-03-10T16:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本节主要说明一下通过springcloud的一种声明式、模板化的http客户端feign来实现获取注册到eureka注册中心的用户服务的信息。并集成了hystrix(熔断器)，控制服务和服务之间的节点调用，提高服务的延迟和故障的容错能力，通过hystrix dashboard(熔断器 仪表盘)来直观的展示。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/09/spirng-cloud-userservice.html">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a>、<a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
</tbody>
</table>
<h2 id="效果访问说明："><a href="#效果访问说明：" class="headerlink" title="效果访问说明："></a>效果访问说明：</h2><table>
<thead>
<tr>
<th>访问URL</th>
<th>访问方式</th>
<th>说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://productservice:9515/getUsers/1" target="_blank" rel="external">http://productservice:9515/getUsers/1</a></td>
<td>FeginClient方式调用接口</td>
<td>根据用户ID获取用户信息</td>
</tr>
<tr>
<td><a href="http://productservice:9515/users-rest/1" target="_blank" rel="external">http://productservice:9515/users-rest/1</a></td>
<td>RestTemplate方式调用接口</td>
<td>根据ID获取用户信息  </td>
</tr>
</tbody>
</table>
<h2 id="Hystrix-Dashboard监控说明"><a href="#Hystrix-Dashboard监控说明" class="headerlink" title="Hystrix Dashboard监控说明"></a>Hystrix Dashboard监控说明</h2><table>
<thead>
<tr>
<th>访问URL</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://productservice:9515/hystrix" target="_blank" rel="external">http://productservice:9515/hystrix</a></td>
<td>hystrix仪表盘访问地址</td>
</tr>
<tr>
<td><a href="http://productservice:9515/hystrix.stream" target="_blank" rel="external">http://productservice:9515/hystrix.stream</a></td>
<td>实时监控接口调用的访问地址，配合仪表盘使用，更能直观展示服务的访问情况。  </td>
</tr>
</tbody>
</table>
<h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h2><ul>
<li>首先创建子工程、引用依赖包<br>创建一个consumer maven子工程microservice-consumer-productservice,并在pom.xml中引用所需依赖，如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!--添加spring cloud服务注册的依赖--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--添加spring cloud的feign依赖--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--添加spring cloud的hystrix断路器：主要是服务间调用提供更加强大的容错能力 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- 用于暴露自身信息的模块，它的主要作用是用于监控与管理 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- Spring Boot中使用Swagger2构建RESTful APIs  --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- hystrix-dashboard监控 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>定义FeignClient、Hystrix<br>在spring boot启动类上增加@EnableFeignClients、@EnableCircuitBreaker、@EnableHystrixDashboard</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//使用@EnableCircuitBreaker注解开启断路器功能</span></div><div class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//启用HystrixDashboard功能</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实例化RestTemplate，通过<span class="doctag">@LoadBalanced</span>注解开启均衡负载能力.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> restTemplate</div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ProductServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义需要通过FeignClient访问的接口列表，如下</p>
<p>UserServiceFeign<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// name为服务名，对应spring.application.name。注意：此服务名必须已注册进Eureka服务中心</div><div class="line">@FeignClient(name = &quot;microservice-provider-userservice&quot;,fallback = UserServiceFeignFallback.class, configuration = FeignConfig.class)</div><div class="line">public interface UserServiceFeign extends IUserService&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>IUserService</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 用户业务接口</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line">public interface IUserService &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据ID查的对应的用户</div><div class="line">     *</div><div class="line">     * @param id</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.GET)</div><div class="line">    ResultInfo&lt;UserBean&gt; getUserById(@PathVariable(value = &quot;id&quot;) Long id) throws Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义各接口对应的fallback方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义各接口对应的fallback方法</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFeignFallback</span> <span class="keyword">implements</span> <span class="title">UserServiceFeign</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.NULL.getState(), ReturnInfoEnum.NULL.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义以RestTemplae方式调用接口<br>UserServiceFeignRest</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义通过rest方式访问接口</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFeignRest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo&lt;UserBean&gt; <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        ResultInfo&lt;UserBean&gt; resultInfo  = restTemplate.exchange(<span class="string">"http://microservice-provider-userservice/users/&#123;id&#125;"</span>, HttpMethod.GET, <span class="keyword">null</span>, <span class="keyword">new</span> ParameterizedTypeReference&lt;ResultInfo&lt;UserBean&gt;&gt;() &#123;</div><div class="line">        &#125;, id).getBody();</div><div class="line">        <span class="keyword">return</span> resultInfo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义controller<br>controoler中增加API文档注解、设置启用Hystrix超时及时间</li>
</ul>
<p>ProductControoler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试商品controol</div><div class="line"> * Created by troylc on 2017/3/5.</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductControoler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ProductControoler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IProductService productService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserServiceFeign userServiceFeign;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserServiceFeignRest userServiceFeignRest;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注：<span class="doctag">@GetMapping</span>("/&#123;id&#125;")是spring 4.3的新注解等价于：</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span> user信息</div><div class="line">     * <span class="doctag">@RequestMapping</span>(value = "/id", method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有<span class="doctag">@PostMapping</span>等等</div><div class="line">     */</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找用户,通过spring cloud feign方式"</span>, notes = <span class="string">"根据用户的ID，查找对应的用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"1000"</span>),</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.timeout.enabled"</span>, value = <span class="string">"false"</span>)&#125;)</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUsers/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        UserBean userBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ResultInfo&lt;UserBean&gt; resultInfo = userServiceFeign.getUserById(id);</div><div class="line">            userBean = resultInfo.getData();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注：<span class="doctag">@GetMapping</span>("/&#123;id&#125;")是spring 4.3的新注解等价于：</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span> user信息</div><div class="line">     * <span class="doctag">@RequestMapping</span>(value = "/id", method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有<span class="doctag">@PostMapping</span>等等</div><div class="line">     */</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找库存端口"</span>, notes = <span class="string">"根据端口的ID，查找对应的商品信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"商品ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getCommodityBean/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getCommodityBeanById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        ProductBean productBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            productBean = productService.getCommodityById(id);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;ProductBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), productBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找用户,通过spring RestTemplate方式"</span>, notes = <span class="string">"根据用户的ID，查找对应的用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"1000"</span>),</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.timeout.enabled"</span>, value = <span class="string">"false"</span>)&#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users-rest/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserByRest</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        UserBean userBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ResultInfo&lt;UserBean&gt; resultInfo = userServiceFeignRest.getUser(id);</div><div class="line">            userBean =   resultInfo.getData();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="部署至swarm集群中-运行测试"><a href="#部署至swarm集群中-运行测试" class="headerlink" title="部署至swarm集群中-运行测试"></a>部署至swarm集群中-运行测试</h2><p>docker-compose文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      deploy:</div><div class="line">        replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">        update_config:</div><div class="line">          parallelism: 1    #每次更新复本数量</div><div class="line">          delay: 2s       #每次更新间隔</div><div class="line">        restart_policy:</div><div class="line">          condition: on-failure     #定义服务的重启条件</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">        image: tcr:5000/myhub/microservice-provider-userservice:0.0.2</div><div class="line">        deploy:</div><div class="line">          replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">          update_config:</div><div class="line">            parallelism: 1    #每次更新复本数量</div><div class="line">            delay: 2s       #每次更新间隔</div><div class="line">          restart_policy:</div><div class="line">            condition: on-failure     #定义服务的重启条件</div><div class="line">        networks:</div><div class="line">          - eureka-net</div><div class="line">        ports:</div><div class="line">          - &quot;9514:9514&quot;</div><div class="line">  productService:</div><div class="line">          image: tcr:5000/myhub/microservice-consumer-productservice:0.0.2</div><div class="line">          deploy:</div><div class="line">            replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">            update_config:</div><div class="line">              parallelism: 1    #每次更新复本数量</div><div class="line">              delay: 2s       #每次更新间隔</div><div class="line">            restart_policy:</div><div class="line">              condition: on-failure     #定义服务的重启条件</div><div class="line">          networks:</div><div class="line">            - eureka-net</div><div class="line">          ports:</div><div class="line">            - &quot;9515:9515&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>执行：<br><img src="/images/spring-cloud/productservice/1.png" alt="image"></p>
<p>在AIP接口文档界面点击获取用户接口以feign的方式，输入用户ID，<br>在AIP接口文档界面点击获取用户接口以rest的方式，输入用户ID<br><img src="/images/spring-cloud/productservice/2.png" alt="image"><br><img src="/images/spring-cloud/productservice/3.png" alt="image"><br><img src="/images/spring-cloud/productservice/4.png" alt="image"></p>
<p>打开仪表盘(<a href="http://productservice:9515/hystrix)，输入http://productservice:9515/hystrix.stream,再多点击几次就出现了监控的数据。" target="_blank" rel="external">http://productservice:9515/hystrix)，输入http://productservice:9515/hystrix.stream,再多点击几次就出现了监控的数据。</a><br><img src="/images/spring-cloud/productservice/5.png" alt="image"><br><img src="/images/spring-cloud/productservice/6.png" alt="image"></p>
<p><strong>附代码仓库地址：</strong><br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节主要说明一下通过springcloud的一种声明式、模板化的http客户端feign来实现获取注册到eureka注册中心的用户服务的信息。并集成了hystrix(熔断器)，控制服务和服务之间的节点调用，提高服务的延迟和故障的容错能力，通过hystrix dashboar
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud和docker之微服务-provider(二)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/03/09/spirng-cloud-userservice.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/03/09/spirng-cloud-userservice.html</id>
    <published>2017-03-09T08:52:05.000Z</published>
    <updated>2017-03-09T08:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一节我们已经通过docker-compose在swarm中部署了有三个实例的高可用eureka服务注册中心,本节我们讨论一下怎么把一个已知的服务注册到eureka上，并且可以在线查找服务的API接口文档说明.<br>本节加入了spring boot中的监控管理的actuator，API接口文档模块swagger2,sping cloud的DiscoveryClient用户将服务注册到eureka注册中心 </p>
<h1 id="服务提供者和服务消费者"><a href="#服务提供者和服务消费者" class="headerlink" title="服务提供者和服务消费者"></a>服务提供者和服务消费者</h1><p>“服务提供者”和“服务消费者”的名词是借用的，在Spring Cloud中看到这样的概念。下面这张表格，简单描述了服务提供者/消费者是什么：<br>名词  | 概念<br>—|—<br>服务提供者 | 服务的被调用方（即：为其他服务提供服务的服务）<br>服务消费者 | 服务的调用方（即：依赖其他服务的服务）  </p>
<h2 id="服务提供者-microservice-provider-userService"><a href="#服务提供者-microservice-provider-userService" class="headerlink" title="服务提供者(microservice-provider-userService)"></a>服务提供者(microservice-provider-userService)</h2><p>这是一个稍微有点杂的程序。我们使用spring-data-jpa操作h2数据库,用swagger2暴露API接口文档，同时将该服务注册到注册中心Eureka中。<br>代码结构：<br><img src="/images/spring-cloud/userservice/1.png" alt="代码结构"></p>
<ol>
<li>在spring-cloud-docker-microservic父项目创建一个Maven子工程，并在pom.xml中添加如下内容：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-provider-userservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--程序入口--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">start-class</span>&gt;</span>com.troylc.cloud.UserServiceApplication<span class="tag">&lt;/<span class="name">start-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--添加spring cloud服务注册的依赖--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 数据库JPA操作--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 用于暴露自身信息的模块，它的主要作用是用于监控与管理 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Boot中使用Swagger2构建RESTful APIs  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://10.211.55.4:8372<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span><span class="comment">&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像名称--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像的基础版本--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:openjdk-8-jdk-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像启动参数--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>配置文件：application.yml  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 9514</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-provider-userservice</div><div class="line">  jpa:</div><div class="line">    generate-ddl: false</div><div class="line">    show-sql: true</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">  datasource:                           # 指定数据源</div><div class="line">    platform: h2                        # 指定数据源类型</div><div class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</div><div class="line">    data: classpath:data.sql            # 指定h2数据库的insert脚本</div><div class="line"></div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    root: INFO</div><div class="line">    org.hibernate: INFO</div><div class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</div><div class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</div><div class="line">    com.troylc.cloud: ERROR</div><div class="line"></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: userService</div><div class="line">    prefer-ip-address: true</div><div class="line">    ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">    instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">    status-page-url-path: /usersApi       #修改info的地址为API接口页面</div><div class="line">#    home-page-url-path: /instance-info</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">    healthcheck:</div><div class="line">      enabled: true</div></pre></td></tr></table></figure>
<ol>
<li>用户建表语句：schema.sql</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">if</span> <span class="keyword">exists</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">generated</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>, username <span class="built_in">varchar</span>(<span class="number">255</span>), age <span class="built_in">int</span>, address <span class="built_in">VARCHAR</span>(<span class="number">500</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<ol>
<li>用户测试数据插库语句：data.sql  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into user (id, username, age, address) values (1,&apos;张三&apos;,12,&apos;hunan&apos;);</div><div class="line">insert into user (id, username, age, address) values (2,&apos;李四&apos;,32 ,&apos;beijing&apos;);</div><div class="line">insert into user (id, username, age, address) values (3,&apos;王五&apos;,23,&apos;xiamen&apos;);</div><div class="line">insert into user (id, username, age, address) values (4,&apos;马六&apos;,27,&apos;guangdong&apos;);</div></pre></td></tr></table></figure>
<ol>
<li>编写实体类</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.bean;</div><div class="line"></div><div class="line">import javax.persistence.*;</div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> */</div><div class="line">@Entity</div><div class="line">@Table(name=&quot;user&quot;)</div><div class="line">public class UserBean implements Serializable&#123;</div><div class="line">    /**</div><div class="line">     * 用户主键ID，自动增长</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.AUTO)</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用户姓名</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private String username;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用户名称</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private Integer age;</div><div class="line">    /**</div><div class="line">     * 用户地址</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private String address;</div><div class="line"></div><div class="line">    public Long getId() &#123;</div><div class="line">        return this.id;</div><div class="line">    &#125;</div><div class="line">    public void setId(Long id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line">    public String getUsername() &#123;</div><div class="line">        return this.username;</div><div class="line">    &#125;</div><div class="line">    public void setUsername(String username) &#123;</div><div class="line">        this.username = username;</div><div class="line">    &#125;</div><div class="line">    public Integer getAge() &#123;</div><div class="line">        return this.age;</div><div class="line">    &#125;</div><div class="line">    public void setAge(Integer age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    public String getAddress() &#123;</div><div class="line">        return address;</div><div class="line">    &#125;</div><div class="line">    public void setAddress(String address) &#123;</div><div class="line">        this.address = address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写JPA-DAO：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.troylc.cloud.bean.UserBean;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> * 用户持久层JPA接口</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDaoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>,<span class="title">Long</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>SERVICE接口与实现<br>IUserService:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.service;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.bean.UserBean;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> * 用户业务逻辑处理层</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加用户</div><div class="line">     * <span class="doctag">@param</span> userBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> UserBean <span class="title">saveUser</span><span class="params">(UserBean userBean)</span> <span class="keyword">throws</span> Exception </span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据ID删除用户</div><div class="line">     * <span class="doctag">@param</span> Id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(Long Id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有用户的信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">getAllUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据ID查的对应的用户</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> UserBean <span class="title">getUserById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新用户信息</div><div class="line">     * <span class="doctag">@param</span> userBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(UserBean userBean)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UserServiceImpl:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.service.impl;</div><div class="line">import com.troylc.cloud.bean.UserBean;</div><div class="line">import com.troylc.cloud.dao.UserDaoRepository;</div><div class="line">import com.troylc.cloud.service.IUserService;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line">import javax.annotation.Resource;</div><div class="line">import java.util.List;</div><div class="line">/**</div><div class="line"> * 用户业务处理接口实现类</div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> */</div><div class="line">@Service</div><div class="line">public class UserServiceImpl implements IUserService&#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserServiceImpl.class);</div><div class="line">    @Resource</div><div class="line">    private UserDaoRepository userDaoRepository;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public UserBean saveUser(UserBean userBean) throws Exception &#123;</div><div class="line">        return userDaoRepository.save(userBean);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public boolean deleteUser(Long Id) throws Exception &#123;</div><div class="line">        try&#123;</div><div class="line">            userDaoRepository.delete(Id);</div><div class="line">            return true;</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">             log.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public List&lt;UserBean&gt; getAllUser() throws Exception &#123;</div><div class="line">        return userDaoRepository.findAll();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public UserBean getUserById(Long id) throws Exception &#123;</div><div class="line">        return userDaoRepository.findOne(id);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public boolean updateUser(UserBean userBean) throws Exception &#123;</div><div class="line">        return userDaoRepository.saveAndFlush(userBean)!=null?true:false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Controller：<br>UserController：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.controller;</div><div class="line"></div><div class="line">import com.troylc.cloud.bean.UserBean;</div><div class="line">import com.troylc.cloud.service.IUserService;</div><div class="line">import com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line">import com.troylc.cloud.vbean.ResultInfo;</div><div class="line">import io.swagger.annotations.ApiImplicitParam;</div><div class="line">import io.swagger.annotations.ApiImplicitParams;</div><div class="line">import io.swagger.annotations.ApiOperation;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.cloud.client.ServiceInstance;</div><div class="line">import org.springframework.cloud.client.discovery.DiscoveryClient;</div><div class="line">import org.springframework.web.bind.annotation.*;</div><div class="line">import springfox.documentation.annotations.ApiIgnore;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Rest服务提供者，供其它服务调用</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public class UserController &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private DiscoveryClient discoveryClient;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private IUserService userServiceImpl;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取所有用户</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;获取所有用户&quot;)</div><div class="line">    @GetMapping(&quot;/users&quot;)</div><div class="line">    public ResultInfo getUserList() &#123;</div><div class="line">        List&lt;UserBean&gt; userBeans = new ArrayList&lt;&gt;();</div><div class="line">        try &#123;</div><div class="line">            userBeans = userServiceImpl.getAllUser();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;List&lt;UserBean&gt;&gt;(ReturnInfoEnum.SUCCESS.getState(),ReturnInfoEnum.SUCCESS.getStateInfo(),userBeans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据User对象创建用户</div><div class="line">     * @param user</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;创建用户&quot;, notes = &quot;根据User对象创建用户&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细实体user&quot;, required = true, dataType = &quot;UserBean&quot;)</div><div class="line">    @PostMapping(&quot;/users&quot;)</div><div class="line">    public ResultInfo postUser(@RequestBody UserBean user) &#123;</div><div class="line">        try &#123;</div><div class="line">            userServiceImpl.saveUser(user);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 注：@GetMapping(&quot;/&#123;id&#125;&quot;)是spring 4.3的新注解等价于：</div><div class="line">     * @param id</div><div class="line">     * @return user信息</div><div class="line">     * @RequestMapping(value = &quot;/id&quot;, method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有@PostMapping等等</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;查找用户&quot;, notes = &quot;根据用户的ID，查找对应的用户&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;)</div><div class="line">    @GetMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo findById(@PathVariable Long id) &#123;</div><div class="line">        UserBean userBean = null;</div><div class="line">        try &#123;</div><div class="line">            userBean = userServiceImpl.getUserById(id);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        ResultInfo resultInfo = new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">        return resultInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息</div><div class="line">     * @param id</div><div class="line">     * @param user</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;更新用户详细信息&quot;, notes = &quot;根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息&quot;)</div><div class="line">    @ApiImplicitParams(&#123;</div><div class="line">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;),</div><div class="line">            @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细实体user&quot;, required = true, dataType = &quot;User&quot;)</div><div class="line">    &#125;)</div><div class="line">    @PutMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo updateUser(@PathVariable Long id, @RequestBody UserBean user) &#123;</div><div class="line">        try &#123;</div><div class="line">            user.setId(id);</div><div class="line">            userServiceImpl.updateUser(user);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除用户</div><div class="line">     * @param id</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;删除用户&quot;, notes = &quot;根据url的id来指定删除对象&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;)</div><div class="line">    @DeleteMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo deleteUser(@PathVariable Long id) &#123;</div><div class="line">        try &#123;</div><div class="line">            userServiceImpl.deleteUser(id);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 本地服务实例的信息</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiIgnore //swagger忽略此API，在前台暴露</div><div class="line">    @GetMapping(&quot;/instance-info&quot;)</div><div class="line">    public ServiceInstance showInfo() &#123;</div><div class="line">        ServiceInstance localServiceInstance = this.discoveryClient.getLocalServiceInstance();</div><div class="line">        return localServiceInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ApiControoler：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> springfox.documentation.annotations.ApiIgnore;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户服务API转向</div><div class="line"> * Created by troylc on 2017/3/1.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiControoler</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在服务注册中心点击该服务重定向到api接口中心</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@ApiIgnore</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/usersApi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirectApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/swagger-ui.html"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Swagger2 API接口配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</div><div class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/12/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 访问地址 http://ip:prot/swagger-ui.html</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())       <span class="comment">//创建API基本信息</span></div><div class="line">                .groupName(<span class="string">"controller API"</span>)     <span class="comment">//指定分组，对应(/v2/api-docs?group=)</span></div><div class="line">                .pathMapping(<span class="string">""</span>)  <span class="comment">//base地址，最终会拼接Controller中的地址</span></div><div class="line">                .select()    <span class="comment">//控制要暴露的接口</span></div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.troylc.cloud.controller"</span>))  <span class="comment">//通过指定扫描包暴露接口</span></div><div class="line">                .paths(PathSelectors.any())       <span class="comment">//设置过滤规则暴露接口</span></div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"使用Swagger2构建用户RESTful APIs"</span>)</div><div class="line">                .description(<span class="string">"更多相关文章，请关注：http://www.troylc.cc/"</span>)</div><div class="line">                .termsOfServiceUrl(<span class="string">"http://www.troylc.cc"</span>)</div><div class="line">                .contact(<span class="string">"troylc"</span>)</div><div class="line">                .version(<span class="string">"1.0"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Spring Boot启动程序，通过@EnableDiscoveryClient注解，即可将服务注册到Eureka上面去</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(UserServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>11.定义JSON返回信息枚举类和返回类型封装类<br>ReturnInfoEnum：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.utils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义返回信息枚举</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ReturnInfoEnum &#123;</div><div class="line"></div><div class="line">    SUCCESS(<span class="number">1</span>, <span class="string">"请求操作成功"</span>),</div><div class="line">    NULL(<span class="number">0</span>, <span class="string">"没有你请求的数据"</span>),</div><div class="line">    PARAMETER_ERROR(-<span class="number">1</span>, <span class="string">"请求数据失败，参数错误"</span>),</div><div class="line">    SYSTEM_ERROR(-<span class="number">2</span>, <span class="string">"请求数据失败，系统异常"</span>),</div><div class="line">    NOT_AUTHENTICATE(-<span class="number">3</span>, <span class="string">"请示数据失败，未认证"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String stateInfo;</div><div class="line"></div><div class="line">    ReturnInfoEnum(<span class="keyword">int</span> state, String stateInfo) &#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stateInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReturnInfoEnum <span class="title">stateOf</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (ReturnInfoEnum state : values()) &#123;</div><div class="line">            <span class="keyword">if</span> (state.getState() == index) &#123;</div><div class="line">                <span class="keyword">return</span> state;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ResultInfo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.vbean;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 所有的Rest请求的返回类型封装JSON结果</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line">public class ResultInfo&lt;T&gt; implements Serializable &#123;</div><div class="line"></div><div class="line">    private int success;</div><div class="line"></div><div class="line">    private T data;</div><div class="line"></div><div class="line">    private String mesagess;</div><div class="line"></div><div class="line">    public ResultInfo(int success, String mesagess) &#123;</div><div class="line">        this.success = success;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ResultInfo(int success, String mesagess, T data) &#123;</div><div class="line">        this.success = success;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">        this.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int isSuccess() &#123;</div><div class="line">        return success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSuccess(int success) &#123;</div><div class="line">        this.success = success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getData() &#123;</div><div class="line">        return data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setData(T data) &#123;</div><div class="line">        this.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String getMesagess() &#123;</div><div class="line">        return mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMesagess(String mesagess) &#123;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;ResultInfo&#123;&quot; +</div><div class="line">                &quot;success=&quot; + success +</div><div class="line">                &quot;, data=&quot; + data +</div><div class="line">                &quot;, error=&apos;&quot; + mesagess + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改编排部署文件docker-compose文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      deploy:</div><div class="line">        replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">        update_config:</div><div class="line">          parallelism: 1    #每次更新复本数量</div><div class="line">          delay: 2s       #每次更新间隔</div><div class="line">        restart_policy:</div><div class="line">          condition: on-failure     #定义服务的重启条件</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">        image: tcr:5000/myhub/microservice-provider-userservice:0.0.2</div><div class="line">        deploy:</div><div class="line">          replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">          update_config:</div><div class="line">            parallelism: 1    #每次更新复本数量</div><div class="line">            delay: 2s       #每次更新间隔</div><div class="line">          restart_policy:</div><div class="line">            condition: on-failure     #定义服务的重启条件</div><div class="line">        networks:</div><div class="line">          - eureka-net</div><div class="line">        ports:</div><div class="line">          - &quot;9514:9514&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>至此代码部署完成，其中需要注意的地方是，在加入swagger2的依赖包时，版本需为2.5.0,如果是2.6.0,注册在eureka上的用户服务的端口不会根据application.yml中配置的一样。而是会出现tomcat的默认端口8080</p>
<h2 id="打包及部署操作"><a href="#打包及部署操作" class="headerlink" title="打包及部署操作"></a>打包及部署操作</h2><p><img src="/images/spring-cloud/userservice/2.png" alt="打包"><br>将docker-compose.yml拷贝到swarm集群的master节点上，执行如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml eureka</div><div class="line">Creating network eureka_eureka-net</div><div class="line">Creating service eureka_userService</div><div class="line">Creating service eureka_eurekaService1</div><div class="line">Creating service eureka_eurekaService2</div><div class="line">Creating service eureka_eurekaService3</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps eureka</div><div class="line">ID            NAME                     IMAGE                                                   NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">izc9zknt5vay  eureka_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-master01  Running        Running 17 seconds ago         </div><div class="line">losked39x42d  eureka_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-node02    Running        Running 15 seconds ago         </div><div class="line">jaygfei03isr  eureka_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-node02    Running        Running 18 seconds ago         </div><div class="line">mvv6lzvlq072  eureka_userService.1     tcr:5000/myhub/microservice-provider-userservice:0.0.2  docker-node01    Running        Running 19 seconds ago</div></pre></td></tr></table></figure></p>
<h2 id="测试用户服务注册情况"><a href="#测试用户服务注册情况" class="headerlink" title="测试用户服务注册情况"></a>测试用户服务注册情况</h2><p><img src="/images/spring-cloud/userservice/3.png" alt="eureka注册中心"><br><img src="/images/spring-cloud/userservice/4.png" alt="API接口"></p>
<p>服务提供者用户服务已经注册到eureka上，后续服务消费者对用户服务进行消费，敬请期待…….</p>
<p><strong>附代码仓库地址：</strong><br>码云：<a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github: <a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过上一节我们已经通过docker-compose在swarm中部署了有三个实例的高可用eureka服务注册中心,本节我们讨论一下怎么把一个已知的服务注册到eureka上，并且可以在线查找服务的API接口文档说明.&lt;br&gt;本节加入了spring boot中的监控管理的act
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud和docker之微服务-eureka(一)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html</id>
    <published>2017-03-01T14:35:35.000Z</published>
    <updated>2017-03-02T01:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发中关于服务的讨论呈现出火爆的局面，有人倾向于在系统设计与开发中采用微服务方式实现软件系统的松耦合、跨部门开发；一些公司已经在生产系统中采用了微服务架构，并且取得了良好的效果；下面我们通过spring cloud和docker来构建一个简单的例子，</p>
<h1 id="spring-cloud简介"><a href="#spring-cloud简介" class="headerlink" title="spring cloud简介"></a>spring cloud简介</h1><p>Spring Cloud是在Spring Boot的基础上构建的，为开发人员提供快速建立分布式系统的有关微服务搭建的一系列的工具，例如：</p>
<p>配置管理（configuration management），服务发现（service discovery），断路器（circuit breakers），智能路由（ intelligent routing），微代理（micro-proxy），控制总线（control bus），一次性令牌（ one-time tokens），全局锁（global locks），领导选举（leadership election），分布式会话（distributed sessions），集群状态（cluster state）<br><img src="/images/spring-cloud/eureka/spring-cloud.jpg" alt="spring cloud组件架构图"><br>具体参考：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">Spring Cloud 项目主页：http://projects.spring.io/spring-cloud/</a></p>
<h1 id="eureka服务发现"><a href="#eureka服务发现" class="headerlink" title="eureka服务发现"></a>eureka服务发现</h1><p>服务发现（Service Discovery）是关键原则之一。手动配置每个客户端或某种形式的约定是很难做的，并且很脆弱。Spring Cloud提供了多种服务发现的实现方式，例如：Eureka、Consul、Zookeeper。这里只讲述基于Eureka的服务发现。</p>
<h1 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h1><h2 id="开发工具及相关软件准备"><a href="#开发工具及相关软件准备" class="headerlink" title="开发工具及相关软件准备"></a>开发工具及相关软件准备</h2><table>
<thead>
<tr>
<th>环境</th>
<th>版本及说明</th>
<th>参考地址  </th>
</tr>
</thead>
<tbody>
<tr>
<td>docker</td>
<td>v1.13.1,Docker是一个能够把开发的应用程序自动部署到容器的开源引擎</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>doker-compose</td>
<td>v1.11,Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>docker swarm</td>
<td>v1.13.1,Docker Engine 1.12或更高版本中内置了集群管理和编排功能。Swarm模式侧重于微服务架构。</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>docker registry</td>
<td>registry:latest,用于存储docker镜像的私有仓库</td>
<td><a href="http://www.troylc.cc/docker/2017/02/01/Docker06registry-jenkins.html">registry集成打包上传镜像</a></td>
</tr>
<tr>
<td>spring boot</td>
<td>1.5.1.RELEASE,是开箱即用，提供一系列大型项目常用的非功能性特征的快速度开发工具</td>
<td><a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">spring boot官网</a></td>
</tr>
<tr>
<td>spring cloud</td>
<td>Camden SR5,Spring Cloud 为开发者提供了在分布式系统（如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性 Token、全局锁、决策竞选、分布式会话和集群状态）操作的开发工具集</td>
<td><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">spring cloud官网</a>  </td>
</tr>
<tr>
<td>开发工具</td>
<td>jdk1.8/IntelliJ idea/maven3.3.9</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h2><p>首先创建一个父项目（spring-cloud-docker-microservice），这样可以对项目中的Maven依赖进行统一的管理。  </p>
<p>项目结构如下：<br><img src="/images/spring-cloud/eureka/1.png" alt="项目结"></p>
<p>pom.xml如下  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加spring boot父项目的依赖，spring cloud是在spring boot基础之上进行开发的，所以需要依赖它--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>myhub<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span><span class="comment">&lt;!--配置镜像仓库的属性--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">docker.repostory</span>&gt;</span>tcr:5000<span class="tag">&lt;/<span class="name">docker.repostory</span>&gt;</span><span class="comment">&lt;!--配置镜像仓库的对应的地址与端口--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加spring cloud依赖--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 配置maven install 跳过test,相当于命令：$mvn install -Dmaven.test.skip = true--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--添加利用maven插件构建docker镜像的插件依赖--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建microservice-eureka-service子项目"><a href="#创建microservice-eureka-service子项目" class="headerlink" title="创建microservice-eureka-service子项目"></a>创建microservice-eureka-service子项目</h2><ul>
<li>创建一个Maven工程（microservice-eureka-service），并在pom.xml中加入如下内容：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="comment">&lt;!--引用父项目的pom--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>project for Spring cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--程序入口--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">start-class</span>&gt;</span>com.troylc.cloud.EurekaServiceApplication<span class="tag">&lt;/<span class="name">start-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--eurekaService必须引用的包--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置需要认证的eurekaservice所需要引用的包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--设置在执行maven 的install时构建镜像--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://10.211.55.4:8372<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span><span class="comment">&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像名称--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像的基础版本--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:openjdk-8-jdk-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像启动参数--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>编写Spring Boot启动程序EurekaServiceApplication：通过@EnableEurekaServer申明一个注册中心<br><img src="/images/spring-cloud/eureka/2.png" alt="eurekaServiceApplication"></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用Eureka做服务发现.</div><div class="line"> * <span class="doctag">@author</span> troylc</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在spring boot的配置文件 application.yml中配置Authenticating、HA高可用及其它相关配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-eureka-services</div><div class="line">#  profiles:</div><div class="line">#    active: eurekaService1</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: true     # 开启基于HTTP basic的认证</div><div class="line">  user:</div><div class="line">    name: eadmin      # 配置登录的账号是user</div><div class="line">    password: eadmin123   # 配置登录的密码是eadmin123</div><div class="line"></div><div class="line"># 配置三个实例的eureka高可用配置，如果是在swarm集群中服务，请把swarm中我service名称部署为三个，分别为：eurekaService1,eurekaService2,eurekaService3</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService1</div><div class="line">server:</div><div class="line">  port: 9511                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService1         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125; # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService2</div><div class="line">server:</div><div class="line">  port: 9512                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService2         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService3</div><div class="line">server:</div><div class="line">  port: 9513                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService3         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService1:9511/eureka/</div></pre></td></tr></table></figure>
<ul>
<li>在父项目的根目录下创建一个docker-compose.yml文件，用于把eurekaService部署在docker swarm集群中,compose内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<h2 id="通过maven插件构建docker镜像"><a href="#通过maven插件构建docker镜像" class="headerlink" title="通过maven插件构建docker镜像"></a>通过maven插件构建docker镜像</h2><p>通过idea中的maven插件构建eurekService的docker镜像到私有仓库<br><img src="/images/spring-cloud/eureka/3.png" alt="构建镜像"><br>在docker环境从私有仓库中下载上面构建的镜像<br><img src="/images/spring-cloud/eureka/4.png" alt="下载镜像"></p>
<p>参考：<br><a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移(一)</a><br><a href="http://www.troylc.cc/docker/2017/02/01/Docker06registry-jenkins.html">jenkins-registry持续集成-jenkins管理与registry集成打包上传镜像(二)</a></p>
<h2 id="在swarm环境中部署高可用的eureka服务"><a href="#在swarm环境中部署高可用的eureka服务" class="headerlink" title="在swarm环境中部署高可用的eureka服务"></a>在swarm环境中部署高可用的eureka服务</h2><p>把之前写的docker-compose.yml文件上传到拥有swarm环境下，执行以下操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 docker-compose]# cat docker-compose.yml </div><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line"></div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml eureka</div><div class="line">Creating network eureka_eureka-net</div><div class="line">Creating service eureka_eurekaService2</div><div class="line">Creating service eureka_eurekaService3</div><div class="line">Creating service eureka_eurekaService1</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps eureka</div><div class="line">ID            NAME                     IMAGE                                             NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">nv8xh5b4tayn  eureka_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-node02    Running        Running 10 seconds ago         </div><div class="line">thuhip7pgoa2  eureka_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-node01    Running        Running 12 seconds ago         </div><div class="line">l8lfb9jtdd9m  eureka_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-master01  Running        Running 12 seconds ago         </div><div class="line">[root@docker-master01 docker-compose]#</div></pre></td></tr></table></figure>
<p>参考：<br><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker1.12.3 docker-swarm创建与管理集群（一）</a><br><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker1.12.3 docker-swarm集群服务部署与维护（二）</a>  </p>
<h2 id="验证eureka服务"><a href="#验证eureka服务" class="headerlink" title="验证eureka服务"></a>验证eureka服务</h2><p>在浏览器上输入部署服务1的地址,输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/5.png" alt="登录eureka"><br><img src="/images/spring-cloud/eureka/6.png" alt="eureka服务界面"><br>在浏览器上输入部署服务2的地址输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/7.png" alt="eureka服务界面"><br>在浏览器上输入部署服务3的地址,输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/8.png" alt="eureka服务界面"> </p>
<p>至此eureka service注册中心基本上已经搭建起来了，后面会通过spring cloud 进行服务提供者的注册，消费者对服务进行消费,以下相关的一些组件，都在swarm集群中部署运行，敬请期待…….</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.itmuch.com/article/13" target="_blank" rel="external">使用Spring Cloud和Docker构建微服务 （一）：序言</a><br><a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a><br><a href="http://www.itmuch.com/spring-cloud-1/" target="_blank" rel="external">Spring Cloud第一篇 Eureka简介及原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件开发中关于服务的讨论呈现出火爆的局面，有人倾向于在系统设计与开发中采用微服务方式实现软件系统的松耦合、跨部门开发；一些公司已经在生产系统中采用了微服务架构，并且取得了良好的效果；下面我们通过spring cloud和docker来构建一个简单的例子，&lt;/p&gt;
&lt;h1 
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose部署swarm服务(docker1.13.1)</title>
    <link href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html"/>
    <id>http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html</id>
    <published>2017-02-25T15:18:08.000Z</published>
    <updated>2017-02-25T15:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在2017年发布的 Docker 1.13版本中的Docker Compose v3 规范，已经全面支持 Swarm mode 概念。而且从 1.13 开始，Docker 命令行工具支持直接使用 v3 版本的 docker-compose.yml 通过docker stack deploy **进行部署管理，这大大简化了容器编排使用的复杂性。</p>
<h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
<th>安装软件  </th>
</tr>
</thead>
<tbody>
<tr>
<td>172.193.6.222</td>
<td>cloud01</td>
<td>manager</td>
<td>centos7.2/docker1.13/docker-compose1,11</td>
</tr>
<tr>
<td>172.193.6.223</td>
<td>cloud02</td>
<td>worker</td>
<td>centos7.2/docker1.13/docker-compose1,11</td>
</tr>
<tr>
<td>172.193.6.224</td>
<td>cloud03</td>
<td>worker</td>
<td>centos7.2/docker1.13/docker-compose1,11  </td>
</tr>
</tbody>
</table>
<p>安装请参考 <a href="http://www.toutiao.com/i6385354267686863361/" target="_blank" rel="external">docker1.13.x及docker-compose1.11.x的安装与升级</a>  </p>
<h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><p>服务部署示意图请参考 <a href="http://www.toutiao.com/i6384915440631546370/" target="_blank" rel="external">swarm集群服务部署与维护</a> 如下图所示：<br><img src="http://www.troylc.cc/images/docker/swarm/2-4.png" alt="image"></p>
<h3 id="docker-compose在swarm模式中部署服务"><a href="#docker-compose在swarm模式中部署服务" class="headerlink" title="docker-compose在swarm模式中部署服务"></a>docker-compose在swarm模式中部署服务</h3><h4 id="compose文件定义："><a href="#compose文件定义：" class="headerlink" title="compose文件定义："></a>compose文件定义：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#docker-compose v3版本规范</div><div class="line">version: &quot;3.1&quot;</div><div class="line"></div><div class="line">services:</div><div class="line">  mysql:</div><div class="line">    image: &quot;test:5000/myhub/mysql:5.7-dws&quot;</div><div class="line">    #container_name: dcmysql</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    environment:</div><div class="line">      MYSQL_ROOT_PASSWORD: talent</div><div class="line">      MYSQL_DATABASE: citydb</div><div class="line">    volumes:</div><div class="line">      - /nfsdata/data/mysql:/var/lib/mysql</div><div class="line">    expose:</div><div class="line">     - &quot;3306&quot;</div><div class="line">  bootService:</div><div class="line">    image: &quot;test:5000/myhub/bootservice:2.0-dws&quot;</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      replicas: 3</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    expose:</div><div class="line">      - &quot;8888&quot; </div><div class="line">  nginx:</div><div class="line">    image: &quot;test:5000/myhub/nginx:1.11-dws&quot;</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      replicas: 2</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure  </div><div class="line">    ports:</div><div class="line">      - &quot;172.19.6.223:80:80&quot;</div><div class="line">networks:</div><div class="line">  my-overlay-network:</div><div class="line">    driver: overlay</div><div class="line">    ipam:</div><div class="line">      config:</div><div class="line">        - subnet: &quot;10.0.7.0/24&quot;</div></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>v3 中引入了 deploy 指令，可对Swarm mode中服务部署的进行细粒度控制，包括  </p>
<ul>
<li>resources：定义  cpu_shares, cpu_quota, cpuset, mem_limit, memswap_limit 等容器资源控制。（v1/v2中相应指令不再支持）</li>
<li>mode：支持 global 和 replicated (缺省) 模式的服务；</li>
<li>replicas：定义 replicated 模式的服务的复本数量</li>
<li>placement：定义服务容器的部署放置约束条件</li>
<li>update_config：定义服务的更新方式</li>
<li>restart_policy：定义服务的重启条件 （v1/v2中restart指令不再支持）</li>
<li>service：定义服务的标签</li>
</ul>
<h4 id="部署服务的操作"><a href="#部署服务的操作" class="headerlink" title="部署服务的操作"></a>部署服务的操作</h4><p>Swarm模式允许创建一个Docker Engines集群。在1.13版本中， docker stack deploy命令可以用来部署一个Compose文件到Swarm模式。Docker Compose带给我们多容器应用，  </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker stack deploy –compose-file=docker-compose.yml dws</td>
<td>启动服务通过compose文件 stack命名为dws</td>
</tr>
<tr>
<td>docker service scale xxx=n</td>
<td>伸缩服务,需要指定服务名称和伸缩副本数  </td>
</tr>
<tr>
<td>docker stack rm</td>
<td>删除服务</td>
</tr>
</tbody>
</table>
<h4 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@tsccloud01 docker-compose]<span class="comment"># docker stack deploy --compose-file=docker-compose.yml dws</span></div><div class="line">Ignoring deprecated options:</div><div class="line"></div><div class="line">expose: Exposing ports is unnecessary - services on the same network can access each other<span class="string">'s containers on any port.</span></div><div class="line">Creating service dws_nginx</div><div class="line">Creating service dws_mysql </div><div class="line">Creating service dws_bootService</div><div class="line"></div><div class="line">[root@tsccloud01 docker-compose]# docker stack ps dws</div><div class="line">ID            NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE               ERROR  PORTS</div><div class="line">khfdjfs5wycw  dws_bootService.1  tcr:5000/myhub/bootservice:1.0-dws  tsccloud02  Running        Running about a minute ago         </div><div class="line">omo3n8ftk8g3  dws_nginx.1        tcr:5000/myhub/nginx:1.11-dws       tsccloud03  Running        Running about a minute ago         </div><div class="line">e8mmigd1tj9e  dws_mysql.1        tcr:5000/myhub/mysql:5.7-dws        tsccloud01  Running        Running about an hour ago          </div><div class="line">xzlubd2fou4f  dws_bootService.2  tcr:5000/myhub/bootservice:1.0-dws  tsccloud03  Running        Running about a minute ago         </div><div class="line">5ws9o7xwmbpd  dws_nginx.2        tcr:5000/myhub/nginx:1.11-dws       tsccloud02  Running        Running about a minute ago         </div><div class="line">5gzncbpq9626  dws_bootService.3  tcr:5000/myhub/bootservice:1.0-dws  tsccloud01  Running        Running about a minute ago</div><div class="line"></div><div class="line">[root@tsccloud01 docker-compose]# docker service ls</div><div class="line">ID            NAME             MODE        REPLICAS  IMAGE</div><div class="line">b63us2e2eksg  dws_nginx        replicated  2/2       tcr:5000/myhub/nginx:1.11-dws</div><div class="line">kqo1g3s1z0mr  dws_bootService  replicated  3/3       tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">rvlfnogtgtso  dws_mysql        replicated  1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>通过以上操作，和之前用命令在swarm集群中部署一样，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2017年发布的 Docker 1.13版本中的Docker Compose v3 规范，已经全面支持 Swarm mode 概念。而且从 1.13 开始，Docker 命令行工具支持直接使用 v3 版本的 docker-compose.yml 通过docker stac
    
    </summary>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/categories/docker-compose/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker1.12.3 docker-swarm集群服务部署与维护（二）</title>
    <link href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html"/>
    <id>http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html</id>
    <published>2017-02-19T14:14:52.000Z</published>
    <updated>2017-02-19T14:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节中，我们已经搭建了docker swarm集群，并且完成对docker swarm集群的基本管理。<br>接下来我们讨论一下的原理以及怎么在搭建好的docker集群中部署集群服务。</p>
<h3 id="swarm服务运行的原理："><a href="#swarm服务运行的原理：" class="headerlink" title="swarm服务运行的原理："></a>swarm服务运行的原理：</h3><p>在docker swarm中部署应用程序，是通过创建service来实现，这里的service的概念通过是指在一个大的应用上下文中的一个微服务，比如在电商的购物网站中：用户管理、订单管理、库存管理，都是购物网站这个大应用中的一个一个微服务，这些服务可以是单个或者多个的在集群模式中运行。<br>service的类型可以是HTTP的应用程序、数据库、缓存服务等分布式环境中任何可执行的程序。<br><strong>service可定义的选项：</strong></p>
<ul>
<li>可以在swarm集群的外部提供访问服务的端口</li>
<li>可以通过覆盖网络(overlay)模式连接到群中的其他服务</li>
<li>可以设置CPU和内存限制和预留值</li>
<li>可以实现滚动更新策略</li>
<li>可以指定要在群中运行的镜像的副本数  </li>
</ul>
<p><strong>服务，任务和容器</strong><br>当您将服务部署到群集时，swarm管理器接受您的服务定义作为服务的所需状态。然后它在swarm中的节点上将服务调度为一个或多个副本任务。这些任务在群中的节点上彼此独立地运行。  </p>
<p><strong>下图解释服务、任务、容器：</strong> </p>
<p><img src="/images/docker/swarm/2-1.png" alt="服务、任务、容器">  </p>
<p><strong>服务的任务及调试说明：</strong>  </p>
<p><img src="/images/docker/swarm/2-2.png" alt="服务的任务及调试说明">  </p>
<p><strong>服务部署的复制模式和全局模式说明：</strong>  </p>
<p><img src="/images/docker/swarm/2-3.png" alt="服务部署的复制模式和全局模式说明"><br><strong>参考：</strong> <a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/" target="_blank" rel="external">https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/</a></p>
<h3 id="docker-swarm服务部署"><a href="#docker-swarm服务部署" class="headerlink" title="docker-swarm服务部署"></a>docker-swarm服务部署</h3><ul>
<li><strong>环境如下：</strong>  </li>
</ul>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.222</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.223</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.224</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">4sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<ul>
<li><strong>服务部署规划：</strong>   </li>
</ul>
<table>
<thead>
<tr>
<th>服务名</th>
<th>副本数</th>
<th>网络</th>
<th>部署模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>nginx</td>
<td>2</td>
<td>my-network</td>
<td>replicated</td>
<td>nginx服务依赖于bootservice服务  </td>
</tr>
<tr>
<td>bootService</td>
<td>3</td>
<td>my-network</td>
<td>replicatedl</td>
<td>bootservice服务依赖于mysql服务 </td>
</tr>
<tr>
<td>mysql</td>
<td>1</td>
<td>my-network</td>
<td>replicated</td>
<td>mysql服务  </td>
</tr>
</tbody>
</table>
<ul>
<li><strong>服务部署图：</strong>   </li>
</ul>
<p><img src="/images/docker/swarm/2-4.png" alt="服务流程图"></p>
<h3 id="服务部署实施："><a href="#服务部署实施：" class="headerlink" title="服务部署实施："></a>服务部署实施：</h3><h4 id="BUILD服务所需的容器："><a href="#BUILD服务所需的容器：" class="headerlink" title="BUILD服务所需的容器："></a>BUILD服务所需的容器：</h4><ul>
<li><strong>程序代码结构：</strong>  </li>
</ul>
<p><img src="/images/docker/swarm/2-5.png" alt="程序结构"></p>
<ul>
<li><strong>代码参考：</strong>   </li>
</ul>
<p><a href="https://github.com/troychn/springboot-docker-swarm" target="_blank" rel="external">github源代码</a><br><img src="/images/docker/swarm/2-6.png" alt="github源码"></p>
<p>把代码从github中下载下来，通过maven编译工具进行编译打包，一般都集成一些开发工具一起使用，我这里通过IDEA编译打包好的jar和dockerfile文件拷贝到docker环境下，如：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># ls</span></div><div class="line">bootService  mysql  nginx</div><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">drwxr-xr-x. 2 root root 67 11月 30 17:42 bootService</div><div class="line">drwxr-xr-x. 2 root root 74 11月 30 17:42 mysql</div><div class="line">drwxr-xr-x. 2 root root 59 11月 30 17:42 nginx</div></pre></td></tr></table></figure>
<ul>
<li><strong>构建mysql镜像：</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># cd mysql</span></div><div class="line">[root@dmpdev mysql]<span class="comment"># ls</span></div><div class="line">city-db.sql  Dockerfile  my.cnf</div><div class="line">[root@dmpdev mysql]<span class="comment"># docker build -t tcr:5000/myhub/mysql:5.7-dws .</span></div><div class="line">Sending build context to Docker daemon 28.67 kB</div><div class="line">Step 1 : FROM mysql</div><div class="line"> ---&gt; d9124e6c552f</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 0b95a555c8cf</div><div class="line"> ---&gt; 5ab93bf1762d</div><div class="line">Removing intermediate container 0b95a555c8cf</div><div class="line">Step 3 : COPY city-db.sql /docker-entrypoint-initdb.d/city-db.sql</div><div class="line"> ---&gt; 81385fa16444</div><div class="line">Removing intermediate container 718e7a1369c3</div><div class="line">Step 4 : COPY my.cnf /etc/mysql/my.cnf</div><div class="line"> ---&gt; 5669d98b188a</div><div class="line">Removing intermediate container 926998a0e768</div><div class="line">Step 5 : RUN <span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezone</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 9b23322b62db</div><div class="line"> ---&gt; ff6e7d0e75af</div><div class="line">Removing intermediate container 9b23322b62db</div><div class="line">Step 6 : EXPOSE 3306</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 8bb45bc9c3e6</div><div class="line"> ---&gt; 9d71c84043af</div><div class="line">Removing intermediate container 8bb45bc9c3e6</div><div class="line">Successfully built 9d71c84043af</div></pre></td></tr></table></figure>
<p>push到docker私有仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/mysql:5.7-dws</span></div><div class="line">The push refers to a repository [tcr:5000/myhub/mysql]</div><div class="line">0b63e7f5c61b: Image successfully pushed </div><div class="line">a9103bf08dd6: Image successfully pushed </div><div class="line">4a8cfaac9133: Image successfully pushed </div><div class="line">ee30b869dd90: Image successfully pushed </div><div class="line">b5d824491b78: Already exists </div><div class="line">b26238180bc8: Already exists </div><div class="line">01e91410235e: Already exists </div><div class="line">b610b16e919f: Already exists </div><div class="line">1574ff8789b1: Already exists </div><div class="line">e7048a1643a4: Already exists </div><div class="line">1bc74a039df4: Already exists </div><div class="line">6ebad06b3e49: Already exists </div><div class="line">f1621398948b: Already exists </div><div class="line">fe4c16cbf7a4: Already exists </div><div class="line">Pushing tag <span class="keyword">for</span> rev [9d71c84043af] on &#123;http://tcr:5000/v1/repositories/myhub/mysql/tags/5.7-dws&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>构建bootService镜像：</strong>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 mysql] <span class="built_in">cd</span> ../bootService/</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker build -t tcr:5000/myhub/bootservice:1.0-dws .</span></div><div class="line">Sending build context to Docker daemon 28.77 MB</div><div class="line">Step 1 : FROM java:openjdk-8-jre-alpine</div><div class="line"> ---&gt; ed933d9cbb9b</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> e020e5dc61a4</div><div class="line"> ---&gt; 1dca6a2dc31c</div><div class="line">Removing intermediate container e020e5dc61a4</div><div class="line">Step 3 : ADD springboot_controller-1.0-SNAPSHOT.jar /app.jar</div><div class="line"> ---&gt; 94d9cb5ce2a3</div><div class="line">Removing intermediate container f151c9ea203e</div><div class="line">Step 4 : EXPOSE 8888</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 1257615513df</div><div class="line"> ---&gt; a192b60e42f7</div><div class="line">Removing intermediate container 1257615513df</div><div class="line">Step 5 : ENTRYPOINT java -jar /app.jar</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 623ec299ddaa</div><div class="line"> ---&gt; 87e646e370af</div><div class="line">Removing intermediate container 623ec299ddaa</div><div class="line">Successfully built 87e646e370af</div><div class="line"></div><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/bootservice:1.0-dws</span></div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li><strong>构建nginx镜像：</strong>   </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 bootService] <span class="built_in">cd</span> ../nginx/</div><div class="line">[root@cloud03 nginx]<span class="comment"># docker build -t tcr:5000/myhub/nginx:1.11-dws .</span></div><div class="line">Sending build context to Docker daemon 7.168 kB</div><div class="line">Step 1 : FROM nginx</div><div class="line"> ---&gt; abf312888d13</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 883582f786a5</div><div class="line"> ---&gt; f234706e9ee5</div><div class="line">Removing intermediate container 883582f786a5</div><div class="line">Step 3 : COPY nginx.conf /etc/nginx/nginx.conf</div><div class="line"> ---&gt; 82053ab65cae</div><div class="line">Removing intermediate container b2eb37dd4ecc</div><div class="line">Step 4 : COPY default.conf /etc/nginx/conf.d/default.conf</div><div class="line"> ---&gt; f43184cfb2fa</div><div class="line">Removing intermediate container 0f7add1f3f67</div><div class="line">Step 5 : RUN mkdir -p /etc/nginx/logs</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 74c0fbabe4ee</div><div class="line"> ---&gt; f20f5d30e5db</div><div class="line">Removing intermediate container 74c0fbabe4ee</div><div class="line">Step 6 : RUN <span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezonedo</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 35003953a04b</div><div class="line"> ---&gt; b3bb199c7506</div><div class="line">Removing intermediate container 35003953a04b</div><div class="line">Step 7 : EXPOSE 80</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 6d7ded8bb94b</div><div class="line"> ---&gt; 7e0d4b715b92</div><div class="line">Removing intermediate container 6d7ded8bb94b</div><div class="line">Successfully built 7e0d4b715b92</div><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/nginx:1.11-dws</span></div><div class="line">......</div></pre></td></tr></table></figure>
<h4 id="创建overlay网络："><a href="#创建overlay网络：" class="headerlink" title="创建overlay网络："></a>创建overlay网络：</h4><p>my-network,使用overlay网络连接集群中的一个或多个服务。<br>在manager节点上创建overlay网络，使用docker network create命令：<br><strong>–driver overlay</strong> 网络类型<br><strong>–subnet 10.0.9.0/24</strong> 子网地址段<br><strong>–opt encrypted</strong> 给此网络加密（<a href="https://docs.docker.com/engine/userguide/networking/overlay-security-model/" target="_blank" rel="external">具体说明请参考：https://docs.docker.com/engine/userguide/networking/overlay-security-model/</a>）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment">#  docker network create \</span></div><div class="line">&gt;   --driver overlay \</div><div class="line">&gt;   --subnet 10.0.9.0/24 \</div><div class="line">&gt;   --opt encrypted \</div><div class="line">&gt;   my-network</div><div class="line">bhna620fxpuryf2e1te6hui1t</div><div class="line">[root@cloud01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">8fd3e2a10dff        bridge              bridge              <span class="built_in">local</span>               </div><div class="line">987934476ba0        docker_gwbridge     bridge              <span class="built_in">local</span>               </div><div class="line">77ac8b224344        host                host                <span class="built_in">local</span>               </div><div class="line">aeyt32avj7kq        ingress             overlay             swarm               </div><div class="line">bhna620fxpur        my-network          overlay             swarm               </div><div class="line">436685dca07d        none                null                <span class="built_in">local</span>               </div><div class="line">[root@cloud01 ~]<span class="comment"># docker network inspect my-network</span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"my-network"</span>,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"bhna620fxpuryf2e1te6hui1t"</span>,</div><div class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</div><div class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</div><div class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"IPAM"</span>: &#123;</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</div><div class="line">            <span class="string">"Options"</span>: null,</div><div class="line">            <span class="string">"Config"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"Subnet"</span>: <span class="string">"10.0.9.0/24"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"10.0.9.1"</span></div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Containers"</span>: null,</div><div class="line">        <span class="string">"Options"</span>: &#123;</div><div class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"257"</span>,</div><div class="line">            <span class="string">"encrypted"</span>: <span class="string">""</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Labels"</span>: null</div><div class="line">    &#125;</div><div class="line">]</div><div class="line"></div><div class="line">```  </div><div class="line"><span class="comment">#### 创建mysql服务  </span></div><div class="line">在manager节点创建mysql服务，参数说明：  </div><div class="line">**--replicas :** 服务运行的副本个数  </div><div class="line">**--name :** 服务名称  </div><div class="line">**--network :** 服务运行时所处在的网络  </div><div class="line">**--endpoint-mode dnsrr :** 服务发现的方式dns  </div><div class="line">**--mount <span class="built_in">type</span>=<span class="built_in">bind</span> :** 服务以绑定方式挂载数据目录(挂载前宿主机目录必须先创建)  </div><div class="line">**--e :** 针对mysql服务创建时需要的启动参数  </div><div class="line">**--tcr:5000/myhub/mysql:5.7-dws** 所运行的镜像</div><div class="line"></div><div class="line">```bash</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">   --replicas 1 \</div><div class="line">   --name mysql \</div><div class="line">   --network my-network \</div><div class="line">   --endpoint-mode dnsrr \</div><div class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/var/lib/mysql,dst=/var/lib/mysql \</div><div class="line">   -e MYSQL_ROOT_PASSWORD=talent \</div><div class="line">   -e MYSQL_DATABASE=citydb \</div><div class="line">   tcr:5000/myhub/mysql:5.7-dws</div><div class="line">33wyod9syd1fcq2ip58872ce6</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME   REPLICAS  IMAGE                         COMMAND</div><div class="line">33wyod9syd1f  mysql  0/1       tcr:5000/myhub/mysql:5.7-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps mysql </span></div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">2nrar9c71olxrc7wo3ab6hxfh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud02  Running        Preparing 28 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME   REPLICAS  IMAGE                         COMMAND</div><div class="line">33wyod9syd1f  mysql  1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>查看cloud02主机上是否运行了mysql数据库服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">d168b5948e55        tcr:5000/myhub/mysql:5.7-dws   <span class="string">"docker-entrypoint.sh"</span>   24 seconds ago      Up 22 seconds       3306/tcp            mysql.1.2nrar9c71olxrc7wo3ab6hxfh</div></pre></td></tr></table></figure>
<h4 id="创建bootService服务"><a href="#创建bootService服务" class="headerlink" title="创建bootService服务"></a>创建bootService服务</h4><p>在manager节点上操作创建3个容器副本的bootService服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">   --replicas 3 \</div><div class="line">   --name bootService \</div><div class="line">   --network my-network \</div><div class="line">   --endpoint-mode dnsrr \</div><div class="line">   tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">5cy0l5cuidlgqjqczwotikvke</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">33wyod9syd1f  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">5cy0l5cuidlg  bootService  2/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME           IMAGE                               NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">b7va0y4dg01chnhu3hlvzi7o8  bootService.1  tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 7 seconds ago   </div><div class="line">8zbgh0rl9w6amhmjxj2rmu627  bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 22 seconds ago  </div><div class="line">3lgnfy11sgs4hj3375o30j5us  bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 22 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">33wyod9syd1f  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">5cy0l5cuidlg  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">37218abdd4ec        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   41 seconds ago      Up 40 seconds       8888/tcp            bootService.1.b7va0y4dg01chnhu3hlvzi7o8</div></pre></td></tr></table></figure>
<p>在cloud03上看另外两个容器：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 nginx]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">4eef20ce8f95        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   2 minutes ago       Up 2 minutes        8888/tcp            bootService.2.8zbgh0rl9w6amhmjxj2rmu627</div><div class="line">960e905306e9        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   2 minutes ago       Up 2 minutes        8888/tcp            bootService.3.3lgnfy11sgs4hj3375o30j5us</div></pre></td></tr></table></figure>
<h4 id="创建nginx服务"><a href="#创建nginx服务" class="headerlink" title="创建nginx服务"></a>创建nginx服务</h4><p>在manager节点上操作创建运行2个容器副本的nginx服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">  --name nginx \</div><div class="line">  --replicas 2 \</div><div class="line">  --publish 80:80 \</div><div class="line">  --network my-network \</div><div class="line">  tcr:5000/myhub/nginx:1.11-dws</div><div class="line">5cd0eaow2zp0ytul3muy71gcl</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        0/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps nginx</span></div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 1 seconds ago   </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 11 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<h3 id="服务的管理与测试"><a href="#服务的管理与测试" class="headerlink" title="服务的管理与测试"></a>服务的管理与测试</h3><ul>
<li><strong>访问应用测试</strong>  </li>
</ul>
<p>通过浏览器输入<a href="http://cloud01(对就服务的IP),如：" target="_blank" rel="external">http://cloud01(对就服务的IP),如：</a><br><img src="/images/docker/swarm/2-7.png" alt="应用测试">  </p>
<p>可以多次刷新一下，监控bootService服务打印出来的日志，他会帮你负载到不同的服务容器上，这里就不做说明了。</p>
<ul>
<li><strong>应用异常停止测试</strong>  </li>
</ul>
<p>找一台运行了bootService应用的机器手动停止容器，docker-swarm会根据你创建时副本的数量为标准，自动新建副本，以达到服务运行的要求，如下：<br>cloud02上停止一个bootService应用  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">c5ade28e1900        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours          8888/tcp            bootService.2.9w5fhethqmyob9l27257ijl4k</div><div class="line">01aedb0fbdcd        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours          8888/tcp            bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment"># docker stop bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</span></div><div class="line">bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS                        PORTS               NAMES</div><div class="line">050cf1feb5b1        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   29 seconds ago      Up 28 seconds                 8888/tcp            bootService.3.dwbmcqnjwjlntujy6xzvss4qn</div><div class="line">c5ade28e1900        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours                    8888/tcp            bootService.2.9w5fhethqmyob9l27257ijl4k</div><div class="line">01aedb0fbdcd        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Exited (143) 34 seconds ago                       bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>在管理节点查看服务的状态：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE            ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 3 hours ago      </div><div class="line">9w5fhethqmyob9l27257ijl4k  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 3 hours ago      </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Ready          Preparing 3 seconds ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 3 seconds ago     <span class="string">"task: non-zero exit (143)"</span></div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 3 hours ago     </div><div class="line">9w5fhethqmyob9l27257ijl4k  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 3 hours ago     </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 16 seconds ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 22 seconds ago   <span class="string">"task: non-zero exit (143)"</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>宿主机停机扩容，更新测试</strong>：  </li>
</ul>
<p>现在如果有一台宿主机的容量，或者内存等以达到了峰值，想对这台主机进行停机扩容，或者相关的系统更新等操作，可以修改主机的集群可见性状态  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Active        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker node update --availability Drain cloud02</span></div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Drain         </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps nginx</span></div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 4 hours ago  </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 4 hours ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps mysql</span></div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">488dnyp5czuwta2velkeidxxh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud03  Running        Running 4 hours ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 4 hours ago       </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 54 seconds ago    </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 58 seconds ago   </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 54 seconds ago    </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 59 seconds ago   </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed about an hour ago  <span class="string">"task: non-zero exit (143)"</span></div></pre></td></tr></table></figure>
<p>通过以上测试可以发现运行在cloud02上的容器全部停止，并且swarm集群会自动迁移cloud02上的容器到其它宿主机上。这样我们就可以在cloud02上进行硬件升级操作，等升级完后，可以进行恢复操作，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker node update --availability Active cloud02</div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]# docker node ls</div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Active        </div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]# docker service ps nginx</div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 5 hours ago  </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 5 hours ago  </div><div class="line">[root@cloud01 ~]# docker service ps mysql</div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">488dnyp5czuwta2velkeidxxh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud03  Running        Running 5 hours ago  </div><div class="line">[root@cloud01 ~]# docker service ps bootService</div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 5 hours ago       </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 11 minutes ago    </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 11 minutes ago   </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 11 minutes ago    </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 11 minutes ago   </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed about an hour ago  &quot;task: non-zero exit (143)&quot;</div></pre></td></tr></table></figure>
<p>恢复回来的主机cloud02，集群并没有把之前在这台主机上运行的容器恢复，他只是会在之前创建service时，会加大在这台主机运行容器的权重，比如接下来我加大对bootService的副本的个为6个，集群应该会优先在cloud02上运行.</p>
<ul>
<li><strong>调整service的副本数：</strong>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service scale bootService=6</span></div><div class="line">bootService scaled to 6</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE               ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 6 hours ago         </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running about an hour ago   </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown about an hour ago  </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running about an hour ago   </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown about an hour ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 2 hours ago          <span class="string">"task: non-zero exit (143)"</span></div><div class="line">df2gl62u120hix9ixmdvxmr7s  bootService.4      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 12 seconds ago      </div><div class="line">8jauwg0g07qgcjwydfil71uei  bootService.5      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 13 seconds ago      </div><div class="line">f4xwd11aof6rxxf1alovq8ulp  bootService.6      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 12 seconds ago      </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>可以看到在增加3个bootService的副本时，他把三个副本都在cloud02上运行</p>
<ul>
<li><strong>service在线滚动升级：</strong>  </li>
<li>[x] 升级之前需要修改代码程序，比如：  </li>
</ul>
<p><img src="/images/docker/swarm/2-8.png" alt="更新代码"></p>
<ul>
<li>[x] 重新build镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 bootService]<span class="comment"># docker build -t tcr:5000/myhub/bootservice:2.0-dws .</span></div><div class="line">Sending build context to Docker daemon 57.54 MB</div><div class="line">Step 1 : FROM java:openjdk-8-jre-alpine</div><div class="line"> ---&gt; ed933d9cbb9b</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 1541be2de9a0</div><div class="line"> ---&gt; 045d03ddb174</div><div class="line">Removing intermediate container 1541be2de9a0</div><div class="line">Step 3 : ADD springboot_controller-1.0-SNAPSHOT.jar /app.jar</div><div class="line"> ---&gt; 7cdbe5b89ad9</div><div class="line">Removing intermediate container 812ee39672ec</div><div class="line">Step 4 : EXPOSE 8888</div><div class="line"> ---&gt; Running <span class="keyword">in</span> f606dddc345b</div><div class="line"> ---&gt; 5c3d29d21ffc</div><div class="line">Removing intermediate container f606dddc345b</div><div class="line">Step 5 : ENTRYPOINT java -jar /app.jar</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 21950f69009e</div><div class="line"> ---&gt; 4c051321084e</div><div class="line">Removing intermediate container 21950f69009e</div><div class="line">Successfully built 4c051321084e</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                   TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/bootservice   2.0-dws                4c051321084e        8 seconds ago       136.6 MB</div><div class="line">tcr:5000/myhub/nginx         1.11-dws               ac60c7d1de84        8 hours ago         181.5 MB</div><div class="line">tcr:5000/myhub/bootservice   1.0-dws                efde01242708        8 hours ago         136.6 MB</div><div class="line">tcr:5000/myhub/mysql         5.7-dws                ab71fac9c8e0        23 hours ago        383.4 MB</div><div class="line">nginx                        latest                 abf312888d13        2 days ago          181.5 MB</div><div class="line">tcr:5000/myhub/dmpmysql      latest                 a0af62341076        7 days ago          374.1 MB</div><div class="line">tcr:5000/myhub/mysql         5.7                    261ed3d3451f        7 days ago          383.4 MB</div><div class="line">java                         openjdk-8-jre-alpine   ed933d9cbb9b        13 days ago         107.8 MB</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker push tcr:5000/myhub/bootservice:2.0-dws</span></div><div class="line">The push refers to a repository [tcr:5000/myhub/bootservice]</div><div class="line">0ab32fba5be5: Image successfully pushed </div><div class="line">d1052adb22b9: Already exists </div><div class="line">30125717c842: Already exists </div><div class="line">011b303988d2: Already exists </div><div class="line">Pushing tag <span class="keyword">for</span> rev [4c051321084e] on &#123;http://tcr:5000/v1/repositories/myhub/bootservice/tags/2.0-dws&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>为了跟踪查询我们bootService服务在滚动更新中的状态, 我们新开一个ssh窗口连接cloud01, 执行watch命令, 监控worker服务状态:<br>如下命令可以打开一个监控窗口, 每秒监控我们worker服务的状态变化:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># watch -n1 "docker service ps bootService | grep -v Shutdown.*Shutdown"</span></div><div class="line">Every 1.0s: docker service ps bootService | grep -v Shutdown.*Shutdown                                                                                                           Thu Dec  1 17:52:55 2016</div><div class="line"></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE              ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 7 hours ago</div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 2 hours ago</div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 2 hours ago</div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 4 hours ago         <span class="string">"task: non-zero exit (143)"</span></div><div class="line">df2gl62u120hix9ixmdvxmr7s  bootService.4      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div><div class="line">8jauwg0g07qgcjwydfil71uei  bootService.5      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div><div class="line">f4xwd11aof6rxxf1alovq8ulp  bootService.6      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div></pre></td></tr></table></figure>
<p>下面我们有了新bootService服务的镜像2.0-dws, 我们来滚动更新我们的6个bootService:  </p>
<p>这里只用docker service update 命令:<br><strong>–update-parallelism</strong>指定每次update的容器数量<br><strong>–update-delay</strong> 每次更新之后的等待时间.<br><strong>–image</strong>后面跟服务镜像名称  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]# docker service update bootService --update-parallelism 2 --update-delay 5s --image tcr:5000/myhub/bootservice:2.0-dws</div><div class="line">bootService</div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:2.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]#</div></pre></td></tr></table></figure>
<p>执行完后，查看上面打开的监控情况，发现他会按照你指定的更新参数，升级bootService服务。<br>打开页面验证<br><img src="/images/docker/swarm/2-9.png" alt="验证2.0版本"></p>
<ul>
<li><strong>容器服务回滚</strong>  </li>
</ul>
<p>如果我们发现, 新版本bootService有问题希望回滚怎么办呢.<br>很简单, 跟上面更新的命令一样啊, 直接只用v0.1版本的镜像就可以了.<br>上面我们演示了滚动更新, 如果你希望一次性都更新或者回滚呢, 更简单了, 不加参数就行了.</p>
<p>下面我们一次性回滚所有bootService服务到1.0版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker service update bootService --image tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">bootService</div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>可以看到bootService服务都回滚到1.0-dws版本了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我们已经搭建了docker swarm集群，并且完成对docker swarm集群的基本管理。&lt;br&gt;接下来我们讨论一下的原理以及怎么在搭建好的docker集群中部署集群服务。&lt;/p&gt;
&lt;h3 id=&quot;swarm服务运行的原理：&quot;&gt;&lt;a href=&quot;#swarm
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>java中并发工具包-同步器（一）</title>
    <link href="http://www.troylc.cc/java/2017/02/15/java01-thread-tools.html"/>
    <id>http://www.troylc.cc/java/2017/02/15/java01-thread-tools.html</id>
    <published>2017-02-14T16:08:00.000Z</published>
    <updated>2017-02-14T16:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>传统的多线程中并没有提供高级特性，比如：信号量、线程池、执行管理器等。而这些特殊恰恰是有助于创建更加强大的并发程序。java中并发工具处于java.util.concurrent包中，其中包括的内容包括：同步器、执行器、并发集合、Fork/join框架、atomic包和locks包。<br>下面介绍一下线程开发中的工具包内容：</p>
<ul>
<li>同步器：是为每种特定的同步问题提供的解决方案；</li>
<li>执行器：用来管理线程执行，如：线程池</li>
<li>并发集合：提供了集合框架中集合的并发版本</li>
<li>Fork/join框架：提供了对并行编程的支持</li>
<li>atomic包：提供了不需要锁即可完成并发环境变量使用的原子性操作。</li>
<li>locks包：使用locks接口为并发编程提供了同步的另一种替代方案，也就相当于Synchronize关键字的替代方案。</li>
</ul>
<h1 id="同步器"><a href="#同步器" class="headerlink" title="同步器"></a>同步器</h1><p>同步器：是为每种特定的同步问题提供的解决方案；</p>
<p><strong>信号量同步器</strong> ：通过计数器控制对共享资源的访问<br>步骤：<br>semaphore(int count):创建拥有count个许可证的信号量<br>acquire()/acquire(int num):获取1/num个许可证<br>release()/release(int num):释放1/num个许可证<br>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//编写两个柜员的信号量许可证，相当于最大允许多少线程来并发。</span></div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</div><div class="line"></div><div class="line">        Person p1 = <span class="keyword">new</span> Person(semaphore, <span class="string">"A"</span>);</div><div class="line">        p1.start();</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(semaphore, <span class="string">"B"</span>);</div><div class="line">        p2.start();</div><div class="line">        Person p3 = <span class="keyword">new</span> Person(semaphore, <span class="string">"C"</span>);</div><div class="line">        p3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="comment">//定义一个信号量</span></div><div class="line">    <span class="keyword">private</span> Semaphore semaphore;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Semaphore semaphore, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//等待空闲柜台来服务</span></div><div class="line">        System.out.println(getName() + <span class="string">" is waiting ...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//获取信号量同步器的许可证来为我服务，是否能够获取得到柜台服务，</span></div><div class="line">            <span class="comment">// 是要看银行有多少个柜台，这里相当于定义的信号最同步器最大允许的同步数。</span></div><div class="line">            semaphore.acquire();</div><div class="line">            System.out.println(getName() + <span class="string">" is servicing..."</span>);</div><div class="line">            <span class="comment">//休眠一秒表示服务的时长</span></div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(getName() + <span class="string">" is done!"</span>);</div><div class="line">        <span class="comment">//服务完成后，释放信号量许可给下一个客记服务。</span></div><div class="line">        semaphore.release();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计数栓同步器</strong> :必须发生指定数量的事件后才可以继续运行<br> CountDownLatch(int count):必须发生count个数量才可以打开锁存器<br> await():等待锁存器：线程可以阻塞等待这一数量到达零<br> countDown()解发事件：每被调用一次，这一数量就减一  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"A"</span>).start();</div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"B"</span>).start();</div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"C"</span>).start();</div><div class="line"></div><div class="line">        <span class="comment">//开始计数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="number">3</span> - i);</div><div class="line">            countDownLatch.countDown();</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)</div><div class="line">                System.out.println(<span class="string">"Start"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如运动员赛跑比赛，在裁判员喊一二三，开如跑的时候，一起跑。</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Racer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Racer</span><span class="params">(CountDownLatch countDownLatch, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(getName()+ <span class="string">"线程阻塞等待"</span>);</div><div class="line">            countDownLatch.await();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">                System.out.println(getName() + <span class="string">" :"</span> + i);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>循环屏障同步器：</strong>主要作用适用于只有多个线程都到达预定点时才可以继续执行<br> CyclicBarrier(int num):等待线程的数量<br> CyclicBarrier(int num,Runnable action):等待线程的数量以及所有线程到达后的操作<br> await():到达临界点后的暂停线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cyclicBarrierDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Game start"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"A"</span>).start();</div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"B"</span>).start();</div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"C"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如斗地方游戏的场景，一个人开始，等待另两个玩家开始</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(CyclicBarrier cyclicBarrier, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(getName() + <span class="string">" is waiting other players...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cyclicBarrier.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>交换器同步器：</strong> 简化两个线程间数据的交换<br> Exchanger<v>：指定进行交换的数据类型<br> V exchange(V object):等待线程到达，交换数据<br> 如：</v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Exchanger&lt;String&gt; ex = <span class="keyword">new</span> Exchanger&lt;String&gt;();</div><div class="line">        <span class="keyword">new</span> A(ex).start();</div><div class="line">        <span class="keyword">new</span> B(ex).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; ex;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(Exchanger&lt;String&gt; ex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ex = ex;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            str = ex.exchange(<span class="string">"Hello?"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"A"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"B"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; ex;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(Exchanger&lt;String&gt; ex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ex = ex;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            str = ex.exchange(<span class="string">"Hi!"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"1"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"2"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Phaser同步器：</strong> 工作方式与CyclicBarrier类似，但是可以定义多个阶段<br> Phaser()/Phaser(int num):使用指定0/num个party创建phaser<br> register():注册party<br> arriveAndAwaitAdvance():到达时等待到所有party到达<br> arriveAndDeregister():到达时注销线程自己</p>
<p> 如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhaserDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Phaser phaser = <span class="keyword">new</span> Phaser(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">" starting ...."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Fuwuyuan"</span>).start();</div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Chushi"</span>).start();</div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Shangcaiyuan"</span>).start();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">            System.out.println(<span class="string">"Order "</span> + i + <span class="string">" finished!"</span>);</div><div class="line">        &#125;</div><div class="line">        phaser.arriveAndDeregister();</div><div class="line">        System.out.println(<span class="string">"All done!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Phaser phaser;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span> <span class="params">(Phaser phaser, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setName(name);</div><div class="line">        <span class="keyword">this</span>.phaser = phaser;</div><div class="line">        phaser.register();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"current order is: "</span> + i + <span class="string">" : "</span> + getName());</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</div><div class="line">                phaser.arriveAndDeregister();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                phaser.arriveAndAwaitAdvance();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统的多线程中并没有提供高级特性，比如：信号量、线程池、执行管理器等。而这些特殊恰恰是有助于创建更加强大的并发程序。java中并发工具处于java.util.concurrent包中，其中包括的内容包括：同步器、执行器、并发集合、Fork/join框架、atomic包和lo
    
    </summary>
    
      <category term="java" scheme="http://www.troylc.cc/categories/java/"/>
    
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="Thread" scheme="http://www.troylc.cc/tags/Thread/"/>
    
  </entry>
  
</feed>
