<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>troyCoder</title>
  <subtitle>爱生活爱编程，分享学习工作中的知识和见解！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.troylc.cc/"/>
  <updated>2018-05-27T09:44:52.457Z</updated>
  <id>http://www.troylc.cc/</id>
  
  <author>
    <name>troylc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu18.04 server lts版本安装docker及相关配置</title>
    <link href="http://www.troylc.cc/ubuntu/2018/05/27/ubuntu18.04-installd-docker.html"/>
    <id>http://www.troylc.cc/ubuntu/2018/05/27/ubuntu18.04-installd-docker.html</id>
    <published>2018-05-27T07:19:59.077Z</published>
    <updated>2018-05-27T09:44:52.457Z</updated>
    
    <content type="html"><![CDATA[<p>最近因项目需要，把服务器的相关操作系统转到ubuntu server上来，所以正好记录一下安装docker的常用配置及注意事项。由于之前项目一直是用centos来做服务器的操作系统，很少关注ubuntu的服务器版本。在使用docker及相关容器平台时发现centos会带来一些不可预知的错误，也很难有相关的修复答案。在查询相关资料后，国外大多在使用ubuntu来做容器平台的操作系统，而且社区相关的问题也比较活跃，所以近期我们也正在考虑转入ubuntu来做容器的操作系统。借此以记录ubuntu相关的基本操作与docker安装。</p>
<h2 id="ubuntu-18-04-server版本的网络及主机名的配置"><a href="#ubuntu-18-04-server版本的网络及主机名的配置" class="headerlink" title="ubuntu 18.04 server版本的网络及主机名的配置"></a>ubuntu 18.04 server版本的网络及主机名的配置</h2><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>ubuntu18.04的网络配置已经用netplay接管了，所以修改网络需要修改/etc/netplan/下的50-cloud-init.yaml文件，如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">admin@node01:~$ sudo vim /etc/netplan/50-cloud-init.yaml</div><div class="line"><span class="meta">#</span><span class="bash"> This file is generated from information provided by</span><span class="meta">#</span><span class="bash"> the datasource.  Changes to it will not persist across an instance.</span><span class="meta">#</span><span class="bash"> To <span class="built_in">disable</span> cloud-init<span class="string">'s network configuration capabilities, write a file</span></span><span class="meta">#</span><span class="bash"><span class="string"> /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><span class="meta">#</span><span class="bash"><span class="string"> network: &#123;config: disabled&#125;</span></span>network:    ethernets:        eno1:            addresses:            - 192.168.18.21/24            gateway4: 192.168.18.1            nameservers:                addresses:                - 114.114.114.114                search: []            optional: true    version: 2~                                                                                                                                                                                  :wq</div><div class="line">admin@node01:~$ sudo netplan apply</div><div class="line">admin@node01:~$ ifconfig</div></pre></td></tr></table></figure>
<p><img src="/images/linux/ubuntu-01/15274068318377.jpg" alt=""></p>
<h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><p>如果您正在使用Ubuntu 18.04 LTS服务器，如何重命名或更改服务器主机名。主机名是服务器的唯一名称。这就是服务器在网络上被识别的方式。</p>
<ol>
<li>更改主机名文件/etc/hostname中的服务器名称<br>首先编辑/etc/cloud/cloud.cfg并将参数“ preserve_hostname ”从“ false ”设置为“ true</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin@node01:~$ sudo vim /etc/cloud/cloud.cfg</div></pre></td></tr></table></figure>
<p><img src="/images/linux/ubuntu-01/15274072047285.jpg" alt=""><br>其次是编辑/etc/hostname文件，并编辑文件中的名字为你所需要的主机名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin@node01:~$ sudo vim /etc/hostname</div></pre></td></tr></table></figure></p>
<p><img src="/images/linux/ubuntu-01/15274073917659.jpg" alt=""></p>
<ol>
<li>更改主机文件/etc/hosts中的服务器名称<br>更改主机文件/etc/hosts中的服务器名称,在127.0.0.1后面增加主机名称。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin@node01:~$ sudo vim /etc/hosts</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/linux/ubuntu-01/15274075104177.jpg" alt=""></p>
<ol>
<li>重新启动服务器<br>最后，重新启动服务器以应用新名称…如果您未重新启动，则新名称将无法正确应用。运行以下命令重新启动服务器。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin@node01:~$ sudu reboot</div></pre></td></tr></table></figure>
<h2 id="ubuntu-18-04-server版本的docker安装及配置"><a href="#ubuntu-18-04-server版本的docker安装及配置" class="headerlink" title="ubuntu 18.04 server版本的docker安装及配置"></a>ubuntu 18.04 server版本的docker安装及配置</h2><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><ol>
<li>移除旧版本docker </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin@node21:~$ sudo apt-get remove docker docker-engine docker.io</div></pre></td></tr></table></figure>
<ol>
<li>安装软件包来允许apt通过HTTPS使用存储库 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</div></pre></td></tr></table></figure>
<ol>
<li>添加Docker的官方GPG密钥 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</div></pre></td></tr></table></figure>
<ol>
<li>添加docker的下载源，<br>因为官方还没有ubuntu18的下载源，所以先用ubuntu17（zesty）的<br>如果操作系统是ubuntu14.04把zesty换成trusty，如果是ubuntu16.04换成xenial </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu zesty stable&quot;</div></pre></td></tr></table></figure>
<ol>
<li>安装docker-ce </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update </div><div class="line">sudo apt-get install docker-ce</div></pre></td></tr></table></figure>
<ol>
<li>授于当前用户不需要使用sudo来执行docker命令的权限<br>创建docker组 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo groupadd docker</div></pre></td></tr></table></figure>
<p>将当前用户加入docker组 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gpasswd -a $&#123;USER&#125; docker </div><div class="line">#或者 </div><div class="line">sudo usermod -aG docker $USER</div></pre></td></tr></table></figure>
<p>重启docker 并设置开机启动docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div><div class="line">sudo systemctl enable docker</div></pre></td></tr></table></figure>
<h4 id="docker-简单配置"><a href="#docker-简单配置" class="headerlink" title="docker 简单配置"></a>docker 简单配置</h4><p>这里我只对docker的存储驱动和国内镜像源加速器（阿里个人加载器）的配置，修改或者创建/etc/docker/daemon.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo /etc/docker/daemon.json</div><div class="line">&#123;</div><div class="line">  &quot;storage-driver&quot;: &quot;devicemapper&quot;,</div><div class="line">  &quot;registry-mirrors&quot;: [&quot;https://1i186hp0.mirror.aliyuncs.com&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因项目需要，把服务器的相关操作系统转到ubuntu server上来，所以正好记录一下安装docker的常用配置及注意事项。由于之前项目一直是用centos来做服务器的操作系统，很少关注ubuntu的服务器版本。在使用docker及相关容器平台时发现centos会带来一
    
    </summary>
    
      <category term="ubuntu" scheme="http://www.troylc.cc/categories/ubuntu/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="ubuntu" scheme="http://www.troylc.cc/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>持续集成(CI)与持续交付(CD)之gitlab-Fork工作流与IntellijIDEA操作</title>
    <link href="http://www.troylc.cc/CI-CD/gitlab/IntelliJ-IDEA/2018/01/08/cicd-gitlab-fork-idea.html"/>
    <id>http://www.troylc.cc/CI-CD/gitlab/IntelliJ-IDEA/2018/01/08/cicd-gitlab-fork-idea.html</id>
    <published>2018-01-08T09:26:15.000Z</published>
    <updated>2018-01-08T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>承接上一篇，gitlab在本地部署完后，我们就可以像拥抱github一下来体验一下gitlab的精妙之处，在git中我们针对代码的版本管理，有很多种玩法，如有集中式工作流，功能分支工作流，gitflow工作流，git-fork工作流。不同的玩法，有不同的操作；前三种都是基于集中式代码管理来进行操作的，有点类似于SVN的方式，只不过git的集中式代码管理还是一种分布式的管理，针对开分支，合并分支等相关操作，要比SVN方便很多。<br>本文主要讲上面提的到第四种gitlab的fork工作流，目前最流行的github中开源团队协作的方式就是这种。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。 开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。 这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。<br>在安装完git bash工具后,本文主要是以文档的方式做操作，而且主要工具是Intellij idea来开发。所以以下的操作都是在IDEA中进行。</p>
<h3 id="fork工作流程步骤"><a href="#fork工作流程步骤" class="headerlink" title="fork工作流程步骤"></a>fork工作流程步骤</h3><p>FORK远程中央仓库–&gt;<br>clone从远程中央仓库fork到远程个人仓库到本地git环境–&gt;<br>管理员在web界面创建功能与BUG任务issues–&gt;<br>开发人员查看远程中央仓库的issues并针对功能和BUG issues在本地新建分支并开发–&gt;<br>提交并push分支到个人仓库–&gt;<br>个人仓库中发送meger request请求，合并个人仓库分支到远程中央仓库的master–&gt;<br>远程中央仓库的代码维护者进行合并分支–&gt;<br>个人本地仓库删除已经合并的分支，并从远程中央仓库中pull代码到本地master中–&gt;<br>本地master push到个人仓库中。</p>
<h4 id="FORK远程中央仓库到个人仓库中"><a href="#FORK远程中央仓库到个人仓库中" class="headerlink" title="FORK远程中央仓库到个人仓库中"></a>FORK远程中央仓库到个人仓库中</h4><p>用用户名密码登录我们上一章节搭建的gitlab服务web端程序。找到想要fork的项目，点击fork,如下图：<br><img src="/images/cicd/git-idea/15155043228652.jpg" alt=""><br><img src="/images/cicd/git-idea/15155043776641.jpg" alt=""><br><img src="/images/cicd/git-idea/15155047092481.jpg" alt=""><br>以上是fork远程仓库的步骤。</p>
<h4 id="clone个人仓库中fork过来的仓库"><a href="#clone个人仓库中fork过来的仓库" class="headerlink" title="clone个人仓库中fork过来的仓库"></a>clone个人仓库中fork过来的仓库</h4><p>复制SSH链接地址，到intellij idea进行clone操作，如下：<br><img src="/images/cicd/git-idea/15155051645082.jpg" alt=""><br><img src="/images/cicd/git-idea/15155052697020.jpg" alt=""><br>然后按照IDEA中一步一步操作，就可以把项目clone到本地</p>
<h4 id="远程仓库创建功能及BUG问题的任务"><a href="#远程仓库创建功能及BUG问题的任务" class="headerlink" title="远程仓库创建功能及BUG问题的任务"></a>远程仓库创建功能及BUG问题的任务</h4><p>（如果是公司内部用，最好是项目管理者来创建BUG和功能issues，这里我们是想把issues来当做任务与BUG功能的小管理工具来使用）创建功能及BUG问题的任务，以便于在本地开发的时候，新建对应的分支进行开发，在web端的操作如下：<br><img src="/images/cicd/git-idea/15155058237183.jpg" alt=""><br><img src="/images/cicd/git-idea/15155063602455.jpg" alt=""><br><img src="/images/cicd/git-idea/15155064678746.jpg" alt=""></p>
<h4 id="开发人员修改并提交meger-request"><a href="#开发人员修改并提交meger-request" class="headerlink" title="开发人员修改并提交meger request"></a>开发人员修改并提交meger request</h4><p>本地开发人员针对这个以上问题在本地刚刚用idea clone下来的项目，新建一个分支，进行修改<br><img src="/images/cicd/git-idea/15155066713100.jpg" alt=""><br><img src="/images/cicd/git-idea/15155067118353.jpg" alt=""><br><img src="/images/cicd/git-idea/15155067851203.jpg" alt=""><br>将修改提交本地git环境<br><img src="/images/cicd/git-idea/15155068606051.jpg" alt=""><br>将修改提交到远程个人仓库<br><img src="/images/cicd/git-idea/15155069060448.jpg" alt=""><br><img src="/images/cicd/git-idea/15155069797246.jpg" alt=""><br>在登录web上查看个人仓库下是否有push过来的update-a-module分支<br><img src="/images/cicd/git-idea/15155070670436.jpg" alt=""><br>切换分支，并在左侧菜单栏下的meger request中新建一个meger个人update-a-module分支与远程fork的中央仓库的合并请求<br><img src="/images/cicd/git-idea/15155073536145.jpg" alt=""><br><img src="/images/cicd/git-idea/15155074565530.jpg" alt=""><br><img src="/images/cicd/git-idea/15155082934666.jpg" alt=""><br><img src="/images/cicd/git-idea/15155076458896.jpg" alt=""></p>
<p>远程中央仓库管理员，查看meger request请求，检查并合并，用管理员的身份登录gitlab，web界面。<br><img src="/images/cicd/git-idea/15155078116367.jpg" alt=""><br>打开，并点击合并，合并后会删除原分支<br><img src="/images/cicd/git-idea/15155083660048.jpg" alt=""><br><img src="/images/cicd/git-idea/15155084344884.jpg" alt=""><br><img src="/images/cicd/git-idea/15155084741351.jpg" alt=""><br>新建的问题和功能任务也自动关闭了<br><img src="/images/cicd/git-idea/15155085956790.jpg" alt=""></p>
<h4 id="从个人本地仓库更新远程中央仓库"><a href="#从个人本地仓库更新远程中央仓库" class="headerlink" title="从个人本地仓库更新远程中央仓库"></a>从个人本地仓库更新远程中央仓库</h4><p>个人本地仓库在idea中更新远程master分支，然后push到人个仓库的master分支，以做到更新远程仓库中的所有修改。<br><img src="/images/cicd/git-idea/15155470922065.jpg" alt=""><br><img src="/images/cicd/git-idea/15155473821411.jpg" alt=""><br><img src="/images/cicd/git-idea/15155514907571.jpg" alt=""><br><img src="/images/cicd/git-idea/15155515422837.jpg" alt=""><br>本地个人仓库已经和远程中央仓库同步了，现在把本地的更新推到个人远程仓库中<br><img src="/images/cicd/git-idea/15155520138332.jpg" alt=""><br><img src="/images/cicd/git-idea/15155520322469.jpg" alt=""><br>到web端查看个人仓库下的mater分支的代码，可以看到和远程仓库一样了<br><img src="/images/cicd/git-idea/15155627363690.jpg" alt=""><br>至此一个完成的fork-git工作流已经基本操作完成，下面我们讲讲fork工作流下的冲突怎么解决</p>
<h3 id="git冲突在idea中的操作"><a href="#git冲突在idea中的操作" class="headerlink" title="git冲突在idea中的操作"></a>git冲突在idea中的操作</h3><p>冲突主要是两人同时操作同一个文件的同一行，比如用A用户操作一下a-module.md这个文件第二行，B用户也操作了a-module.md这个文件第二行<br>A用户操作：<br>本地先开分支，在分支上做修改操作<br><img src="/images/cicd/git-idea/15155632305526.jpg" alt=""><br>提交到本地<br><img src="/images/cicd/git-idea/15155632787905.jpg" alt=""><br>push到远程个人仓库<br><img src="/images/cicd/git-idea/15155634089430.jpg" alt=""></p>
<p><img src="/images/cicd/git-idea/15155637661113.jpg" alt=""><br><img src="/images/cicd/git-idea/15155638141886.jpg" alt=""><br>一步一步住下操作，因为此处A用户来此仓库的管理员，所以A用户可以直接meger<br><img src="/images/cicd/git-idea/15155641181541.jpg" alt=""><br><img src="/images/cicd/git-idea/15155640795951.jpg" alt=""></p>
<p>B用户登录开新分支，并修改同一文件的同一行操作，<br><img src="/images/cicd/git-idea/15156399438941.jpg" alt=""><br><img src="/images/cicd/git-idea/15156401255810.jpg" alt=""><br><img src="/images/cicd/git-idea/15156401696299.jpg" alt=""><br><img src="/images/cicd/git-idea/15156402109597.jpg" alt=""></p>
<p>提交成功后，在web界面发送meger request请求远程中央仓库管理中A用户来合并，这时合并，就会提示冲突，修改B用户先解决冲突后再提交<br><img src="/images/cicd/git-idea/15156403774357.jpg" alt=""><br><img src="/images/cicd/git-idea/15156404351545.jpg" alt=""><br><img src="/images/cicd/git-idea/15156404735390.jpg" alt=""><br><img src="/images/cicd/git-idea/15156406262524.jpg" alt=""><br>远程仓库管理员(A用户)这时就有可以先跟提交在这个合并请求的讨论区进行讨论，让A用户自己先解决冲突后再push分支上来，然后本次提交会自动打开meger request按钮，如下是A用户查看请求合并的界面<br><img src="/images/cicd/git-idea/15156409283782.jpg" alt=""><br><img src="/images/cicd/git-idea/15156409577421.jpg" alt=""></p>
<p>然后B用户在本地先pull，远程中央仓库的最新版本，和本地的update-b-5分支进行合并操作<br><img src="/images/cicd/git-idea/15156412763743.jpg" alt=""><br><img src="/images/cicd/git-idea/15156413012578.jpg" alt=""><br>在pull远程仓库的更新时，在idea中会自动弹出冲突界面<br><img src="/images/cicd/git-idea/15156414180679.jpg" alt=""><br><img src="/images/cicd/git-idea/15156415094759.jpg" alt=""><br><img src="/images/cicd/git-idea/15156415898700.jpg" alt=""><br>push把本地update-b-5的分支到远程个人仓库，然后远程个人仓库会自动把之前提交到远程中央仓库的的合并请求的meger按钮打开，仓库管理就可以看到<br><img src="/images/cicd/git-idea/15156417663811.jpg" alt=""><br>到web界面，给远程中央仓库管理员发一个讨论，告诉管理员冲突已经解决了<br><img src="/images/cicd/git-idea/15156423668278.jpg" alt=""><br>远程中央仓库管理员A用户登录后就看到之前提交的meger request的按钮已经可以点击了，如下：<br><img src="/images/cicd/git-idea/15156425231210.jpg" alt=""><br><img src="/images/cicd/git-idea/15156426775275.jpg" alt="">/images/cicd/git-idea/<br>至此有关冲突的操作，基本上结束，后续的操作和上面正常操作方式一样，需要B用户把远程中央仓库的更新拉取到本地master分支，让本地master分支和远程仓库保持一致，然后push到远程的个人仓库的master分支，后再开发新功能都是基于master分支，再来开新分支进行功能开发，代码提交等。</p>
<p>文章写得比较繁琐，需要细看，如有问题请留言，或者发邮件troylc@163.com，一起交流学习。谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上一篇，gitlab在本地部署完后，我们就可以像拥抱github一下来体验一下gitlab的精妙之处，在git中我们针对代码的版本管理，有很多种玩法，如有集中式工作流，功能分支工作流，gitflow工作流，git-fork工作流。不同的玩法，有不同的操作；前三种都是基于
    
    </summary>
    
      <category term="CI/CD" scheme="http://www.troylc.cc/categories/CI-CD/"/>
    
      <category term="gitlab" scheme="http://www.troylc.cc/categories/CI-CD/gitlab/"/>
    
      <category term="IntelliJ IDEA" scheme="http://www.troylc.cc/categories/CI-CD/gitlab/IntelliJ-IDEA/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="gitlab" scheme="http://www.troylc.cc/tags/gitlab/"/>
    
      <category term="IntelliJIDEA" scheme="http://www.troylc.cc/tags/IntelliJIDEA/"/>
    
  </entry>
  
  <entry>
    <title>持续集成(CI)与持续交付(CD)之gitlab服务安装与配置</title>
    <link href="http://www.troylc.cc/CI-CD/gitlab/2018/01/04/cicd-gitlab.html"/>
    <id>http://www.troylc.cc/CI-CD/gitlab/2018/01/04/cicd-gitlab.html</id>
    <published>2018-01-04T09:26:15.000Z</published>
    <updated>2018-01-04T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建高质量应用程序并不是件容易的事情。要怎样做才能更快地创建用户高质量应用程序并且能够不断改进它们呢？这就是需要引入持续集成和持续交付（CI / CD）。团队里的人都在同一个产品上进行实时工作，所以在软件开发过程中使用CI时，你可以实现更快的速度、更好的稳定性和更强的可靠性。并且在开发过程的早期，开发人员能够发现和解决任何编码问题，使它们在成为下游主要问题之前得到纠正。这样可以降低错误代码导致的长期开发（和业务）的成本。实施持续交付的主要好处是能够加快应用程序的上市时间。使用CD的公司能大大增加他们的应用程序发行频率。在没有使用CD之前，应用程序发布的频率通常是几个月一次。然而现在使用CD，你可以一个星期发布一次、甚至每天发布多次应用。在竞争激烈的行业中，速度的提高将会使你处于主要优势。<br>本文主要来介绍安装gitlab服务,以及配置gitlab发送邮件、连接ldap、配置https证书认证，通过生成客户端公钥KEY，可以实现ssh免密码登录，设置全局忽律https证书以主自动保存用户名密码来实现https的免密码登录，实现CI/CD流程中的分支和合并的过程。</p>
<h2 id="GitLab-CE安装"><a href="#GitLab-CE安装" class="headerlink" title="GitLab-CE安装"></a>GitLab-CE安装</h2><p>gitlab安装方式有很多，官网提供了<a href="https://about.gitlab.com/installation/" target="_blank" rel="external">各个OS环境的安装文档</a>，为了便于编排、管理，我选择是通过docker方式来安装最新版的GitLab Community Edition.<br>参考官方docker安装文档：<a href="https://docs.gitlab.com/omnibus/docker/README.html" target="_blank" rel="external">https://docs.gitlab.com/omnibus/docker/README.html</a></p>
<h3 id="使用docker-compose部署gitlab服务"><a href="#使用docker-compose部署gitlab服务" class="headerlink" title="使用docker compose部署gitlab服务"></a>使用docker compose部署gitlab服务</h3><p> 编写docker-compose.yml文件  </p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">web:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">'gitlab/gitlab-ce:latest'</span></div><div class="line"><span class="attr">  restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">  container_name:</span> <span class="string">'gitlab'</span></div><div class="line"><span class="attr">  hostname:</span> <span class="string">'gitlab.troylc.com'</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="attr">    GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></div><div class="line">      external_url 'https://gitlab.troylc.com'</div><div class="line">      gitlab_rails['gitlab_shell_ssh_port'] = 10022</div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'80:80'</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'443:443'</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'10022:22'</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'/etc/localtime:/etc/localtime'</span>  <span class="comment">#配置时钟与宿主机同步</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'/data/devdata/gitlab/config:/etc/gitlab'</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'/data/devdata/gitlab/logs:/var/log/gitlab'</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'/data/devdata/gitlab/data:/var/opt/gitlab'</span></div></pre></td></tr></table></figure>
<p>在上面的yml中：</p>
<ul>
<li>image: 指定了使用gitlab-ce版本</li>
<li>container_name: 指定运行的容器名，指定以后比较方便操作</li>
<li>ports: 指定了需要暴露的端口，其中80和443为http/https端口，10022:22是ssh端口，由于22端口被主机的sshd所占用，所以要另外指定一个端口用来和容器内的ssh通信，值得注意的是，docker会自动配置iptables，添加暴露的端口到入站规则，添加dockerfile中指定的entrypoint端口到NAT转发规则中，也就是说不必再额外配置iptables，方便了我这种每次配置iptables都要现查命令和规则的人</li>
<li>environment: 指定环境变量，其中GITLAB_OMNIBUS_CONFIG是gitlab的安装配置，安装脚本会读取其值来进行安装前的配置。官方文档中有各配置项的用途和用法。</li>
<li>volumes: 指定了数据卷的配置，没有具体研究过各volumes的作用，只是从字面上猜测是持久化保存配置、日志、（未知）数据，防止重建容器后丢失这些数据</li>
</ul>
<p>在docker-compose.yml的路径下执行docker-compose.yml up -d，就会自动安装、运行Gitlab服务，通过 httpS://$hostIP测试是否正常运行</p>
<h3 id="gitlab服务配置"><a href="#gitlab服务配置" class="headerlink" title="gitlab服务配置"></a>gitlab服务配置</h3><h4 id="gitlab-设置HTTPS证书"><a href="#gitlab-设置HTTPS证书" class="headerlink" title="gitlab-设置HTTPS证书"></a>gitlab-设置HTTPS证书</h4><p>因为我们在docker-compose.yml设置GITLAB_OMNIBUS_CONFIG的参数external_url为https的访问方式,所以我们需要添加对应的证书文件<br>存放证书的目录是在/etc/gitlab/ssl目录下<br>参考官网配置https文档:<a href="https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https" target="_blank" rel="external">https://docs.gitlab.com/omnibus/settings/nginx.html#enable-https</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@docker-gitlab config]# pwd</div><div class="line">/data/devdata/gitlab/config</div><div class="line">[root@docker-gitlab config]# mkdir ssl</div><div class="line">[root@docker-gitlab config]# ll</div><div class="line">总用量 86</div><div class="line">-rw------- 1 root root 73047 12月 26 09:21 gitlab.rb</div><div class="line">-rw------- 1 root root  9659 12月 26 09:21 gitlab-secrets.json</div><div class="line">-rw------- 1 root root   227 12月 20 14:18 ssh_host_ecdsa_key</div><div class="line">-rw-r--r-- 1 root root   187 12月 20 14:18 ssh_host_ecdsa_key.pub</div><div class="line">-rw------- 1 root root   419 12月 20 14:18 ssh_host_ed25519_key</div><div class="line">-rw-r--r-- 1 root root   107 12月 20 14:18 ssh_host_ed25519_key.pub</div><div class="line">-rw------- 1 root root  1679 12月 20 14:18 ssh_host_rsa_key</div><div class="line">-rw-r--r-- 1 root root   407 12月 20 14:18 ssh_host_rsa_key.pub</div><div class="line">drwxr-xr-x 1 root root  4385 12月 20 13:58 ssl</div><div class="line">drwxr-xr-x 1 root root     0 12月 20 14:23 trusted-certs</div><div class="line">[root@docker-gitlab config]# ll ssl #把生成的自签名的证书放到此目录下</div><div class="line">总用量 6</div><div class="line">-rw-r--r-- 1 root root 1627 12月 20 13:58 gitlab.troylc.com.crt</div><div class="line">-rw-r--r-- 1 root root 1054 12月 20 13:58 gitlab.troylc.com.csr</div><div class="line">-rw-r--r-- 1 root root 1704 12月 20 13:58 gitlab.troylc.com.key</div><div class="line">[root@docker-gitlab config]#</div></pre></td></tr></table></figure>
<p>怎么生成自签名的证书，请参考<a href="http://www.troylc.cc/certificate/nginx/macOs/2017/11/27/nginx-chrome-ce.html">自签根证书和多子域名证书在浏览器上变安全绿</a></p>
<h4 id="gitlab-设置邮件通知配置"><a href="#gitlab-设置邮件通知配置" class="headerlink" title="gitlab-设置邮件通知配置"></a>gitlab-设置邮件通知配置</h4><p>修改容器中的配置文件/etc/gitlab/gitlab.rb，参考官网配置文档：<a href="https://docs.gitlab.com/omnibus/settings/smtp.html#smtp-settings" target="_blank" rel="external">https://docs.gitlab.com/omnibus/settings/smtp.html#smtp-settings</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@docker-gitlab config]# docker exec -it gitlab vim /etc/gitlab/gitlab.rb</div><div class="line">#修改发件人邮箱地址</div><div class="line">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;gitlab@troylc.com&apos;</div><div class="line"></div><div class="line">#配置gitlab发送邮件信息</div><div class="line">gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class="line">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.163.com&quot;</div><div class="line">gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class="line">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;troylc@163.com&quot;</div><div class="line">gitlab_rails[&apos;smtp_password&apos;] = &quot;邮箱密码&quot;</div><div class="line">gitlab_rails[&apos;smtp_domain&apos;] = &quot;163.com&quot;</div><div class="line">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class="line">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class="line">gitlab_rails[&apos;smtp_tls&apos;] = false</div><div class="line">:wq</div><div class="line">[root@docker-gitlab config]# docker exec -it gitlab gitlab-ctl stop #停止ctl服务</div><div class="line">[root@docker-gitlab config]# docker exec -it gitlab gitlab-ctl reconfigure #重新加载配置</div><div class="line">[root@docker-gitlab config]# docker exec -it gitlab gitlab-ctl start #重新ctl启动</div></pre></td></tr></table></figure>
<h4 id="gitlab-设置LDAP用户同步配置"><a href="#gitlab-设置LDAP用户同步配置" class="headerlink" title="gitlab-设置LDAP用户同步配置"></a>gitlab-设置LDAP用户同步配置</h4><p>修改容器中的配置文件/etc/gitlab/gitlab.rb，参考官网配置文档:<a href="https://docs.gitlab.com/omnibus/settings/ldap.html" target="_blank" rel="external">https://docs.gitlab.com/omnibus/settings/ldap.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">gitlab_rails[&apos;ldap_enabled&apos;] = true</div><div class="line"></div><div class="line">###! **remember to close this block with &apos;EOS&apos; below**</div><div class="line"> gitlab_rails[&apos;ldap_servers&apos;] = YAML.load &lt;&lt;-&apos;EOS&apos;</div><div class="line">   main: # &apos;main&apos; is the GitLab &apos;provider ID&apos; of this LDAP server</div><div class="line">     label: &apos;TROYLC LDAP&apos;</div><div class="line">     host: &apos;172.19.61.223&apos; #ldap服务器IP地址</div><div class="line">     port: 10389 #ldap端口</div><div class="line">     uid: &apos;cn&apos; </div><div class="line">     bind_dn: &apos;uid=admin,ou=system&apos;  #管理员登录用户名</div><div class="line">     password: &apos;ladp密码&apos;  #登录密码</div><div class="line">     encryption: &apos;plain&apos; # &quot;start_tls&quot; or &quot;simple_tls&quot; or &quot;plain&quot;</div><div class="line">     verify_certificates: true</div><div class="line">     active_directory: false</div><div class="line">     allow_username_or_email_login: false</div><div class="line">     block_auto_created_users: false</div><div class="line">     base: &apos;ou=users,dc=troylc,dc=com&apos;</div><div class="line">     user_filter: &apos;&apos;</div><div class="line">     attributes:</div><div class="line">      username: [&apos;cn&apos;]</div><div class="line">      email:    [&apos;mail&apos;]</div><div class="line">      name:      &apos;sn&apos;</div><div class="line">EOS</div></pre></td></tr></table></figure>
<h3 id="git客户端安装与配置"><a href="#git客户端安装与配置" class="headerlink" title="git客户端安装与配置"></a>git客户端安装与配置</h3><p>从官网下载对应系统的git客户端:<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br><img src="/images/cicd/gitlab/15151157733275.jpg" alt=""><br>安装完成后，就会有一个git bash在windows系统下<br><img src="/images/cicd/gitlab/15151167378745.jpg" alt=""></p>
<h4 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH-KEY"></a>配置SSH-KEY</h4><p>为方便于客户端以ssh方式clone，push等命令时免输入用户名密码。<br>官网参考：<a href="https://docs.gitlab.com/ce/ssh/README.html" target="_blank" rel="external">https://docs.gitlab.com/ce/ssh/README.html</a></p>
<ul>
<li>登录git客户端所在主机的bash，注意登录的用户名</li>
<li>确认是否有现成ssh公钥,如果有直接查看,目前我已经是生成过，如下图</li>
</ul>
<p><img src="/images/cicd/gitlab/15151175616117.jpg" alt=""></p>
<ul>
<li>如果没有，创建一个 SSH key</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096</div></pre></td></tr></table></figure>
<p>所有的输入请直接回车，<br>然后在用户的.ssh/目录下有id_rsd.pub这文件，和第二步一样，查看并复制里面的内容，到gitlab服务器下，用自己的用户名密码登录进入后。<br><strong>点击用户头像-&gt;setting-&gt;SSH Keys,把刚才复制的内容，填写到KEY的文本框中保存。</strong><br><img src="/images/cicd/gitlab/15151264335404.jpg" alt=""></p>
<h4 id="配置访问git仓库时发生SSL证书错误"><a href="#配置访问git仓库时发生SSL证书错误" class="headerlink" title="配置访问git仓库时发生SSL证书错误"></a>配置访问git仓库时发生SSL证书错误</h4><p>有时候访问gitlab仓库时提示证书认证错误，为了解决这个问题，可以在客户端的git环境中执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global http.sslverify “false”</div></pre></td></tr></table></figure>
<h4 id="配置git客户端全局记住用户名密码"><a href="#配置git客户端全局记住用户名密码" class="headerlink" title="配置git客户端全局记住用户名密码"></a>配置git客户端全局记住用户名密码</h4><p>如果上面的方式，觉得太繁琐，可以在客户端设置保存用户名密码，这样也可以每次与服务端交互操作时，也不用输入用户密码。<br>只需在客户执行一下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global credential.helper store</div></pre></td></tr></table></figure>
<p>第一输入用户名密码后，会生成~/.git-credentials文件并保存用户名密码</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此gitlab有服务端与客户端已经准备就绪，下一步我会针对git的fork工作流进行一次讲解与分析</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建高质量应用程序并不是件容易的事情。要怎样做才能更快地创建用户高质量应用程序并且能够不断改进它们呢？这就是需要引入持续集成和持续交付（CI / CD）。团队里的人都在同一个产品上进行实时工作，所以在软件开发过程中使用CI时，你可以实现更快的速度、更好的稳定性和更强的可靠性
    
    </summary>
    
      <category term="CI/CD" scheme="http://www.troylc.cc/categories/CI-CD/"/>
    
      <category term="gitlab" scheme="http://www.troylc.cc/categories/CI-CD/gitlab/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="gitlab" scheme="http://www.troylc.cc/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>自签根证书和多子域名证书在浏览器上变安全绿</title>
    <link href="http://www.troylc.cc/certificate/nginx/macOs/2017/11/27/nginx-chrome-ce.html"/>
    <id>http://www.troylc.cc/certificate/nginx/macOs/2017/11/27/nginx-chrome-ce.html</id>
    <published>2017-11-27T09:26:15.000Z</published>
    <updated>2017-11-27T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很多情况下，我们有内部开发环境中，希望用到https访问，并且如果没有正式的证书的话，都是用自签名的证书来进行一根多子的签发不同域名的证书。然后通过在浏览器配置一个根证书就可以得到多个子域名的https访问的证书安全绿的认证。<br>本文主要是用sh脚本通过openssl来生成一个自签名的根证书，然后通过这个根证书，签发出多个子域名的子证书，通过web服务器nginx上进行自签名证书的https的配置，在浏览器上通过设置信任证书可以让我们自签的证书也变成安全绿。</p>
<h1 id="自签证书的脚本编写"><a href="#自签证书的脚本编写" class="headerlink" title="自签证书的脚本编写"></a>自签证书的脚本编写</h1><p>自签证书目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">├── certificate  <span class="comment">#存放两个子域名证书的目录</span></div><div class="line">│   ├── dev.troylc.com.cn.crt</div><div class="line">│   ├── dev.troylc.com.cn.csr</div><div class="line">│   ├── dev.troylc.com.cn.key</div><div class="line">│   ├── cloud.troylc.com.cn.crt</div><div class="line">│   ├── cloud.troylc.com.cn.csr</div><div class="line">│   └── cloud.troylc.com.cn.key</div><div class="line">├── createRootCA.sh   <span class="comment">#根证书生成脚本</span></div><div class="line">├── createselfsignedcertificate-dev.sh     <span class="comment">#dev子域名证书生成脚本</span></div><div class="line">├── createselfsignedcertificate-cloud.sh   <span class="comment">#cloud子域名证书生成脚本</span></div><div class="line">├── readme.md   <span class="comment">#说明文件</span></div><div class="line">├── rootcertificate     <span class="comment">#存放根证书的目录</span></div><div class="line">│   ├── cloudrootCA.key</div><div class="line">│   ├── cloudrootCA.pem</div><div class="line">│   └── cloudrootCA.srl</div><div class="line">├── server.csr.cnf  <span class="comment">#生成子证书需要的CN配置文件</span></div><div class="line">├── v3-dev.ext  <span class="comment">#生成子证书需要的DNS域名配置文件</span></div><div class="line">└── v3-cloud.ext  <span class="comment">#生成子证书需要的DNS域名配置文件</span></div></pre></td></tr></table></figure>
<h2 id="根证书脚本内容"><a href="#根证书脚本内容" class="headerlink" title="根证书脚本内容"></a>根证书脚本内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">mkdir rootcertificate/</div><div class="line">openssl genrsa -des3 -out rootcertificate/cloudrootCA.key 2048</div><div class="line">openssl req -x509 -new -nodes -key rootcertificate/cloudrootCA.key -sha256 -days 3650 -out rootcertificate/cloudrootCA.pem</div></pre></td></tr></table></figure>
<p>运行这个脚本后会首先让我们设置一个证书的密码。然后让我们输入CN的信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">troylc@zqy: ls</div><div class="line">certificate                          createselfsignedcertificate-cloud.sh readme.md                            server.csr.cnf                       v3-dev.ext</div><div class="line">createRootCA.sh                      createselfsignedcertificate-dev.sh   rootcertificate                      v3-cloud.ext</div><div class="line">troylc@zqy: ./createRootCA.sh </div><div class="line">mkdir: rootcertificate/: File exists</div><div class="line">Generating RSA private key, 2048 bit long modulus</div><div class="line">...................................................+++</div><div class="line">..................................+++</div><div class="line">e is 65537 (0x10001)</div><div class="line">Enter pass phrase <span class="keyword">for</span> rootcertificate/cloudrootCA.key:   <span class="comment">#输入密码 我这里全是123456</span></div><div class="line">Verifying - Enter pass phrase <span class="keyword">for</span> rootcertificate/cloudrootCA.key:   <span class="comment">#输入确认密码 123456</span></div><div class="line">Enter pass phrase <span class="keyword">for</span> rootcertificate/cloudrootCA.key:   <span class="comment">#输入上面的密码验证 123456</span></div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter <span class="string">'.'</span>, the field will be left blank.</div><div class="line">-----   <span class="comment">#以下输入的内容需要和生成子证书所需要的CN配置文件server.csr.cnf 中的CN中的内容一致，如果不一致在浏览器上验证时会报证书与签发的信息不一致。</span></div><div class="line">Country Name (2 letter code) []:CN  </div><div class="line">State or Province Name (full name) []:Beijing</div><div class="line">Locality Name (eg, city) []:Beijing</div><div class="line">Organization Name (eg, company) []:cloud</div><div class="line">Organizational Unit Name (eg, section) []:troylc</div><div class="line">Common Name (eg, fully qualified host name) []:*.troylc.com.cn</div><div class="line">Email Address []:troylc@163.com</div><div class="line">troylc@zqy: ll rootcertificate </div><div class="line">total 16</div><div class="line">-rw-r--r--  1 troylc  wheel   1.7K Nov 25 23:22 cloudrootCA.key</div><div class="line">-rw-r--r--  1 troylc  wheel   1.3K Nov 25 23:24 cloudrootCA.pem</div></pre></td></tr></table></figure>
<h2 id="子证书生成脚本"><a href="#子证书生成脚本" class="headerlink" title="子证书生成脚本"></a>子证书生成脚本</h2><p>在生成子证书之前，需要增加三个配置文件和两个生成子域名的脚本文件 </p>
<h3 id="子证书配置文件"><a href="#子证书配置文件" class="headerlink" title="子证书配置文件"></a>子证书配置文件</h3><p>一个就是上面提到的server.csr.cnf生成子证书的CN配置文件，另两个是两个子域名的配置文件v3-dev.ext、v3-cloud.ext</p>
<ul>
<li>server.csr.cnf文件内容如下  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[req]</div><div class="line">default_bits = 2048</div><div class="line">prompt = no</div><div class="line">default_md = sha256</div><div class="line">distinguished_name = dn</div><div class="line"></div><div class="line">[dn]</div><div class="line">C= CN</div><div class="line">ST= Beijing</div><div class="line">L= Beijing</div><div class="line">O= cloud</div><div class="line">OU= troylc</div><div class="line">emailAddress= troylc@topsec.com.cn</div><div class="line">CN = *.troylc.com.cn</div></pre></td></tr></table></figure>
<ul>
<li>v3-dev.ext和v3-cloud.ext文件内容如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># v3-dev.ext:</div><div class="line">authorityKeyIdentifier=keyid,issuer</div><div class="line">basicConstraints=CA:FALSE</div><div class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</div><div class="line">subjectAltName = @alt_names</div><div class="line"></div><div class="line">[alt_names]</div><div class="line">DNS.1 = dev.troylc.com.cn</div><div class="line"></div><div class="line"># v3-cloud.ext</div><div class="line">authorityKeyIdentifier=keyid,issuer</div><div class="line">basicConstraints=CA:FALSE</div><div class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</div><div class="line">subjectAltName = @alt_names</div><div class="line"></div><div class="line">[alt_names]</div><div class="line">DNS.1 = cloud.troylc.com.cn</div></pre></td></tr></table></figure>
<h3 id="子证书的生成脚本"><a href="#子证书的生成脚本" class="headerlink" title="子证书的生成脚本"></a>子证书的生成脚本</h3><p>一个生成dev.troylc.com.cn域名的证书脚本文件，一个生成cloud.troylc.com.cn域名的证书脚本文件  </p>
<ul>
<li>createselfsignedcertificate-dev.sh内容如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">openssl req -new -sha256 -nodes -out certificate/dev.troylc.com.cn.csr -newkey rsa:2048 -keyout certificate/dev.troylc.com.cn.key -config &lt;( cat server.csr.cnf )</div><div class="line"></div><div class="line">openssl x509 -req -<span class="keyword">in</span> certificate/dev.troylc.com.cn.csr -CA rootcertificate/cloudrootCA.pem -CAkey rootcertificate/cloudrootCA.key -CAcreateserial -out certificate/dev.troylc.com.cn.crt -days 3650 -sha256 -extfile v3-dev.ext</div></pre></td></tr></table></figure>
<ul>
<li>createselfsignedcertificate-cloud.sh内容如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line">openssl req -new -sha256 -nodes -out certificate/cloud.troylc.com.cn.csr -newkey rsa:2048 -keyout certificate/cloud.troylc.com.cn.key -config &lt;( cat server.csr.cnf )</div><div class="line"></div><div class="line">openssl x509 -req -<span class="keyword">in</span> certificate/cloud.troylc.com.cn.csr -CA rootcertificate/cloudrootCA.pem -CAkey rootcertificate/cloudrootCA.key -CAcreateserial -out certificate/cloud.troylc.com.cn.crt -days 3650 -sha256 -extfile v3-cloud.ext</div></pre></td></tr></table></figure>
<h3 id="运行子证书生成脚本"><a href="#运行子证书生成脚本" class="headerlink" title="运行子证书生成脚本"></a>运行子证书生成脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">troylc@zqy: ls</div><div class="line">certificate                          createselfsignedcertificate-cloud.sh readme.md                            server.csr.cnf                       v3-dev.ext</div><div class="line">createRootCA.sh                      createselfsignedcertificate-dev.sh   rootcertificate                      v3-cloud.ext</div><div class="line">troylc@zqy: ./createselfsignedcertificate-dev.sh </div><div class="line">Generating a 2048 bit RSA private key</div><div class="line">...+++</div><div class="line">.............................................+++</div><div class="line">writing new private key to <span class="string">'certificate/dev.troylc.com.cn.key'</span></div><div class="line">-----</div><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=cloud/OU=troylc/emailAddress=troylc@topsec.com.cn/CN=*.troylc.com.cn</div><div class="line">Getting CA Private Key</div><div class="line">Enter pass phrase <span class="keyword">for</span> rootcertificate/cloudrootCA.key:</div><div class="line">troylc@zqy: ll certificate </div><div class="line">total 24</div><div class="line">-rw-r--r--  1 troylc  wheel   1.6K Nov 25 23:49 dev.troylc.com.cn.crt</div><div class="line">-rw-r--r--  1 troylc  wheel   1.0K Nov 25 23:49 dev.troylc.com.cn.csr</div><div class="line">-rw-r--r--  1 troylc  wheel   1.7K Nov 25 23:49 dev.troylc.com.cn.key</div><div class="line">troylc@zqy: ./createselfsignedcertificate-cloud.sh </div><div class="line">Generating a 2048 bit RSA private key</div><div class="line">......................................................................................+++</div><div class="line">.................................................+++</div><div class="line">writing new private key to <span class="string">'certificate/cloud.troylc.com.cn.key'</span></div><div class="line">-----</div><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=cloud/OU=troylc/emailAddress=troylc@topsec.com.cn/CN=*.troylc.com.cn</div><div class="line">Getting CA Private Key</div><div class="line">Enter pass phrase <span class="keyword">for</span> rootcertificate/cloudrootCA.key:</div><div class="line">troylc@zqy: ll certificate                        </div><div class="line">total 48</div><div class="line">-rw-r--r--  1 troylc  wheel   1.6K Nov 25 23:49 cloud.troylc.com.cn.crt</div><div class="line">-rw-r--r--  1 troylc  wheel   1.0K Nov 25 23:49 cloud.troylc.com.cn.csr</div><div class="line">-rw-r--r--  1 troylc  wheel   1.7K Nov 25 23:49 cloud.troylc.com.cn.key</div><div class="line">-rw-r--r--  1 troylc  wheel   1.6K Nov 25 23:49 dev.troylc.com.cn.crt</div><div class="line">-rw-r--r--  1 troylc  wheel   1.0K Nov 25 23:49 dev.troylc.com.cn.csr</div><div class="line">-rw-r--r--  1 troylc  wheel   1.7K Nov 25 23:49 dev.troylc.com.cn.key</div></pre></td></tr></table></figure>
<h1 id="nginx配置https"><a href="#nginx配置https" class="headerlink" title="nginx配置https"></a>nginx配置https</h1><p>nginx的默认配置default.conf中做如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">upstream nexusserver &#123;</div><div class="line"># Tomcat is listening on default 8090 port</div><div class="line">#    ip_hash;</div><div class="line">#    server tscweb1:9518 ;</div><div class="line">    server nexus:8081 fail_timeout=0;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 443 ssl http2;</div><div class="line">        server_name dev.troylc.com.cn; #换成你的域名</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate /etc/nginx/certificate/dev.troylc.com.cn.crt; #证书文件</div><div class="line">        ssl_certificate_key /etc/nginx/certificate/dev.troylc.com.cn.key; #秘钥文件</div><div class="line">        ssl_session_timeout 5m;</div><div class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">        ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line">        ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;   ##访问网站后，由浏览器方记住该域名是受保护的https://，以后的http://访问不用走上边的return</div><div class="line"></div><div class="line">        location /nexus/ &#123;</div><div class="line">            proxy_pass  http://nexusserver/nexus/;</div><div class="line">            proxy_redirect   off;</div><div class="line">            proxy_set_header   Host             $host;</div><div class="line">            proxy_set_header   X-Real-IP        $remote_addr;</div><div class="line">            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class="line">            proxy_set_header   X-Frame-Options  DENY;</div><div class="line">            proxy_connect_timeout 60;</div><div class="line">            proxy_read_timeout 3600s;</div><div class="line">            proxy_set_header   X-Forwarded-Proto $scheme;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       location /home &#123;try_files $uri /index.html;&#125;</div><div class="line"></div><div class="line">       location = / &#123;</div><div class="line">           rewrite ^ /home;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       error_page  404              /404.html;</div><div class="line"></div><div class="line">       # redirect server error pages to the static page /50x.html</div><div class="line">       #</div><div class="line">       error_page   500 502 503 504  /50x.html;</div><div class="line">       location = /50x.html &#123;</div><div class="line">           root   /usr/share/nginx/html;</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置上面的配置后，重启启动nginx,让以上配置生成效</p>
<h1 id="浏览器验证"><a href="#浏览器验证" class="headerlink" title="浏览器验证"></a>浏览器验证</h1><p>当nginx启动后，我们需要去浏览器验证，因为是自签名的证书，所以需要把自签的根证书导入到系统的证书管理的信任证书中去，我这把mac电脑的配置。<br>在程序中找到钥匙串访问-系统-文件-导入项目找到我们上面生成的根证书中的cloudrootCA.pem文件导入进来，如下图：<br><img src="/images/certificate/15116263436759.jpg" alt=""><br>浏览器上访问nginx提供的服务<br><img src="/images/certificate/15116697191126.png" alt=""></p>
<p><img src="/images/certificate/15116696692303.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多情况下，我们有内部开发环境中，希望用到https访问，并且如果没有正式的证书的话，都是用自签名的证书来进行一根多子的签发不同域名的证书。然后通过在浏览器配置一个根证书就可以得到多个子域名的https访问的证书安全绿的认证。&lt;br&gt;本文主要是用sh脚本通过openssl
    
    </summary>
    
      <category term="certificate" scheme="http://www.troylc.cc/categories/certificate/"/>
    
      <category term="nginx" scheme="http://www.troylc.cc/categories/certificate/nginx/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/certificate/nginx/macOs/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="certificate nginx" scheme="http://www.troylc.cc/tags/certificate-nginx/"/>
    
      <category term="chrome" scheme="http://www.troylc.cc/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>docker容器及swarm集群之compose健康检查与容器依赖</title>
    <link href="http://www.troylc.cc/docker-swarm/docker/docker-compose/2017/10/27/docker-swarm-stack-compose-order.html"/>
    <id>http://www.troylc.cc/docker-swarm/docker/docker-compose/2017/10/27/docker-swarm-stack-compose-order.html</id>
    <published>2017-10-27T09:26:15.000Z</published>
    <updated>2017-10-27T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很多情况下，docker容器在compose中的启动顺序，决定了docker容器的健康状态，如果启动时所依赖的容器没有启动，所依赖的容器也会出现问题，这样整体应用都会引起连锁反应。虽然docker可以使用<a href="https://docs.docker.com/compose/compose-file/#depends_on" target="_blank" rel="external">depends_on</a>选项控制服务启动顺序 。撰写总是依赖顺序；但是，Compose不会等到容器“准备好”也就是说他不会等待依赖的容器完全运行完，再启动当前容器，而仅只是在所依赖的容器之前运行。<br>最好的解决方案是在启动时或者是由于任何原因丢失连接时，在应用程序代码中执行检查与尝试连接所依赖的服务的。但是，如果您不需要如此级别的弹性检查，根据环境，可以有以下几种解决方案：</p>
<h1 id="compose-部署单机容器启动顺序解决方案"><a href="#compose-部署单机容器启动顺序解决方案" class="headerlink" title="compose 部署单机容器启动顺序解决方案"></a>compose 部署单机容器启动顺序解决方案</h1><p>在compose2.1之后的文档规范中，提供了通过一个健康检查来解决两个服务之前的依赖。如：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  web:</span></div><div class="line"><span class="attr">    images:</span> <span class="string">nodejs</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="attr">      db:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">service_healthy</span></div><div class="line"><span class="attr">      redis:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">service_started</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">redis</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 6379 || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">  db:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 3306 || exit 1"</span><span class="string">]</span></div></pre></td></tr></table></figure>
<ul>
<li>说明：<br>这里的redis和db,需要在基础镜像中添加nc命令，让这两个服务容器启动时一直等到具体服务端口启动，再来改变容器的健康状态。所依赖的服务会根据被依赖服务的健康状态来决定启动自己的服务。这就是单机的情况下来操作容器的启动顺序。</li>
</ul>
<h1 id="compose-部署swarm集群的容器启动顺序解决方案"><a href="#compose-部署swarm集群的容器启动顺序解决方案" class="headerlink" title="compose 部署swarm集群的容器启动顺序解决方案"></a>compose 部署swarm集群的容器启动顺序解决方案</h1><p>很多时候我们的服务是一堆服务器组成的集群模式，这里主要解决一下swarm mode模式下的方案，诚然<a href="https://docs.docker.com/compose/startup-order/" target="_blank" rel="external">官方对于容器的启动顺序的解决方案</a>是：</p>
<ul>
<li>Use a tool such as <a href="https://github.com/vishnubob/wait-for-it" target="_blank" rel="external">wait-for-it</a>, <a href="https://github.com/jwilder/dockerize" target="_blank" rel="external">dockerize</a>, or sh-compatible <a href="https://github.com/Eficode/wait-for" target="_blank" rel="external">wait-for</a>. These are small wrapper scripts which you can include in your application’s image and will poll a given host and port until it’s accepting TCP connections.  </li>
</ul>
<p>官方主要说明的是第一种解决方案wait-for-it，下面主要是解决第二种方案dockerize，这种方案也是需要从github上下载dockerize工具来进行操作，镜像中需要把dockerize工具build到具体的镜像中，让容器运行时，可以通过dockerize的工具来进行检查。以下是具体的两个应用服务，需要依赖mysql、kafka、redis。web服务nginx依赖具体的两个应用服务。具体compose文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">"3"</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  zookeeper:</span>       <span class="comment">#zookeeper服务，主要是协助kafka消息中心的</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">zookeeper:3.4.9</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 2181 || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">2</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>    <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"></div><div class="line"><span class="attr">  kafka:</span>      <span class="comment">#kafka消息中心，</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">kafka:0.10.1.0</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">'KAFKA_ADVERTISED_HOST_NAME=kafka'</span></div><div class="line"><span class="bullet">      -</span> <span class="string">'KAFKA_ADVERTISED_PORT=9092'</span></div><div class="line"><span class="bullet">      -</span> <span class="string">'KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181'</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"9092:9092"</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 9092 || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">2</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>    <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"><span class="attr">    command:</span> <span class="string">["dockerize","-wait","tcp://zookeeper:2181","-timeout","300s","start-kafka.sh"]</span></div><div class="line"></div><div class="line"><span class="attr">  mysql:</span>    <span class="comment"># 数据库服务</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">mysql:latest</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      placement:</span></div><div class="line"><span class="attr">        constraints:</span></div><div class="line"><span class="bullet">          -</span> <span class="string">"node.role==manager"</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/nfs-data/troylc/mysql:/var/lib/mysql</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"MYSQL_ROOT_PASSWORD=troylc"</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"3306:3306"</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 3306 || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">1</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>    <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"></div><div class="line"><span class="attr">  redis:</span>    <span class="comment"># redis服务</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">redis:latest</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"nc -v -w 5 localhost -z 6379 || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">1</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>    <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"></div><div class="line"><span class="attr">xxxservice:</span>     </div><div class="line"><span class="attr">    image:</span> <span class="attr">tcr:5000/myhub/dmpservice:2.3.4.1</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">3</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TOMCAT_PASS=xxxservice"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    command:</span> <span class="string">["dockerize","-wait","tcp://mysql:3306","-wait","tcp://redis:6379","-wait","tcp://kafka:9092","-timeout","300s","/run.sh"]</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:8080/xxxservice-web/"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">1</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>   <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line">      </div><div class="line"><span class="attr">  upfileservice:</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">tcr:5000/myhub/ufile:2.2.4</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmp-net</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TOMCAT_PASS=upfileservice"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/nfs-data/troylc/file:/nfs-data/troylc/file</span></div><div class="line"><span class="attr">    command:</span> <span class="string">["dockerize","-wait","tcp://mysql:3306","-timeout","300s","catalina.sh",</span> <span class="string">"run"</span><span class="string">]</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:8080/upfileservice-web/"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">1</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>   <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"></div><div class="line"><span class="attr">  nginx:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span>   <span class="comment">#定义 replicated 模式的服务的复本数量</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        parallelism:</span> <span class="number">1</span>    <span class="comment">#每次更新复本数量</span></div><div class="line"><span class="attr">        delay:</span> <span class="number">2</span><span class="string">s</span>       <span class="comment">#每次更新间隔</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">on-failure</span>     <span class="comment">#定义服务的重启条件</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dmpbase_dmp-net</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/nfs-data/troylc/data:/troylc/data</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"TZ=Asia/Shanghai"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"192.168.100.202:50000:50000"</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"192.168.100.202:443:443"</span></div><div class="line"><span class="attr">    command:</span> <span class="string">["dockerize","-wait","http://xxxservice:8080","-wait","http://upfileservice:8080","-timeout","300s","nginx","-g","daemon</span> <span class="string">off;"]</span></div><div class="line"><span class="attr">    healthcheck:</span></div><div class="line"><span class="attr">      test:</span> <span class="string">["CMD-SHELL",</span> <span class="string">"dockerize -wait tcp://localhost:443 -timeout 3s || exit 1"</span><span class="string">]</span></div><div class="line"><span class="attr">      interval:</span> <span class="number">1</span><span class="string">m30s</span> <span class="comment">#健康检查的时间间隔，默认为 30s。</span></div><div class="line"><span class="attr">      timeout:</span> <span class="number">15</span><span class="string">s</span>   <span class="comment">#健康检查的超时时间，默认为 30s。</span></div><div class="line"><span class="attr">      retries:</span> <span class="number">3</span>    <span class="comment">#连续几次健康检查失败即认为容器不健康，默认为 3。</span></div><div class="line"></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  dmp-net:</span></div><div class="line"><span class="attr">    driver:</span> <span class="string">overlay</span></div><div class="line"><span class="attr">    ipam:</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="attr">        - subnet:</span> <span class="string">"10.0.1.0/24"</span></div></pre></td></tr></table></figure>
<ul>
<li>从文档中我们可以看出，kafka依赖了zookeeper,xxxservice服务依赖了mysql、redis、kafka，upfileservice依赖了mysql。nginx服务依赖了xxxservice和upfileservice这两个应用服务。</li>
</ul>
<h1 id="容器启动顺序问题"><a href="#容器启动顺序问题" class="headerlink" title="容器启动顺序问题"></a>容器启动顺序问题</h1><p>有时候容器的服务启动时，服务的端口启动了，但是具体的服务，还没有完全启动，这同样会操作所依赖的服务启动时，有可能出错。所以最好的解决方案是在具体的所需要依赖的服务中去自己构建所需要依赖服务的健康检查以及连通性检查。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多情况下，docker容器在compose中的启动顺序，决定了docker容器的健康状态，如果启动时所依赖的容器没有启动，所依赖的容器也会出现问题，这样整体应用都会引起连锁反应。虽然docker可以使用&lt;a href=&quot;https://docs.docker.com/c
    
    </summary>
    
      <category term="docker swarm" scheme="http://www.troylc.cc/categories/docker-swarm/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker-swarm/docker/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/categories/docker-swarm/docker/docker-compose/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker及swarm-mode之docker-ui实践-portainer</title>
    <link href="http://www.troylc.cc/docker/2017/09/16/docker-ui-portainer.html"/>
    <id>http://www.troylc.cc/docker/2017/09/16/docker-ui-portainer.html</id>
    <published>2017-09-16T09:26:15.000Z</published>
    <updated>2017-09-16T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>portainer（基于 Go） 是一个轻量级的、开放源码的轻量级管理界面，可让您轻松管理DOCKER主机或DOCKER-SWARM集群,经过对portainer的部署与操作，个人觉得满足基本docker操作的需求，portainer支持容器、镜像、volume、network的管理，支持权限分配，支持应用容器模板操作、支持集群的简单管理，支持TLS的证书认证，支持本地用户与组和LDAP的权限管理；而且该软件轻量，消耗资源少。</p>
<p>参考：<br>github: <a href="https://github.com/portainer/portainer" target="_blank" rel="external">https://github.com/portainer/portainer</a>  </p>
<p>doc: <a href="http://portainer.readthedocs.io/en/latest/" target="_blank" rel="external">http://portainer.readthedocs.io/en/latest/</a>   </p>
<p>#部署portainer<br>本篇主要是在swarm mode的环境上，通过部署一个portainer的service来运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master ~]<span class="comment"># docker service create \</span></div><div class="line">&gt;     --name portainer \</div><div class="line">&gt;     --publish 9000:9000 \</div><div class="line">&gt;     --constraint <span class="string">'node.role == manager'</span> \</div><div class="line">&gt;     --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/var/run/docker.sock,dst=/var/run/docker.sock \</div><div class="line">&gt;     --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/nfs-data/swarmui/data,dst=/data \</div><div class="line">&gt;     portainer/portainer:latest \</div><div class="line">&gt;     -H unix:///var/run/docker.sock</div><div class="line">ykapxftktk0xdsdgrftgfvht</div><div class="line">[root@docker-master ~]<span class="comment"># docker service ps portainer</span></div><div class="line">ID            NAME         IMAGE                       NODE           DESIRED STATE  CURRENT STATE         ERROR  PORTS</div><div class="line">ykapxftktk0x  portainer.1  portainer/portainer:latest  docker-master  Running        Running 19 hours ago</div></pre></td></tr></table></figure>
<p><strong>相关参数：</strong></p>
<ul>
<li><code>--host，-H</code>：Docker守护程序端点</li>
<li><code>--bind，-p</code>：地址和端口提供Portainer（默认值：:9000）</li>
<li><code>--data，-d</code>：Portainer数据将被存储的目录（默认：/data在Linux上，C:\data在Windows上）</li>
<li><code>--tlsverify</code>：支持TLS（默认false）</li>
<li><code>--tlscacert</code>：CA路径（默认值：/certs/ca.pem在Linux上，C:\certs\ca.pem在Windows上）</li>
<li><code>--tlscert</code>：的路径TLS证书文件（默认：/certs/cert.pem，C:\certs\cert.pem在Windows上）</li>
<li><code>--tlskey</code>：TLS键的路径（默认值：/certs/key.pem，C:\certs\key.pem在Windows上）</li>
<li><code>--no-analytics</code>：禁用分析（默认值：false）</li>
<li><code>--no-auth</code>：禁止内部认证机制（默认值：false）</li>
<li><code>--external-endpoints</code>：通过指定文件中JSON端点源的路径来启用外部端点管理</li>
<li><code>--sync-interval</code>：两个端点的同步请求之间的时间间隔表示为一个字符串，例如30s，5m，1h…利用所支持的time.ParseDuration方法（默认：60s）</li>
<li><code>--admin-password</code>：表单中的管理员密码 admin:<hashed_password></hashed_password></li>
<li><code>--ssl</code>：使用SSL安全Portainer实例（默认值：false）</li>
<li><code>--sslcert</code>：路径的SSL证书用于保护Portainer实例（默认：/certs/portainer.crt，C:\certs\portainer.crt在Windows上）</li>
<li><code>--sslkey</code>：路径用来固定Portainer实例的SSL密钥（默认/certs/portainer.key，C:\certs\portainer.key在Windows上）</li>
</ul>
<h1 id="运行portainer"><a href="#运行portainer" class="headerlink" title="运行portainer"></a>运行portainer</h1><p>在浏览器中输入<a href="http://[remote.ip]:9000,第一次会提示设置密码，设置完后进行登录界面" target="_blank" rel="external">http://[remote.ip]:9000,第一次会提示设置密码，设置完后进行登录界面</a><br><img src="/images/docker/docker-ui/portainer/15055481781929.jpg" alt="portainer登录面"></p>
<h2 id="docker主机运行管理"><a href="#docker主机运行管理" class="headerlink" title="docker主机运行管理"></a>docker主机运行管理</h2><ul>
<li>主页Dashboard：</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055482535001.jpg" alt="主页Dashboard"></p>
<ul>
<li>模板管理</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055525167399.jpg" alt="模板管理"></p>
<p>根据官方文档，我们可以自己创建一个本地模板，参考：<a href="https://portainer.readthedocs.io/en/stable/templates.html" target="_blank" rel="external">构建自己的模板</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/portainer/templates.git portainer-templates</div><div class="line">$ <span class="built_in">cd</span> portainer-templates</div><div class="line"><span class="comment"># Edit the file templates.json</span></div><div class="line">$ docker build -t portainer-templates .</div><div class="line">$ docker run -d -p <span class="string">"8080:80"</span> portainer-templates</div></pre></td></tr></table></figure>
<ul>
<li>swarm service 管理页：</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055487334364.jpg" alt="管理管理"><br>点击上面的add service,进入服务的添加界面：<br><img src="/images/docker/docker-ui/portainer/15055487862443.jpg" alt="添加服务"><br>创建服务的相关参数可以直接参考docker官方文档，portainer也是通过docker API进行操作的。</p>
<ul>
<li>manager节点的容器管理：</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055490209966.jpg" alt="pwkk容器管理"><br>可手动选择指定的容器进行：start、stop、kill、restart、pause、resume、remove。<br>点击Add container,可以单独在manager的管理节点上运行一个容器：<br><img src="/images/docker/docker-ui/portainer/15055492476988.jpg" alt="运行容器"><br>点击具体的一个容器可以看到针对这个容器的一些配置信息和配置修改<br><img src="/images/docker/docker-ui/portainer/15055494365002.jpg" alt="容器配置"><br>查看单一容器的运行情况：<br><img src="/images/docker/docker-ui/portainer/15055495521281.jpg" alt=""><br><img src="/images/docker/docker-ui/portainer/15055507618067.jpg" alt="cpu、内存、网络、进程简单w分析"><br><img src="/images/docker/docker-ui/portainer/15055508641131.jpg" alt="日志打印"><br><img src="/images/docker/docker-ui/portainer/15055509161527.jpg" alt="进入控制台方式"><br><img src="/images/docker/docker-ui/portainer/15055509908660.jpg" alt="控制台"></p>
<ul>
<li>manager节点本地镜像管理：</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055510798802.jpg" alt="manager节点本地镜像管理"></p>
<ul>
<li>本地及集群网络管理：</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055512402124.jpg" alt="本地及集群网络管理"></p>
<ul>
<li>本地存储管理</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055513062965.jpg" alt="存储管理"></p>
<ul>
<li>docker swarm中的Secrets管理</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055516378425.jpg" alt="Secrets管理"></p>
<ul>
<li>docker swarm 管理</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055516936067.jpg" alt="swarm 管理"></p>
<h2 id="portainer设置管理"><a href="#portainer设置管理" class="headerlink" title="portainer设置管理"></a>portainer设置管理</h2><ul>
<li><p>本地用户及用户组管理<br><img src="/images/docker/docker-ui/portainer/15055519875461.jpg" alt="本地用户及用户组管理"></p>
</li>
<li><p>docker节点管理<br><img src="/images/docker/docker-ui/portainer/15055521110780.jpg" alt=""></p>
</li>
<li><p>本地镜像仓库管理<br><img src="/images/docker/docker-ui/portainer/15055521435740.jpg" alt="本地镜像仓库管理"><br><img src="/images/docker/docker-ui/portainer/15055521780267.jpg" alt="添加仓库"></p>
</li>
</ul>
<p>把本地创建好的镜像仓库，添加到这里。参考<a href="http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html">docker-registry私有仓库及web ui镜像管理</a></p>
<ul>
<li>其它设置</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055524234336.jpg" alt="logo、本地模板、标签设置"></p>
<ul>
<li>LDAP认证</li>
</ul>
<p><img src="/images/docker/docker-ui/portainer/15055557567875.jpg" alt="LDAP认证"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;portainer（基于 Go） 是一个轻量级的、开放源码的轻量级管理界面，可让您轻松管理DOCKER主机或DOCKER-SWARM集群,经过对portainer的部署与操作，个人觉得满足基本docker操作的需求，portainer支持容器、镜像、volume、netwo
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-ui" scheme="http://www.troylc.cc/tags/docker-ui/"/>
    
  </entry>
  
  <entry>
    <title>ranchervm上运行kvm的win7-docker容器</title>
    <link href="http://www.troylc.cc/rancher/2017/09/03/docker-kvm-win7.html"/>
    <id>http://www.troylc.cc/rancher/2017/09/03/docker-kvm-win7.html</id>
    <published>2017-09-03T09:26:15.000Z</published>
    <updated>2017-09-03T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直忙于老项目的spring boot和spring cloud改造，8月份没有任何自己的学习笔记，实在是感到惭愧。说好的每个月写几篇自己的工作与学习中的技术笔记与心得，又没完成。9月继续努力！<br>本文主要是在docker的环境下运行一个kvm版的win7虚拟机，至于为什么要在docker环境中运行win7虚拟机，这就得看各自的业务需求了，我这是因为工作中需要，所以整理成这篇文章。感谢大家的支持与关注。</p>
<h1 id="centos7下制作kvm的win7虚拟机"><a href="#centos7下制作kvm的win7虚拟机" class="headerlink" title="centos7下制作kvm的win7虚拟机"></a>centos7下制作kvm的win7虚拟机</h1><h2 id="centos7上安装KVM虚拟化"><a href="#centos7上安装KVM虚拟化" class="headerlink" title="centos7上安装KVM虚拟化"></a>centos7上安装KVM虚拟化</h2><ul>
<li>检测cpu是否支持硬件虚拟化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# grep -o -E &apos;(vmx|svm)&apos; /proc/cpuinfo</div><div class="line">vmx</div><div class="line">vmx</div></pre></td></tr></table></figure>
<p>输出vmx或svm代表支持虚拟化  否则如果什么都没输出代表cpu不支持虚拟化  </p>
<ul>
<li>安装KVM以及相关组件  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装kvm基础包:  </span></div><div class="line">[root@bogon ~]<span class="comment"># sudo yum install -y kvm  </span></div><div class="line"> </div><div class="line"><span class="comment">#安装kvm管理工具:    </span></div><div class="line">[root@bogon ~]<span class="comment"># sudo yum install -y qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils</span></div></pre></td></tr></table></figure>
<ul>
<li>开启并运行libvirtd 服务，以及检查kvm是否加载成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]<span class="comment"># systemctl start libvirtd</span></div><div class="line">[root@bogon ~]<span class="comment"># systemctl enable libvirtd</span></div><div class="line"><span class="comment">#查看KVM模块是否被正确加载</span></div><div class="line">[root@bogon ~]<span class="comment"># lsmod | grep kvm</span></div><div class="line">kvm_intel             170181  0 </div><div class="line">kvm                   554609  1 kvm_intel</div><div class="line">irqbypass              13503  1 kvm</div></pre></td></tr></table></figure>
<h2 id="配置宿主机网络"><a href="#配置宿主机网络" class="headerlink" title="配置宿主机网络"></a>配置宿主机网络</h2><p>默认情况下，KVM 虚拟机是基于 NAT 的网络配置，只有同一宿主机的虚拟键之间可以互相访问，跨宿主机是不能访问的。所以需要和宿主机配置成桥接模式，以便虚拟机可以在局域网内可见。</p>
<ul>
<li>配置宿主机的桥接模式  </li>
</ul>
<p>创建桥接网卡</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]<span class="comment"># cd /etc/sysconfig/network-scripts</span></div><div class="line">[root@bogon ~]<span class="comment"># cp ifcfg-ens33 ifcfg-br0</span></div></pre></td></tr></table></figure>
<p>修改 ifcfg-br0 文件  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]<span class="comment"># vim ifcfg-br0</span></div><div class="line">TYPE=<span class="string">"Bridge"</span> <span class="comment">#将br0指定为桥接类型</span></div><div class="line">BOOTPROTO=<span class="string">"static"</span></div><div class="line">DEFROUTE=<span class="string">"yes"</span></div><div class="line">PEERDNS=<span class="string">"yes"</span></div><div class="line">PEERROUTES=<span class="string">"yes"</span></div><div class="line">NAME=<span class="string">"br0"</span></div><div class="line">DEVICE=<span class="string">"br0"</span> <span class="comment">#将em1改为br0</span></div><div class="line">ONBOOT=<span class="string">"yes"</span></div><div class="line">DELAY=<span class="string">"0"</span></div><div class="line">STP=<span class="string">"yes"</span></div><div class="line">IPADDR=192.168.188.109</div><div class="line">PREFIX=24</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.188.1</div><div class="line">DNS1=192.168.188.1</div></pre></td></tr></table></figure>
<p>修改 ifcfg-ens33， ifcfg-ens33 为宿主机的物理网卡配置文件  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]<span class="comment"># vim ifcfg-ens33</span></div><div class="line">TYPE=Ethernet</div><div class="line">BOOTPROTO=static</div><div class="line">DEVICE=ens33</div><div class="line">ONBOOT=yes</div><div class="line">BRIDGE=br0</div></pre></td></tr></table></figure>
<p>重启网络并检查网络情况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@bogon network-scripts]<span class="comment"># systemctl restart network</span></div><div class="line">[root@bogon network-scripts]<span class="comment"># ip a</span></div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 ::1/128 scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master br0 state UP qlen 1000</div><div class="line">    link/ether 00:0c:29:a1:78:75 brd ff:ff:ff:ff:ff:ff</div><div class="line">3: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP qlen 1000</div><div class="line">    link/ether 00:0c:29:a1:78:75 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.188.109/24 brd 192.168.188.255 scope global br0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::20c:29ff:fea1:7875/64 scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">4: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN qlen 1000</div><div class="line">    link/ether 52:54:00:97:73:51 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">5: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN qlen 1000</div><div class="line">    link/ether 52:54:00:97:73:51 brd ff:ff:ff:ff:ff:ff</div><div class="line">[root@bogon network-scripts]<span class="comment"># brctl show</span></div><div class="line">bridge name	bridge id		STP enabled	interfaces</div><div class="line">br0		8000.000c29a17875	yes		ens33</div><div class="line">virbr0		8000.525400977351	yes		virbr0-nic</div></pre></td></tr></table></figure>
<h2 id="通过界面创建KVM-win7虚拟机"><a href="#通过界面创建KVM-win7虚拟机" class="headerlink" title="通过界面创建KVM-win7虚拟机"></a>通过界面创建KVM-win7虚拟机</h2><ul>
<li>centos桌面版系统下运行 virt-manager，创建KVM虚拟机的管理端界面程序  </li>
</ul>
<p><img src="/images/rancher/win7-kvm/15042794157148.jpg" alt="创建KVM虚拟机的管理端界面程序">  </p>
<p>如果centos7安装的是mini版本的系统，这个界面是弹不出来。需要安装桌面版本</p>
<p><img src="/images/rancher/win7-kvm/15042837170527.jpg" alt="新建虚拟机">  </p>
<p><img src="/images/rancher/win7-kvm/15042838698836.jpg" alt="">  </p>
<p>运行到此，我们需要把win7的安装iso映像下载并传入到当前centos7系统中，由于我们需要在kvm虚拟机中安装win7所以需要下载win7的虚拟安装的驱动程序，不然在安装选择虚拟硬盘和虚拟网络时，都找不到对就的硬件。 </p>
<ul>
<li>下载映像和虚拟驱动<br>win7的映像就不在这里说明下载方式了，网上搜索win7安装的iso下载下来。<br>这里主要说一下下载kvm安装windows虚拟驱动程序：<br>通过浏览器打开<code>https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.136-1/</code></li>
</ul>
<p><img src="/images/rancher/win7-kvm/15042851617902.jpg" alt="下载kvm安装windows虚拟驱动程序">  </p>
<p>下载两个文件后，传入当前系统中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@bogon iso]<span class="comment"># ll -sh</span></div><div class="line">总用量 4.2G</div><div class="line">4.1G -rw-r--r--. 1 qemu qemu 4.1G 8月  31 22:49 cn_windows_7_ultimate_with_sp1_x64_oem.iso</div><div class="line">163M -rwxr-xr-x. 1 qemu qemu 163M 9月   1 13:06 virtio-win.iso</div></pre></td></tr></table></figure>
<ul>
<li>继续安装win7-kvm虚拟机  </li>
</ul>
<p><img src="/images/rancher/win7-kvm/15042857117144.jpg" alt="选择win7安装iso映像"><br><img src="/images/rancher/win7-kvm/15042858163697.jpg" alt="选择操作系统类型及版本"><br><img src="/images/rancher/win7-kvm/15042861371348.jpg" alt=""><br><img src="/images/rancher/win7-kvm/15042862327834.jpg" alt=""></p>
<ul>
<li>安装前需要自定义一些虚拟化的配置，以便于后面的在ranchervm环境下运行kvm-win7虚拟机不出蓝屏的问题。</li>
</ul>
<p><img src="/images/rancher/win7-kvm/15042872495377.jpg" alt="NIC网络配置"><br><img src="/images/rancher/win7-kvm/15042873659918.jpg" alt="虚拟硬盘配置"><br><img src="/images/rancher/win7-kvm/15042874519000.jpg" alt="系统启动引导配置"></p>
<p>增加一个硬件IDE-CDROM2-选择前面下载的virtio-win.iso</p>
<p><img src="/images/rancher/win7-kvm/15042878514430.jpg" alt=""><br><img src="/images/rancher/win7-kvm/15042879820835.jpg" alt="开始安装"></p>
<ul>
<li>进入安装win7的界面  </li>
</ul>
<p><img src="/images/rancher/win7-kvm/15043520681409.jpg" alt="win7安装界面"></p>
<p><img src="/images/rancher/win7-kvm/15043522644121.jpg" alt="选择虚拟硬盘"></p>
<p>正常情况下因为没安装虚拟化的驱动程序，安装是找不到硬盘和网络的，所以需要在选择安装盘的界面，浏览安装虚拟化驱动程序，这个时候就要通过浏览找到之前加载的IDE-CDROM2中的virtio-win.isok中的内容大致如下：<br><code>NetKVM/</code>: Virtio网络驱动<br><code>viostor/</code>: Virtio块驱动<br><code>vioscsi/</code>: Virtio SCSI驱动<br><code>viorng/</code>: Virtio RNG驱动<br><code>vioser/</code>: Virtio串口驱动<br><code>Balloon/</code>: Virtio 内存气球驱动<br><code>qxl/</code>: 用于Windows 7及之前版本的QXL显卡驱动. (virtio-win-0.1.103-1和之后版本会创建)<br><code>qxldod/</code>: 用于Windows 8及之后版本的QXL显卡驱动. (virtio-win-0.1.103-2和之后版本会创建)<br><code>pvpanic/</code>: QEMU pvpanic 设备驱动 (virtio-win-0.1.103-2和之后版本会创建)<br><code>guest-agent/</code>: QEMU Guest Agent 32bit 和 64bit 安装包<br><code>qemupciserial/</code>: QEMU PCI 串口设备驱动<br><code>*.vfd</code>: 用于Windows XP下的VFD软驱镜像  </p>
<p>我在这里主要安装网络和硬盘的驱动：viostor、NetKVM找到对应win7系统版本安装完后，就会出现安装的硬盘，后面就安步骤安装win7就可以完成kvm-win7的安装了。</p>
<p><img src="/images/rancher/win7-kvm/15043524690030.jpg" alt=""></p>
<p>安装虚拟硬盘驱动：</p>
<p><img src="/images/rancher/win7-kvm/15043525084334.jpg" alt="安装虚拟硬盘驱动"></p>
<p>安装虚拟网络驱动：</p>
<p><img src="/images/rancher/win7-kvm/15043526013165.jpg" alt=""></p>
<p>安装完后，就会出现虚拟的硬盘的安装界面  </p>
<p><img src="/images/rancher/win7-kvm/15043526819944.jpg" alt=""></p>
<p>下一步，就等待系统的安装完成：</p>
<p><img src="/images/rancher/win7-kvm/15043532760334.jpg" alt=""></p>
<p>然后在centos7下的/var/lib/libvirt/images下有刚安装好的win7-kvm虚拟机文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost iso]<span class="comment"># cd /var/lib/libvirt/images/</span></div><div class="line">[root@localhost images]<span class="comment"># ll -sh</span></div><div class="line">总用量 12G</div><div class="line">4.0K -rw-r--r--. 1 root root 101 9月   1 15:26 Dockerfile</div><div class="line">3.4G -rw-------. 1 qemu qemu 21G 9月   2 19:46 win7-kvm-base.qcow2</div><div class="line">8.1G -rw-------. 1 root root 21G 9月   1 15:13 win7-kvm-docker.qcow2</div></pre></td></tr></table></figure>
<p>win7版的kvm虚拟机安装完成，后结通过虚拟机制作docker镜像</p>
<h1 id="通过kvm虚拟机制作的docker镜像"><a href="#通过kvm虚拟机制作的docker镜像" class="headerlink" title="通过kvm虚拟机制作的docker镜像"></a>通过kvm虚拟机制作的docker镜像</h1><p>由于我们后续要通过ranchervm运行kvm虚拟机，所以默认的<br>RancherVM镜像就已经是捆绑的标准KVM软件的docker镜像。  </p>
<ul>
<li>制作docker版本的kvm-win7镜像，首页压缩原kvm镜像，这样可以使kvm镜像压缩50%以上的空间。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost images]<span class="comment"># ll -sh</span></div><div class="line">总用量 17G</div><div class="line">4.0K -rw-r--r--. 1 root root 101 9月   1 15:26 Dockerfile</div><div class="line">8.3G -rw-------. 1 root root 21G 9月   2 20:31 win7-kvm-base.qcow2</div><div class="line">[root@localhost images]<span class="comment"># qemu-img convert -O qcow2 -c win7-kvm-base.qcow2 win7-kvm-base.gz.img</span></div><div class="line">[root@localhost images]<span class="comment"># ll -sh</span></div><div class="line">总用量 21G</div><div class="line">4.0K -rw-r--r--. 1 root root  101 9月   1 15:26 Dockerfile</div><div class="line">3.8G -rw-r--r--. 1 root root 3.8G 9月   2 22:53 win7-kvm-base.gz.img</div><div class="line">8.3G -rw-------. 1 root root  21G 9月   2 20:31 win7-kvm-base.qcow2</div></pre></td></tr></table></figure>
<p>通过rancher-base来构建win7-kvm的docker镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost win7-vm]<span class="comment"># vim Dockerfile </span></div><div class="line">FROM rancher/vm-base</div><div class="line">COPY win7-kvm-base.gz.img /base_image/win7-kvm-base.gz.img</div><div class="line">CMD [<span class="string">"-m 2048m"</span>]</div><div class="line">[root@localhost win7-vm]<span class="comment"># docker build -t rancher/win7-kvm-docker-base .</span></div><div class="line">Sending build context to Docker daemon  4.322GB</div><div class="line">Step 1/3 : FROM rancher/vm-base</div><div class="line"> ---&gt; 051656d3329d</div><div class="line">Step 2/3 : COPY win7-kvm-base.gz.img /base_image/win7-kvm-base.gz.img</div><div class="line"> ---&gt; ffbfd3b91c42</div><div class="line">Step 3/3 : CMD -m 2048m</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 7fc2475f49b5</div><div class="line"> ---&gt; 80e35bd6ff43</div><div class="line">Removing intermediate container 7fc2475f49b5</div><div class="line">Successfully built 80e35bd6ff43</div><div class="line">Successfully tagged rancher/win7-kvm-docker-base:latest</div><div class="line">[root@localhost win7-vm]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">rancher/win7-kvm-docker-base     latest              80e35bd6ff43        9 seconds ago       4.35GB</div><div class="line">rancher/vm-base                  latest              051656d3329d        15 months ago       288MB</div><div class="line">rancher/ranchervm                latest              f3005c29aa04        21 months ago       250MB</div></pre></td></tr></table></figure>
<h1 id="运行并测试docker中win7系统容器"><a href="#运行并测试docker中win7系统容器" class="headerlink" title="运行并测试docker中win7系统容器"></a>运行并测试docker中win7系统容器</h1><p>RancherVM镜像是Docker镜像中捆绑的标准KVM镜像，下面我们要通过ranchervm来创建并运行win7的kvm镜像。<br>首先，确保Docker和KVM都安装在您的系统上。按照分发特定的说明确保KVM工作。我们只需要在内核中启用KVM。我们不需要像任何用户空间的工具qemu-kvm或libvirt。centos7确保启用了KVM，我们最开始就已经讲过。  </p>
<p>一旦你设置了Docker和KVM，就运行：</p>
<pre><code class="bash">[root@localhost ~]<span class="comment"># docker run -d -v /var/run:/var/run -p 8080:80 -v /var/lib/rancher/vm:/vm rancher/ranchervm</span>
[root@localhost ~]<span class="comment"># docker ps</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
a926b7dd1740        rancher/ranchervm   <span class="string">"/var/lib/rancher/..."</span>   2 days ago          Up 2 days           0.0.0.0:8080-&gt;80/tcp   xenodochial_b
anach
</code></pre>
<ul>
<li>浏览器方式运行win7的docker容器  </li>
</ul>
<p>打开浏览器输入：https://<kvm hostname="">:8080，我们可以通过web浏览器创建虚拟机：</kvm></p>
<p><img src="/images/rancher/win7-kvm/15043668394036.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043669239599.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043669629235.jpg" alt=""></p>
<p><img src="/images/rancher/win7-kvm/15043671343957.jpg" alt=""></p>
<ul>
<li>docker run方式运行win7版的docker容器。<br>在运行了ranchervm的机器上，运行以下命令，就可以通过命令方式运行kvm的docker容器。</li>
</ul>
<pre><code class="bash">[root@localhost ~]<span class="comment"># docker run -d -p 3389:3389 -p 8183:8183 -e "RANCHER_VM=true" \</span>
--cap-add NET_ADMIN \
-v /var/lib/rancher/vm:/vm \
--device /dev/kvm:/dev/kvm \
--device /dev/net/tun:/dev/net/tun \
-v /root/win7-vm:/base_image \
--name docker-win7 rancher/vm-base -m 2048  
37bf25f123f4301bfc0ffc7ccde09c381753d26ffb93ed6a1eae3d97ef271df3
[root@localhost ~]<span class="comment"># docker ps -a</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                          PORTS                  NAMES
37bf25f123f4        rancher/vm-base     <span class="string">"/var/lib/rancher/..."</span>   5 seconds ago        Up 4 seconds                    22/tcp                 docker-win7
a926b7dd1740        rancher/ranchervm   <span class="string">"/var/lib/rancher/..."</span>   4 days ago           Up 4 days                       0.0.0.0:8080-&gt;80/tcp   xenodochial_banach
</code></pre>
<p>其中-v /root/docker-kvm:/base_image的挂载目录必须放入前面我们安装的kvm虚拟机文件win7-kvm-base.gz.img，这样我们就不需要用dockerfile构建一个新的镜像出来，直接用rancher/vm-base镜像就可以运行。</p>
<p>至此在centos7上通过docker运行一个win7的kvm虚拟机的安装全部完成。</p>
<p>参考：<br><a href="https://github.com/rancher/vm" target="_blank" rel="external">ranchervm运行kvm虚拟机参考：https://github.com/rancher/vm</a><br><a href="http://www.gblm.net/439.html" target="_blank" rel="external">安装kvm-win7的虚拟机：http://www.gblm.net/439.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直忙于老项目的spring boot和spring cloud改造，8月份没有任何自己的学习笔记，实在是感到惭愧。说好的每个月写几篇自己的工作与学习中的技术笔记与心得，又没完成。9月继续努力！&lt;br&gt;本文主要是在docker的环境下运行一个kvm版的win7虚拟机，至
    
    </summary>
    
      <category term="rancher" scheme="http://www.troylc.cc/categories/rancher/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="rancher" scheme="http://www.troylc.cc/tags/rancher/"/>
    
      <category term="kvm" scheme="http://www.troylc.cc/tags/kvm/"/>
    
      <category term="win7" scheme="http://www.troylc.cc/tags/win7/"/>
    
      <category term="Dockerfile" scheme="http://www.troylc.cc/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile制作openjdk-8u131-jdk-alpine基础镜像</title>
    <link href="http://www.troylc.cc/docker/2017/07/28/dockerfile-alpine-tz-curl.html"/>
    <id>http://www.troylc.cc/docker/2017/07/28/dockerfile-alpine-tz-curl.html</id>
    <published>2017-07-28T09:26:15.000Z</published>
    <updated>2017-07-28T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>从dockerhub上下载openjdk:8u131-jdk-alpine本身是一个轻量级的操作系统，只带有jre，不带任何jre外的软件，如果想增加其它软件就需要我们自己在此基础上再构建自己想的基础镜像。</p>
<h2 id="下载openjdk-8u131-jdk-alpine基础镜像"><a href="#下载openjdk-8u131-jdk-alpine基础镜像" class="headerlink" title="下载openjdk:8u131-jdk-alpine基础镜像"></a>下载openjdk:8u131-jdk-alpine基础镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">openjdk-8-time                  latest                 ab859b2c2910        14 hours ago        107.8 MB</div><div class="line">nginx                           1.13.3-alpine          ba60b24dbad5        2 weeks ago         15.51 MB</div><div class="line">openjdk                         8u131-jdk-alpine       478bf389b75b        4 weeks ago         101 MB</div></pre></td></tr></table></figure>
<p>本次在openjdk:8u131-jdk-alpine基础上增加时区文件和CURL、TREE等工具。</p>
<hr>
<h2 id="编写Dockerfile文件，并构建alpine基础镜像"><a href="#编写Dockerfile文件，并构建alpine基础镜像" class="headerlink" title="编写Dockerfile文件，并构建alpine基础镜像"></a>编写Dockerfile文件，并构建alpine基础镜像</h2><p>由于docker构建的时候要到alpine官网上下载软件，因我的构建服务器不能上外网，所在在构建的时候特殊增加http_proxy代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# vim Dockerfile</div><div class="line">FROM openjdk:8u131-jdk-alpine</div><div class="line"># MAINTAINER指令允许你给将要制作的镜像设置作者信息</div><div class="line">MAINTAINER iucheng &lt;iu_cheng@troylc.com&gt;</div><div class="line"></div><div class="line">#ADD cacerts /etc/ssl/certs/java/cacerts</div><div class="line"></div><div class="line">ARG http_proxy</div><div class="line"></div><div class="line">ENV http_proxy=$&#123;http_proxy&#125;</div><div class="line">ENV https_proxy=$&#123;http_proxy&#125;</div><div class="line"></div><div class="line"># 设置时区 中国的时区有多种表述 分别为: UTC+8:00 GMT+8 # 写/etc/TZ, 不要设置TZ环境变量 ENV TZ UTC+8:00</div><div class="line">RUN  apk update \</div><div class="line">    &amp;&amp; apk add --no-cache \</div><div class="line">    &amp;&amp; apk add curl bash tree tzdata &amp;&amp; \</div><div class="line">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</div><div class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"></div><div class="line">ENV http_proxy=</div><div class="line">ENV https_proxy=</div><div class="line"></div><div class="line">[root@registry-jenkins ~]# docker build --build-arg http_proxy=http://192.168.72.188:808 -t openjdk:8u131-jdk-tz-curl-alpine .</div><div class="line">Sending build context to Docker daemon 49.15 kB</div><div class="line">Step 1 : FROM openjdk:8u131-jdk-alpine</div><div class="line"> ---&gt; 478bf389b75b</div><div class="line">Step 2 : MAINTAINER iucheng &lt;liu_cheng@topsec.com.cn&gt;</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; 0fe3b8ac71b7</div><div class="line">Step 3 : ARG http_proxy</div><div class="line"> ---&gt; Running in 2069da05a659</div><div class="line"> ---&gt; 74c725e41083</div><div class="line">Removing intermediate container 2069da05a659</div><div class="line">Step 4 : ENV http_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in ac0bf48d4b6c</div><div class="line"> ---&gt; 8c058688cfa8</div><div class="line">Removing intermediate container ac0bf48d4b6c</div><div class="line">Step 5 : ENV https_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in 55e645b7c4b8</div><div class="line"> ---&gt; df34875db960</div><div class="line">Removing intermediate container 55e645b7c4b8</div><div class="line">Step 6 : RUN apk update     &amp;&amp; apk add --no-cache     &amp;&amp; apk add curl bash tree tzdata &amp;&amp;     ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"> ---&gt; Running in 387ca24a223a</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">v3.6.2-40-gf1c202674f [http://dl-cdn.alpinelinux.org/alpine/v3.6/main]</div><div class="line">v3.6.2-32-g6f53cfcccd [http://dl-cdn.alpinelinux.org/alpine/v3.6/community]</div><div class="line">OK: 8436 distinct packages available</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">OK: 99 MiB in 51 packages</div><div class="line">(1/10) Installing ncurses-terminfo-base (6.0-r7)</div><div class="line">(2/10) Installing ncurses-terminfo (6.0-r7)</div><div class="line">(3/10) Installing ncurses-libs (6.0-r7)</div><div class="line">(4/10) Installing readline (6.3.008-r5)</div><div class="line">(5/10) Installing bash (4.3.48-r1)</div><div class="line">Executing bash-4.3.48-r1.post-install</div><div class="line">(6/10) Installing libssh2 (1.8.0-r1)</div><div class="line">(7/10) Installing libcurl (7.54.0-r0)</div><div class="line">(8/10) Installing curl (7.54.0-r0)</div><div class="line">(9/10) Installing tree (1.7.0-r0)</div><div class="line">(10/10) Installing tzdata (2017a-r0)</div><div class="line">Executing busybox-1.26.2-r5.trigger</div><div class="line">OK: 111 MiB in 61 packages</div><div class="line"> ---&gt; d2ed313ab5f3</div><div class="line">Removing intermediate container 387ca24a223a</div><div class="line">Step 7 : ENV http_proxy</div><div class="line"> ---&gt; Running in 104af5cd52df</div><div class="line"> ---&gt; 7c2f38e0d8fd</div><div class="line">Removing intermediate container 104af5cd52df</div><div class="line">Step 8 : ENV https_proxy</div><div class="line"> ---&gt; Running in d93dd0df2c4a</div><div class="line"> ---&gt; 4ad2436778d3</div><div class="line">Removing intermediate container d93dd0df2c4a</div><div class="line">Successfully built 4ad2436778d3</div></pre></td></tr></table></figure>
<p>构建命中中增加了<code>--build-arg http_proxy=http://192.168.72.188:808</code>，主要是为了构建过程中通过代理上外网，从外网下载所需的软件。</p>
<h2 id="验证构建的镜像是否成功"><a href="#验证构建的镜像是否成功" class="headerlink" title="验证构建的镜像是否成功"></a>验证构建的镜像是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@registry-jenkins ~]# docker run -it --rm --name jdk-test openjdk:8u131-jdk-tz-curl-alpine /bin/bash</div><div class="line">bash-4.3# date</div><div class="line">Fri Jul 28 09:44:59 CST 2017</div><div class="line">bash-4.3# curl</div><div class="line">curl: try &apos;curl --help&apos; or &apos;curl --manual&apos; for more information</div><div class="line">bash-4.3# exit</div><div class="line">exit</div><div class="line">[root@registry-jenkins ~]#</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从dockerhub上下载openjdk:8u131-jdk-alpine本身是一个轻量级的操作系统，只带有jre，不带任何jre外的软件，如果想增加其它软件就需要我们自己在此基础上再构建自己想的基础镜像。&lt;/p&gt;
&lt;h2 id=&quot;下载openjdk-8u131-jdk-a
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="Dockerfile" scheme="http://www.troylc.cc/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>docker-registry私有仓库及web ui镜像管理</title>
    <link href="http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html"/>
    <id>http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html</id>
    <published>2017-06-20T09:26:15.000Z</published>
    <updated>2017-06-20T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><img src="/images/docker/registry/registry.jpeg" alt="registry"></p>
<p>docker提供了开放式的dockerhub公共中央仓库，我们可以从这上面下载到自己工作和学习中想要的各种镜像，但由于dockerhub是国外的服务器，很多时候国内是很难下载，这里我们可以通过国内的中转服务器来下载。<br>国内常用的中转服务器有：  </p>
<ol>
<li>daocloud： 在<a href="https://hub.daocloud.io/" target="_blank" rel="external">daocloud</a>通过<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">安装daocloud加载器</a>可以下载到需要的镜像</li>
<li>阿里云容器hub：在<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">开发者平台的-&gt;容器hub</a>中搜索镜像，如果想通过阿里云服务来下载镜像，需要登录阿里云-&gt;产品与服务-&gt;云计算基础服务-&gt;弹性计算-&gt;容器服务-&gt;镜像与方案-&gt;镜像-&gt;镜像仓库控制台-&gt;Docker Hub 镜像站点中有安装阿里云的dockerhub加载器</li>
<li>网易蜂巢镜像中心：在<a href="https://c.163.com/hub#/m/home/" target="_blank" rel="external">网易蜂巢镜像中心</a>搜索镜像，然后复制docker pull 链接，到服务器上执行就行</li>
</ol>
<hr>
<p>以上是公共的docker仓库获取镜像的方法，但在国内大部分公司的情况是不能把项目上用到的镜像放到公网上，一般从公网上只会下载基础版本的镜像，然后基于这个基础版本的镜像自己在本地build镜像，由于在本地build的镜像，不能在内部网络中直接下载，上传，所以需要一个内部环境的私有仓库，做为内部镜像中心来让容器，可以在内容任何地方下载上传。<br>搭建私有仓库有如下的优点：</p>
<ul>
<li>节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；</li>
<li>私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。<br>本文就是基于以上目的，并参考<a href="https://docs.docker.com/registry/" target="_blank" rel="external">docker官方关于docker registry的构建</a>来进行搭建，并通过web ui来进行管理。</li>
</ul>
<hr>
<h3 id="从公共仓库中下载搭建私有仓库的镜像"><a href="#从公共仓库中下载搭建私有仓库的镜像" class="headerlink" title="从公共仓库中下载搭建私有仓库的镜像"></a>从公共仓库中下载搭建私有仓库的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull registry</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull hyper/docker-registry-web</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">registry                        latest                    9d0c4eabab4d        5 weeks ago         33.2MB</div><div class="line">registry:5000/myhub/rabbitmp    latest                    758cc906ba57        2 months ago        37.5MB</div><div class="line">tcr:5000/myhub/rabbitmq         3.6.9-management-alpine   758cc906ba57        2 months ago        37.5MB</div><div class="line">hyper/docker-registry-web       latest                    0db5683824d8        8 months ago        599MB</div></pre></td></tr></table></figure>
<h3 id="启用身份验证搭建私有仓库"><a href="#启用身份验证搭建私有仓库" class="headerlink" title="启用身份验证搭建私有仓库"></a>启用身份验证搭建私有仓库</h3><p>令牌认证需要具有PEM格式的RSA私钥和与该密钥相匹配的证书</p>
<h4 id="生成私钥和证书"><a href="#生成私钥和证书" class="headerlink" title="生成私钥和证书"></a>生成私钥和证书</h4><p>编写生成证书的shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim generate-key.s</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">openssl req \</div><div class="line">    -new \</div><div class="line">    -newkey rsa:4096 \</div><div class="line">    -days 3650 \</div><div class="line">    -subj <span class="string">"/CN=localhost"</span> \</div><div class="line">    -nodes \</div><div class="line">    -x509 \</div><div class="line">    -keyout /devops/registry-web/conf/auth.key \</div><div class="line">    -out /devops/registry/conf/auth.cert</div><div class="line"></div><div class="line">:wq 保存</div><div class="line">[root@docker-node01 devops]<span class="comment"># chmod +x generate-key.sh</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># ./generate-key.sh</span></div><div class="line">Generating a 4096 bit RSA private key</div><div class="line">.................................................................++</div><div class="line">..................++</div><div class="line">writing new private key to <span class="string">'/devops/registry-web/conf/auth.key'</span></div><div class="line">-----</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry</span></div><div class="line">registry/     registry-web/</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry/conf/</span></div><div class="line">auth.cert</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry-web/conf/</span></div><div class="line">auth.key</div></pre></td></tr></table></figure>
<h4 id="创建registry配置文件"><a href="#创建registry配置文件" class="headerlink" title="创建registry配置文件"></a>创建registry配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry/config.yml</span></div><div class="line">version: 0.1</div><div class="line"></div><div class="line">storage:</div><div class="line">  filesystem:</div><div class="line">    rootdirectory: /var/lib/registry</div><div class="line">  delete:</div><div class="line">    enabled: <span class="literal">true</span></div><div class="line"></div><div class="line">http:</div><div class="line">  addr: 0.0.0.0:5000</div><div class="line"></div><div class="line">auth:</div><div class="line">  token:</div><div class="line">    realm: http://localhost:8090/api/auth</div><div class="line">    service: registry:5000</div><div class="line">    issuer: <span class="built_in">test</span></div><div class="line">    rootcertbundle: /etc/docker/registry/auth.cert</div><div class="line"></div><div class="line"><span class="built_in">log</span>:</div><div class="line">  level: info</div><div class="line"></div><div class="line">notifications:</div><div class="line">  endpoints:</div><div class="line">    - name: listener</div><div class="line">      url: http://localhost:8090/api/notification</div><div class="line">      timeout: 500ms</div><div class="line">      threshold: 5</div><div class="line">      backoff: 1s</div><div class="line"></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>storage</code>选项是必需的<br>|—<code>filesystem</code> 使用本地磁盘来存储注册表文件。它是开发的理想选择，适用于一些小规模的生产应用<br>|—<code>delete</code> 用delete结构启用通过摘要删除图像斑点和清单。它默认为false,可以设置true来启用<br><code>log</code>小节配置了日志系统的行为。日志记录系统将所有内容输出到stdout<br>|—<code>level</code>设置测井输出的级别。允许值是error，warn，info，和debug。默认是info<br><code>http</code>选项详细说明托管registry的HTTP服务器的配置。<br>|—<code>addr</code>服务器应该接受连接的地址。表单取决于网络类型（使用HOST:PORTTCP和FILE一个UNIX套接字。<br><code>auth</code>是验证方式，该选项是可选的。<br>|—<code>token</code>基于令牌的身份验证允许您将身份验证系统与注册表分离。它是一种具有高度安全性的已建立的认证范例。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>realm</td>
<td>是</td>
<td>registry服务器认证的API接口，这是通过registry-web中的权限来认证</td>
</tr>
<tr>
<td>service</td>
<td>是</td>
<td>指定需要被认证的服务。</td>
</tr>
<tr>
<td>issuer</td>
<td>是</td>
<td>令牌颁发者的名称。发行人将其插入到令牌中，因此它必须与为发行者配置的值相匹配</td>
</tr>
<tr>
<td>rootcertbundle</td>
<td>是</td>
<td>根证书包的绝对路径。此捆绑包包含用于签署身份验证令牌的证书的公共部分</td>
</tr>
</tbody>
</table>
<p><code>notifications</code>，registry通知，此项不是必须的，可选选项<br>|—<code>endpoints</code>结构包含可以接受事件通知的命名服务（URL）的列表。具体参考<a href="https://docs.docker.com/registry/configuration/#notifications" target="_blank" rel="external">官网说明</a></p>
<h4 id="创建regsitry的web-ui管理镜像的配置文件"><a href="#创建regsitry的web-ui管理镜像的配置文件" class="headerlink" title="创建regsitry的web ui管理镜像的配置文件"></a>创建regsitry的web ui管理镜像的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry-web/config.yml</span></div><div class="line">registry:</div><div class="line">   url: http://registry:5000/v2</div><div class="line">   name: registry:5000</div><div class="line">   <span class="built_in">readonly</span>: <span class="literal">false</span></div><div class="line">   auth:</div><div class="line">     enabled: <span class="literal">true</span></div><div class="line">     key: /conf/auth.key</div><div class="line">     issuer: <span class="built_in">test</span></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>url</code>-指定registry的地址<br><code>name</code>-regsitry私服的名称<br><code>readonly</code>-是否为只读模式，设置为true时不允许删除<br><code>auth</code>-registry-web的验证方式<br>|—<code>enabled</code> 是否启动验证<br>|—<code>key</code> 验证的证书key<br>|—<code>issuer</code> 证书颁发者的名称</p>
<h4 id="创建docker-compose文件来编排registry两个服务"><a href="#创建docker-compose文件来编排registry两个服务" class="headerlink" title="创建docker-compose文件来编排registry两个服务"></a>创建docker-compose文件来编排registry两个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim docker-compose.yml</span></div><div class="line">version: <span class="string">'2'</span></div><div class="line">services:</div><div class="line">  registry:</div><div class="line">    image: registry</div><div class="line">    container_name: registry</div><div class="line">    ports:</div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry/conf:/etc/docker/registry:ro</div><div class="line">      - /devops/registry:/var/lib/registry</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">  registry-web:</div><div class="line">    image: hyper/docker-registry-web</div><div class="line">    container_name: registry-web</div><div class="line">    ports:</div><div class="line">      - <span class="string">"8090:8080"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry-web/conf:/conf:ro</div><div class="line">      - /devops/registry-web/db:/data</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    depends_on:</div><div class="line">      - registry</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">networks:</div><div class="line">  registry-net:</div><div class="line">:wq 保存</div><div class="line"></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose up -d</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose log -f 查看日志</span></div></pre></td></tr></table></figure>
<h4 id="配置本地hosts表"><a href="#配置本地hosts表" class="headerlink" title="配置本地hosts表"></a>配置本地hosts表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /etc/hosts</span></div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">10.211.55.7 registry  <span class="comment">#增加registry的hosts表</span></div></pre></td></tr></table></figure>
<h3 id="验证registry及web-ui管理"><a href="#验证registry及web-ui管理" class="headerlink" title="验证registry及web ui管理"></a>验证registry及web ui管理</h3><ol>
<li>登录到<a href="http://localhost:8090/" target="_blank" rel="external">http://localhost:8090/</a> 默认用户名/密码  admin/admin<br><img src="/images/docker/registry/1.jpg" alt="registry-web管理界面"></li>
<li>创建测试用户并向该用户授予“全部写入”角色。<br><img src="/images/docker/registry/2.jpg" alt=""></li>
<li>在本地shell上：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># docker login registry:5000</span></div><div class="line">Username: troylc</div><div class="line">Password:</div><div class="line">Login Succeeded</div><div class="line">[root@docker-node01 devops]<span class="comment"># docker pull hello-world</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker tag hello-world registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker push registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker rmi registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker run registry:5000/hello-world:latest</span></div></pre></td></tr></table></figure>
<ol>
<li>在界面上查看，并操作（列表中可删除）<br>用troylc用户名登录，可以看到有一个hello-worlad镜像，展开列表<br><img src="/images/docker/registry/3.jpg" alt=""></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/docker/registry/registry.jpeg&quot; alt=&quot;registry&quot;&gt;&lt;/p&gt;
&lt;p&gt;docker提供了开放式的dockerhub公共中央仓库，我们可以从这上面下载到自己工作和学习中想要的各种镜像，但由于d
    
    </summary>
    
      <category term="docker" scheme="http://www.troylc.cc/categories/docker/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="registry" scheme="http://www.troylc.cc/tags/registry/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA For Mac 快捷键</title>
    <link href="http://www.troylc.cc/IntelliJ-IDEA/2017/06/17/idea-01.html"/>
    <id>http://www.troylc.cc/IntelliJ-IDEA/2017/06/17/idea-01.html</id>
    <published>2017-06-17T09:26:15.000Z</published>
    <updated>2017-06-17T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。本文参考以下内容摘记下来，方便自己记忆。<br><strong>参考地址：</strong><br><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a><br><a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">IntelliJ IDEA 官方快捷键说明</a></p>
<h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul>
<li><code>⌘</code> Command</li>
<li><code>⇧</code> Shift</li>
<li><code>⌥</code> Option</li>
<li><code>⌃</code> Control</li>
<li><code>↩︎</code> Return/Enter</li>
<li><code>⌫</code> Delete</li>
<li><code>⌦</code> 向前删除键（Fn+Delete）</li>
<li><code>↑</code> 上箭头</li>
<li><code>↓</code> 下箭头</li>
<li><code>←</code> 左箭头</li>
<li><code>→</code> 右箭头</li>
<li><code>⇞</code> Page Up（Fn+↑）</li>
<li><code>⇟</code> Page Down（Fn+↓）</li>
<li><code>Home</code> Fn + ←</li>
<li><code>End</code> Fn + →</li>
<li><code>⇥</code> 右制表符（Tab键）</li>
<li><code>⇤</code> 左制表符（Shift+Tab）</li>
<li><code>⎋</code> Escape (Esc)</li>
</ul>
<h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul>
<li><code>Control + Space</code> 基本的代码补全（补全任何类、方法、变量）</li>
<li><code>Control + Shift + Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>
<li><code>Command + Shift + Enter</code> 自动结束代码，行末自动添加分号</li>
<li><code>Command + P</code> 显示方法的参数信息</li>
<li><code>Control + J</code> 快速查看文档</li>
<li><code>Shift + F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>
<li><code>Command + 鼠标放在代码上</code> 显示代码简要信息</li>
<li><code>Command + F1</code> 在错误或警告处显示具体描述信息</li>
<li><code>Command + N, Control + Enter, Control + N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>
<li><code>Control + O</code> 覆盖方法（重写父类方法）</li>
<li><code>Control + I</code> 实现方法（实现接口中的方法）</li>
<li><code>Command + Option + T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>
<li><code>Command + /</code> 注释/取消注释与行注释</li>
<li><code>Command + Option + /</code> 注释/取消注释与块注释</li>
<li><code>Option + 方向键上</code> 连续选中代码块</li>
<li><code>Option + 方向键下</code> 减少当前选中的代码块</li>
<li><code>Control + Shift + Q</code> 显示上下文信息</li>
<li><code>Option + Enter</code> 显示意向动作和快速修复代码</li>
<li><code>Command + Option + L</code> 格式化代码</li>
<li><code>Control + Option + O</code> 优化import</li>
<li><code>Control + Option + I</code> 自动缩进线</li>
<li><code>Tab / Shift + Tab</code> 缩进代码 / 反缩进代码</li>
<li><code>Command + X</code> 剪切当前行或选定的块到剪贴板</li>
<li><code>Command + C</code> 复制当前行或选定的块到剪贴板</li>
<li><code>Command + V</code> 从剪贴板粘贴</li>
<li><code>Command + Shift + V</code> 从最近的缓冲区粘贴</li>
<li><code>Command + D</code> 复制当前行或选定的块</li>
<li><code>Command + Delete</code> 删除当前行或选定的块的行</li>
<li><code>Control + Shift + J</code> 智能的将代码拼接成一行</li>
<li><code>Command + Enter</code> 智能的拆分拼接的行</li>
<li><code>Shift + Enter</code> 开始新的一行</li>
<li><code>Command + Shift + U</code> 大小写切换</li>
<li><code>Command + Shift + ] / Command + Shift + [</code> 选择直到代码块结束/开始 </li>
<li><code>Option + Fn + Delete</code> 删除到单词的末尾</li>
<li><code>Option + Delete</code> 删除到单词的开头</li>
<li><code>Command + 加号 / Command + 减号</code> 展开 / 折叠代码块</li>
<li><code>Command + Shift + 加号</code> 展开所以代码块</li>
<li><code>Command + Shift + 减号</code> 折叠所有代码块</li>
<li><code>Command + W</code> 关闭活动的编辑器选项卡</li>
</ul>
<h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul>
<li><code>Double Shift</code> 查询任何东西</li>
<li><code>Command + F</code> 文件内查找</li>
<li><code>Command + G</code> 查找模式下，向下查找</li>
<li><code>Command + Shift + G</code> 查找模式下，向上查找</li>
<li><code>Command + R</code> 文件内替换</li>
<li><code>Command + Shift + F</code> 全局查找（根据路径）</li>
<li><code>Command + Shift + R</code> 全局替换（根据路径）</li>
<li><code>Command + Shift + S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
<li><code>Command + Shift + M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
</ul>
<h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul>
<li><code>Option + F7 / Command + F7</code> 在文件中查找用法 / 在类中查找用法</li>
<li><code>Command + Shift + F7</code> 在文件中突出显示的用法</li>
<li><code>Command + Option + F7</code> 显示用法</li>
</ul>
<h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul>
<li><code>Command + F9</code> 编译Project</li>
<li><code>Command + Shift + F9</code> 编译选择的文件、包或模块</li>
<li><code>Control + Option + R</code> 弹出 Run 的可选择菜单</li>
<li><code>Control + Option + D</code> 弹出 Debug 的可选择菜单</li>
<li><code>Control + R</code> 运行</li>
<li><code>Control + D</code> 调试</li>
<li><code>Control + Shift + R, Control + Shift + D</code> 从编辑器运行上下文环境配置</li>
</ul>
<h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul>
<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>
<li><code>Shift + F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>
<li><code>Shift + F8</code> 跳出</li>
<li><code>Option + F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>
<li><code>Option + F8</code> 计算表达式（可以更改变量值使其生效）</li>
<li><code>Command + Option + R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>
<li><code>Command + F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>
<li><code>Command + Shift + F8</code> 查看断点信息</li>
</ul>
<h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul>
<li><code>Command + O</code> 查找类文件</li>
<li><code>Command + Shift + O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>
<li><code>Command + Option + O</code> 前往指定的变量 / 方法</li>
<li><code>Control + 方向键左 / Control + 方向键右</code> 左右切换打开的编辑tab页</li>
<li><code>F12</code> 返回到前一个工具窗口</li>
<li><code>Esc</code> 从工具窗口进入代码文件窗口</li>
<li><code>Shift + Esc</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>
<li><code>Command + Shift + F4</code> 关闭活动run/messages/find/… tab</li>
<li><code>Command + L</code> 在当前文件跳转到某一行的指定处</li>
<li><code>Command + E</code> 显示最近打开的文件记录列表</li>
<li><code>Option + 方向键左 / Option + 方向键右</code> 光标跳转到当前单词 / 中文句的左 / 右侧开头位置</li>
<li><code>Command + Option + 方向键左 / Command + Option + 方向键右</code> 退回 / 前进到上一个操作的地方</li>
<li><code>Command + Shift + Delete</code> 跳转到最后一个编辑的地方</li>
<li><code>Option + F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>
<li><code>Command + B / Command +  鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>
<li><code>Command + Option + B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>
<li><code>Option + Space, Command + Y</code> 快速打开光标所在方法、类的定义</li>
<li><code>Control + Shift + B</code> 跳转到类型声明处</li>
<li><code>Command + U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>
<li><code>Control + 方向键下 / Control + 方向键上</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>
<li><code>Command + ] / Command + [</code> 移动光标到当前所在代码的花括号开始/结束位置</li>
<li><code>Command + F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>
<li><code>Control + H</code> 显示当前类的层次结构</li>
<li><code>Command + Shift + H</code> 显示方法层次结构</li>
<li><code>Control + Option + H</code> 显示调用层次结构</li>
<li><code>F2 / Shift + F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>
<li><code>F4 / Command + 方向键下</code> 编辑/查看代码源</li>
<li><code>Option + Home</code> 显示到当前文件的导航条</li>
<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>
<li><code>Option + F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>
<li><code>Control + 0...Control + 9</code> 定位到对应数值的书签位置</li>
<li><code>Command + F3</code> 显示所有书签</li>
</ul>
<h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul>
<li><code>F5</code> 复制文件到指定目录</li>
<li><code>F6</code> 移动文件到指定目录</li>
<li><code>Command + Delete</code> 在文件上为安全删除文件，弹出确认框</li>
<li><code>Shift + F6</code> 重命名文件</li>
<li><code>Command + F6</code> 更改签名</li>
<li><code>Command + Option + N</code> 一致性</li>
<li><code>Command + Option + M</code> 将选中的代码提取为方法</li>
<li><code>Command + Option + V</code> 提取变量</li>
<li><code>Command + Option + F</code> 提取字段</li>
<li><code>Command + Option + C</code> 提取常量</li>
<li><code>Command + Option + P</code> 提取参数</li>
</ul>
<h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul>
<li><code>Command + K</code> 提交代码到版本控制器</li>
<li><code>Command + T</code> 从版本控制器更新代码</li>
<li><code>Option + Shift + C</code> 查看最近的变更记录</li>
<li><code>Control + C</code> 快速弹出版本控制器操作面板</li>
</ul>
<h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul>
<li><code>Command + Option + J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>
<li><code>Command + J</code> 插入自定义动态代码模板</li>
</ul>
<h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul>
<li><code>Command + 1...Command + 9</code> 打开相应编号的工具窗口</li>
<li><code>Command + S</code> 保存所有</li>
<li><code>Command + Option + Y</code> 同步、刷新</li>
<li><code>Control + Command + F</code> 切换全屏模式</li>
<li><code>Command + Shift + F12</code> 切换最大化编辑器</li>
<li><code>Option + Shift + F</code> 添加到收藏夹</li>
<li><code>Option + Shift + I</code> 检查当前文件与当前的配置文件</li>
<li>Control + ` 快速切换当前的scheme（切换主题、代码样式等）</li>
<li><code>Command + ,</code> 打开IDEA系统设置</li>
<li><code>Command + ;</code> 打开项目结构对话框</li>
<li><code>Shift + Command + A</code> 查找动作（可设置相关选项）</li>
<li><code>Control + Shift + Tab</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>
</ul>
<h4 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h4><ul>
<li><code>Command + Shift +8</code> 竖编辑模式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。本文参考以下内容摘记下来，方便自己记忆。&lt;br&gt;&lt;strong&gt;参考地址：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
      <category term="IntelliJ IDEA" scheme="http://www.troylc.cc/categories/IntelliJ-IDEA/"/>
    
    
      <category term="IntelliJIDEA" scheme="http://www.troylc.cc/tags/IntelliJIDEA/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
  </entry>
  
  <entry>
    <title>macOs环境下搭建hexo静态博客</title>
    <link href="http://www.troylc.cc/macOs/2017/06/12/macos-02.html"/>
    <id>http://www.troylc.cc/macOs/2017/06/12/macos-02.html</id>
    <published>2017-06-12T09:26:15.000Z</published>
    <updated>2017-06-12T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo-Github Pages静态博客，需要node js的支持，由于我的环境，之前在有安装过hexo，本身已经用的是之前的较早版本的node js，最新由于工作需要，用到angular js，准备安装一个最新的node js,所以对node js有多版本支持的要求，因此我通过nvm来进行管理node的版本。  </p>
<h3 id="安装NVM工具"><a href="#安装NVM工具" class="headerlink" title="安装NVM工具"></a>安装NVM工具</h3><p>由于上一节安装了oh my zsh命令增强工具，安装nvm我是通过安装zsh的插件方式安装的，<br>参考：<a href="http://www.troylc.cc/macOs/2017/06/11/macos-01.html">macOs终端工具优化iTerm2+oh my zsh</a><br>如下所示：<br>首页：Clone zsh-nvm 到oh my zsh 自定义插件库中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm</div></pre></td></tr></table></figure>
<p>其次：修改oh my zsh的配置文件.zshrc，增加以下内容</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins+=(zsh-nvm) 或者加到之前的后面，用空格分开 plugins=(*** zsh-nvm)</div></pre></td></tr></table></figure>
<p>最后：如果要即时生效刚执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment">#或者关闭当前终端重新打开。</span></div></pre></td></tr></table></figure></p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node js"></a>安装node js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm list-remote</div><div class="line">        v0.1.14</div><div class="line">        v0.1.15</div><div class="line">        v0.1.16</div><div class="line">        ......</div><div class="line">       v0.12.15</div><div class="line">       v0.12.16</div><div class="line">       v0.12.17</div><div class="line">       v0.12.18</div><div class="line">       ......</div><div class="line">       v7.7.2</div><div class="line">       v7.10.0</div><div class="line">       v8.0.0</div><div class="line">       v8.1.0</div></pre></td></tr></table></figure>
<p>由于之前折腾hexo静态博客的时候用的是node js v0.12.17版本，安装此版本以便于和之前的hexo保持一致，最近工作中需要用到新版本的node js,所以再安装一个v8.1.0版本，让两个版本共存  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm install v0.12.17</div><div class="line">Downloading and installing node v0.12.17...</div><div class="line">Downloading https://nodejs.org/dist/v0.12.17/node-v0.12.17-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v0.12.17 (npm v2.15.1)</div><div class="line">Creating default <span class="built_in">alias</span>: default -&gt; v0.12.17</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm install v8.1.0</div><div class="line">Downloading and installing node v8.1.0...</div><div class="line">Downloading https://nodejs.org/dist/v8.1.0/node-v8.1.0-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v8.1.0 (npm v5.0.3)</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm list</div><div class="line">       v0.12.17</div><div class="line">-&gt;       v8.1.0</div><div class="line">default -&gt; v0.12.17</div><div class="line">node -&gt; stable (-&gt; v8.1.0) (default)</div><div class="line">stable -&gt; 8.1 (-&gt; v8.1.0) (default)</div><div class="line">iojs -&gt; N/A (default)</div><div class="line">lts/* -&gt; lts/boron (-&gt; N/A)</div><div class="line">lts/argon -&gt; v4.8.3 (-&gt; N/A)</div><div class="line">lts/boron -&gt; v6.11.0 (-&gt; N/A)</div></pre></td></tr></table></figure>
<p>node js已经安装完了，由于先安装的v0.12.17版本，所以被设置为默认的node版本，这里先用这个为默认版本，后续用到新版本时，再切换到新的版本中。</p>
<h3 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  npm install hexo-cli -g</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">......</div><div class="line">/Users/zdgqiuysn/.nvm/versions/node/v0.12.17/bin/hexo -&gt; /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/bin/hexo</div><div class="line">hexo-cli@1.0.3 /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── object-assign@4.1.1</div><div class="line">├── <span class="built_in">command</span>-exists@1.2.2</div><div class="line">├── minimist@1.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── chalk@1.1.3 (supports-color@2.0.0, escape-string-regexp@1.0.5, ansi-styles@2.2.1, strip-ansi@3.0.1, has-ansi@2.0.0)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, camel-case@3.0.0, cross-spawn@4.0.2)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">└── hexo-fs@0.2.0 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line"></div><div class="line"> zdgqiuysn@zqy  ~  npm install hexo --save</div><div class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</div><div class="line">npm WARN engine esprima@3.1.3: wanted: &#123;<span class="string">"node"</span>:<span class="string">"&gt;=4"</span>&#125; (current: &#123;<span class="string">"node"</span>:<span class="string">"0.12.17"</span>,<span class="string">"npm"</span>:<span class="string">"2.15.1"</span>&#125;)</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/node_modules/hexo/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">hexo@3.3.7 node_modules/hexo</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── pretty-hrtime@1.0.3</div><div class="line">├── hexo-front-matter@0.2.3</div><div class="line">├── archy@1.0.0</div><div class="line">├── titlecase@1.1.2</div><div class="line">├── text-table@0.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── moment-timezone@0.5.13</div><div class="line">├── moment@2.13.0</div><div class="line">├── lodash@4.17.4</div><div class="line">├── deep-assign@2.0.0 (is-obj@1.0.1)</div><div class="line">├── hexo-i18n@0.2.1 (sprintf-js@1.1.1)</div><div class="line">├── minimatch@3.0.4 (brace-expansion@1.1.7)</div><div class="line">├── strip-indent@1.0.1 (get-stdin@4.0.1)</div><div class="line">├── chalk@1.1.3 (escape-string-regexp@1.0.5, ansi-styles@2.2.1, supports-color@2.0.0, has-ansi@2.0.0, strip-ansi@3.0.1)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, cross-spawn@4.0.2, camel-case@3.0.0)</div><div class="line">├── js-yaml@3.8.4 (esprima@3.1.3, argparse@1.0.9)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">├── swig-extras@0.0.1 (markdown@0.5.0)</div><div class="line">├── swig@1.4.2 (optimist@0.6.1, uglify-js@2.4.24)</div><div class="line">├── hexo-fs@0.1.6 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line">├── hexo-cli@1.0.3 (object-assign@4.1.1, <span class="built_in">command</span>-exists@1.2.2, minimist@1.2.0, hexo-fs@0.2.0)</div><div class="line">├── nunjucks@2.5.2 (asap@2.0.5, yargs@3.32.0, chokidar@1.7.0)</div><div class="line">├── warehouse@2.2.0 (graceful-fs@4.1.11, JSONStream@1.3.1, is-plain-object@2.0.3, cuid@1.3.8)</div><div class="line">└── cheerio@0.20.0 (entities@1.1.1, dom-serializer@0.1.0, css-select@1.2.0, htmlparser2@3.8.3, jsdom@7.2.2)</div></pre></td></tr></table></figure>
<h3 id="hexo命令生成静态页面"><a href="#hexo命令生成静态页面" class="headerlink" title="hexo命令生成静态页面"></a>hexo命令生成静态页面</h3><p>由于之前已经搭建过了hexo的静态博客，这次只要安装完hexo，通过hexo命令生成页面和上传到github上就行，<br>参考：<a href="http://www.troylc.cc/categories/hexo/">Hexo教程(系列)-hexo静态博客</a></p>
<p>创建一篇新的文章，执行hexo g -d 操作</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy <span class="built_in">pwd</span></div><div class="line">/myspace/java/githubPages/Blog/hexo</div><div class="line"></div><div class="line">zdgqiuysn@zqy  hexo g -d</div><div class="line"> </div><div class="line">[master c4513b5] Site updated: 2017-06-11 19:31:39</div><div class="line"> 107 files changed, 598 insertions(+), 325 deletions(-)</div><div class="line"> rewrite archives/2017/06/index.html (72%)</div><div class="line"> rewrite archives/2017/index.html (79%)</div><div class="line"> rewrite archives/index.html (82%)</div><div class="line"> create mode 100644 categories/macOs/index.html</div><div class="line"> create mode 100644 images/macos/macos-01/1.png</div><div class="line"> create mode 100644 images/macos/macos-01/10.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/11.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/12.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/2.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/3.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/4.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/5.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/6.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/7.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/8.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/9.jpg</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-01.html</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-02.html</div><div class="line"> rewrite page/4/index.html (76%)</div><div class="line"> create mode 100644 page/5/index.html</div><div class="line"> create mode 100644 tags/git/index.html</div><div class="line"> rewrite tags/hexo/index.html (74%)</div><div class="line"> rewrite tags/linux/index.html (76%)</div><div class="line"> create mode 100644 tags/macOs/index.html</div><div class="line"> create mode 100644 tags/zsh/index.html</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To github.com:troychn/troychn.github.io.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:troychn/troychn.github.io.git.</div><div class="line">On branch master</div><div class="line">nothing to commit, working tree clean</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To git.coding.net:troylc/troylc.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@git.coding.net:troylc/troylc.git.</div><div class="line">INFO  Deploy <span class="keyword">done</span>: git</div></pre></td></tr></table></figure>
<p>打开浏览器输入<a href="http://www.troylc.cc/">http://www.troylc.cc/</a><br><img src="/images/macos/macos-02/1.png" alt="1"></p>
<p><strong>如何卸载Hexo：</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3.0.0版本执行</div><div class="line">npm uninstall hexo-cli -g</div><div class="line"></div><div class="line">之前版本执行</div><div class="line">npm uninstall hexo -g</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo-Github Pages静态博客，需要node js的支持，由于我的环境，之前在有安装过hexo，本身已经用的是之前的较早版本的node js，最新由于工作需要，用到angular js，准备安装一个最新的node js,所以对node js有多版本支持的要求，因
    
    </summary>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/macOs/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="hexo" scheme="http://www.troylc.cc/tags/hexo/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="git" scheme="http://www.troylc.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>macOs终端工具优化iTerm2+oh my zsh</title>
    <link href="http://www.troylc.cc/macOs/2017/06/11/macos-01.html"/>
    <id>http://www.troylc.cc/macOs/2017/06/11/macos-01.html</id>
    <published>2017-06-11T09:26:15.000Z</published>
    <updated>2017-06-11T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事,必先利其器。能从千百年传承下来，必定是经过各行各业的实践与验证，到今年仍然适用，今天就分享一些软件行业对程序员来说的利器(zsh+oh my zsh)这款屌炸天linux下的增加命令行的工具。</p>
<p>之前一直都是用着各种环境下的默认的终端工具，在逛github时，发现了zsh和oh my zsh增强终端工具，觉得很强大，让程序员的逼格瞬间提升一个T，但发现这工具其实老外都是几年前就开始逼格了，一直持续到现在，而且star都是好几万，要不怎么说开源质量方面老个都这么强大呢。虚心学习什么时候都不晚，既然发现了，咋也来逼格一下，并分享自己的安装与配置的过程，记录下逼格过程的快感；扯远了，回正题。</p>
<p>本次安装环境为macOS Sierra 10.12.5下安装与配置iTerm2+zsh+oh my zs，当然网上大神们也有其它环境下的针对(zsh+oh my zs)这工具的安装，后续也给出相关的链接地址。</p>
<h2 id="iTerm2终端工具"><a href="#iTerm2终端工具" class="headerlink" title="iTerm2终端工具"></a>iTerm2终端工具</h2><p>虽然mac系统自带有终端工具，但今天说的Iterm2在mac上显得更加强大与突出，它能使命令行工具变得更加美观与便捷。</p>
<h3 id="iTerm2安装"><a href="#iTerm2安装" class="headerlink" title="iTerm2安装"></a>iTerm2安装</h3><p>在iTerm2<a href="http://iterm2.com" target="_blank" rel="external">官方网站</a>下载最新版本的iTerm2安装包，解压之后将iTerm2.app程序文件移动或复制到应用程序(Applications)目录下，即可以完成安装。安装完成后，启动iTerm2，这里先分享我配置好的iTerm2的界面：<br><img src="/images/macos/macos-01/1.png" alt="iTerm2管理界面"></p>
<h3 id="iTerm2基本配置与操作"><a href="#iTerm2基本配置与操作" class="headerlink" title="iTerm2基本配置与操作"></a>iTerm2基本配置与操作</h3><h4 id="修改iTerm2配置方案-配置"><a href="#修改iTerm2配置方案-配置" class="headerlink" title="修改iTerm2配置方案-配置"></a>修改iTerm2配置方案-配置</h4><p>首页要选择一个iTerm2的配置主题，我们这里选择的是solarized，这个主题也很强大，有很多工具的配色方案可以选择，从github上下载主题到本地的一个目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:altercation/solarized.git</div></pre></td></tr></table></figure>
<p><img src="/images/macos/macos-01//2.jpg" alt="配置方案下载"><br>进入iterm2-colors-solarized目录，双击Solarized Dark.itermcolors和Solarized Light.itermcolors这两个文件。<br>然后进入iTerm2设置preferences-&gt;Profiles-&gt;Colors-&gt;Color Presets-&gt;选择刚刚安装的solarized Dark;<br><img src="/images/macos/macos-01/3.jpg" alt="设置iTerm2配置方案"></p>
<h4 id="让新窗口的命令行跟随上一个打开的窗口的目录-配置"><a href="#让新窗口的命令行跟随上一个打开的窗口的目录-配置" class="headerlink" title="让新窗口的命令行跟随上一个打开的窗口的目录-配置"></a>让新窗口的命令行跟随上一个打开的窗口的目录-配置</h4><p>iTerm2设置preferences-&gt;Profiles/Default/General,Working DIrectory选择 Reuse previous session’s directory<br><img src="/images/macos/macos-01/4.jpg" alt="跟随目录"></p>
<h4 id="保存ssh远程登录指令及相关用户名密码-配置"><a href="#保存ssh远程登录指令及相关用户名密码-配置" class="headerlink" title="保存ssh远程登录指令及相关用户名密码-配置"></a>保存ssh远程登录指令及相关用户名密码-配置</h4><p>在iTerm2中可以直接存储登录命令，如：<code>ssh root@localhost</code>然后就会出现提示，让我们输入密码，但这样每次输入密码也很烦恼，有时远程机器太多，真记不住，然而iTerm2中可以使用expect脚本实现。   </p>
<p>首先打开iTerm2设置preferences-&gt;Profiles-&gt;在左侧最下方有一个<code>+</code>和<code>-</code>，或者旁边的Other Actions来新建，删除，复制一个现有的profiles。  </p>
<p>然后接着上面的配置，在配置profiles的界面右侧中，填写相关的信息与快捷键，tags等。<br>最后在在配置profiles的界面右侧的Command下面的Send Text at start 输入我们编写的expect脚本来运行，如下所示<br>编写expect脚本  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ vim /usr/<span class="built_in">local</span>/bin/item2login.sh</div><div class="line"><span class="comment">#!/usr/bin/expect</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> timeout 30</div><div class="line">spawn ssh -o ServerAliveInterval=60 -p [lindex <span class="variable">$argv</span> 0] [lindex <span class="variable">$argv</span> 1]@[lindex <span class="variable">$argv</span> 2]</div><div class="line">expect &#123;</div><div class="line">        <span class="string">"(yes/no)?"</span></div><div class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</div><div class="line">        <span class="string">"password:"</span></div><div class="line">        &#123;send <span class="string">"[lindex <span class="variable">$argv</span> 3]\n"</span>&#125;</div><div class="line">&#125;</div><div class="line">interact</div></pre></td></tr></table></figure>
<p>这里<code>[lindex $argv 0]， [lindex $argv 1]， [lindex $argv 2]， [lindex $argv 3]</code> 分别代表着4个参数。<br>将item2login.sh保存到 /usr/local/bin 就可以了，然后在iTerm2中设置：脚本 端口号 用户名 服务器地址 <code>密码</code> 一定要一一对应,如果密码中含有特殊字符，就需要把密码这个参数用<code>`包起来</code>item2login.sh 22 root 10.211.55.4 ‘edfr@#3’  这里最后密码参数中含有@#，所以需要把密码用’’单引号包括起来的。`</p>
<p><img src="/images/macos/macos-01/5.jpg" alt=""></p>
<h4 id="iTerm2选择即为复制-操作"><a href="#iTerm2选择即为复制-操作" class="headerlink" title="iTerm2选择即为复制-操作"></a>iTerm2选择即为复制-操作</h4><p>在用命令行中进行复制，之前的命令行要么是不能使用常规复制快键来操作,要么是选中后再按复制command+C,然而在iTerm2这个功能就非常出色了,选中就自动复制成功.<br>然后我们只需要在粘贴的地方按下 command + v 即可粘贴成功。</p>
<h4 id="命令行界面全文查找功能-操作"><a href="#命令行界面全文查找功能-操作" class="headerlink" title="命令行界面全文查找功能-操作"></a>命令行界面全文查找功能-操作</h4><p>全文查找功能和在文本编辑器中一样,只需按下command + f 输入要查找的内容,即可在当前命令行界面查找并高亮显示,点击搜索框右侧箭头可以循环逐个定位，如下所示：<br><img src="/images/macos/macos-01/6.jpg" alt=""></p>
<h4 id="分隔屏幕显示-操作"><a href="#分隔屏幕显示-操作" class="headerlink" title="分隔屏幕显示-操作"></a>分隔屏幕显示-操作</h4><p>水平分隔 <code>command +shift +d</code>，垂直分隔 <code>command+d</code><br><img src="/images/macos/macos-01/7.jpg" alt=""></p>
<h4 id="命令行补全-操作"><a href="#命令行补全-操作" class="headerlink" title="命令行补全-操作"></a>命令行补全-操作</h4><p><code>command + ;</code>  自动补全命令，<code>command + shift +h</code> 把历史输入命令全部显示出来<br><img src="/images/macos/macos-01/8.jpg" alt=""><br><img src="/images/macos/macos-01/9.jpg" alt=""><br>iTerm2就先说这么多了，以后用到了新的功能，再更新分享吧。</p>
<h2 id="终端命令增强工具zsh和oh-my-zsh"><a href="#终端命令增强工具zsh和oh-my-zsh" class="headerlink" title="终端命令增强工具zsh和oh my zsh"></a>终端命令增强工具zsh和oh my zsh</h2><p>这两个命令行增强工具不单单是适用macOs，其它linux上也是支持的。安装说明可以参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH]</a>上的说明  </p>
<h3 id="macOs下安装zsh工具"><a href="#macOs下安装zsh工具" class="headerlink" title="macOs下安装zsh工具"></a>macOs下安装zsh工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ brew install zsh zsh-completions</div><div class="line">......</div><div class="line">***@localhost ~ zsh --version</div><div class="line">zsh 5.2 (x86_64-apple-darwin16.0)</div></pre></td></tr></table></figure>
<h3 id="macOs下安装oh-my-zsh"><a href="#macOs下安装oh-my-zsh" class="headerlink" title="macOs下安装oh my zsh"></a>macOs下安装oh my zsh</h3><p>oh my zsh是在zsh基础上增加了许多插件化的增强功能，安装说明也可以在<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh]</a>找到说明，以下以github参考进行安装：<br><strong>curl:</strong>  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p><strong>wget</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="oh-my-zsh-配置主题及添加自带的插件和自定义的插件"><a href="#oh-my-zsh-配置主题及添加自带的插件和自定义的插件" class="headerlink" title="oh my zsh 配置主题及添加自带的插件和自定义的插件"></a>oh my zsh 配置主题及添加自带的插件和自定义的插件</h4><p>oh my zsh安装完后，一般配置都会~/.zshrc配置文件中进行配置，<br><strong>配置主题agnoster：</strong>  </p>
<p>修改~/.zshrc文件，把主题修改为agnoster,<code>ZSH_THEME=&quot;agnoster&quot;</code>，修改完后重新打开终端就会生效，或者用<code>source ~/.zshrc</code>,让配置即时生效。由于agnoster需要Powerline字体的支持，不然终端的命令中中的三角会显示乱码。  </p>
<p><strong><a href="https://github.com/powerline/fonts" target="_blank" rel="external">安装Powerline字体</a>：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clone</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</div><div class="line"><span class="comment"># install</span></div><div class="line"><span class="built_in">cd</span> fonts</div><div class="line">./install.sh</div><div class="line"><span class="comment"># clean-up a bit</span></div><div class="line"><span class="built_in">cd</span> ..</div><div class="line">rm -rf fonts</div></pre></td></tr></table></figure>
<p>如果终端是iTerm2,需要在Term2设置preferences-&gt;Profiles/Default/Text-&gt;chang font中选择上面安装的powerline字体<br><img src="/images/macos/macos-01/10.jpg" alt=""></p>
<p><strong>配置oh my zsh插件</strong><br>oh my zsh中插件分为两种:<br>一种是oh my zsh默认自带的插件，自带的插件是在~/.oh-my-zsh/plugins/目录下，这里面有很多插件，一般应该是足够逼格了。配置插件只需要修改~/.zshrc文件中的<code>plugins=(git cp z vim-interaction npm)</code>  </p>
<p>另一种是oh my zsh自定义插件，处定义的插件是放在~/ .oh-my-zsh/custom/plugins/目录下，这个目录下的插件，就需要我们自己到网络上下载，然后再放到这个目录下，然后也是修改~/.zshrc文件中的<code>plugins=(git zsh-syntax-highlighting cp z vim-interaction npm zsh-nvm)</code>,<br><img src="/images/macos/macos-01/11.jpg" alt=""><br>比如我这里安装了一个自定义的插件zsh-syntax-highlighting，用来增强zsh在命令行中输入正确的命令为绿色，如果输入错误的命令则显示为红色。如图所示：<br><img src="/images/macos/macos-01/12.jpg" alt=""><br><strong>安装oh my zsh自定义插件的方法，参考<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="external">github源码</a></strong>：<br>首先将这个插件的源码克隆到oh-my-zsh的自定义plugins目录中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</div></pre></td></tr></table></figure>
<p>其实在oh my zsh配置文件中配置激活插件，修改~/.zshrc：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=( [plugins...] zsh-syntax-highlighting)</div></pre></td></tr></table></figure>
<p>最后执行<code>source ~/.zshrc</code>让插件即时生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>其它自定义的插件，安装方法类似，大家可以自行到网络上搜索oh my zsh的插件，我也是在慢慢的探索新逼格的新插件中。至此分享结束，后续也会持续关注有关macOs上的工具优化。希望能够帮到大家，相互学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事,必先利其器。能从千百年传承下来，必定是经过各行各业的实践与验证，到今年仍然适用，今天就分享一些软件行业对程序员来说的利器(zsh+oh my zsh)这款屌炸天linux下的增加命令行的工具。&lt;/p&gt;
&lt;p&gt;之前一直都是用着各种环境下的默认的终端工具，在逛git
    
    </summary>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/macOs/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="git" scheme="http://www.troylc.cc/tags/git/"/>
    
      <category term="zsh" scheme="http://www.troylc.cc/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>macOs使用技巧与问题记录-outlook2016无法搜索</title>
    <link href="http://www.troylc.cc/macOs/2017/06/11/macos-03-use-records.html"/>
    <id>http://www.troylc.cc/macOs/2017/06/11/macos-03-use-records.html</id>
    <published>2017-06-11T09:26:15.000Z</published>
    <updated>2017-06-11T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>#使用技巧：</p>
<p>#问题记录：</p>
<ol>
<li>macos最新版本安装outlook无法搜索的问题</li>
</ol>
<table>
<thead>
<tr>
<th>问题描述</th>
<th>问题环境</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>macos最新版本安装    outlook无法搜索的问题</td>
<td>Macos:10.13.3   Outlook:2016-16.11</td>
<td>outlook2016版本的搜索功能依赖于mac的聚焦搜索(spotlight)功能，这时我用spotlight来测试一下，果然spotlight功能也不好使用，于是想到怎么来重建这个索引</td>
</tr>
</tbody>
</table>
<ul>
<li><p>解决方法：<br>首先：关闭outlook2016的应用<br>其次：在命令行中输入以下内容</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">该命令用来关闭索引</span></div><div class="line">sudo mdutil -i off /</div><div class="line"><span class="meta">#</span><span class="bash">该命令用来删除索引</span></div><div class="line">sudo mdutil -E /</div><div class="line"><span class="meta">#</span><span class="bash">该命令用来重建索引</span></div><div class="line">sudo mdutil -i on /</div></pre></td></tr></table></figure>
<p>  然后用快捷键呼出spotlight菜单，随便输入一个词，就能看到提示，正在进行索引，并且告诉你重建索引的时间。于是搜索了一下，果然在spotlight里可以搜索了。<br>再次：进入outlook2016中，再试一下搜索，发现好像还是不行。于是从官网上找到了如下代码,来重新为outlook邮件创建索引  </p>
<pre><code class="shell">mdimport -g /Applications/Microsoft\ Outlook.app/Contents/Library/Spotlight/Microsoft\ Outlook\ Spotlight\ Importer.mdimporter -d1 ~/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile
</code></pre>
<p>通过以上命令操作完后，再次打开outlook2016，发现果然在outlook2016中就可以搜索了    </p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#使用技巧：&lt;/p&gt;
&lt;p&gt;#问题记录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;macos最新版本安装outlook无法搜索的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;问题描述&lt;/th&gt;
&lt;th&gt;问题环境&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;/tr&gt;
    
    </summary>
    
      <category term="macOs" scheme="http://www.troylc.cc/categories/macOs/"/>
    
    
      <category term="macOs" scheme="http://www.troylc.cc/tags/macOs/"/>
    
      <category term="outlook" scheme="http://www.troylc.cc/tags/outlook/"/>
    
  </entry>
  
  <entry>
    <title>RANCHER容器平台管理(一)-环境构建与配置</title>
    <link href="http://www.troylc.cc/rancher/2017/06/02/rancher-01.html"/>
    <id>http://www.troylc.cc/rancher/2017/06/02/rancher-01.html</id>
    <published>2017-06-02T09:26:15.000Z</published>
    <updated>2017-06-02T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>rancher是什么，它能为我们做些什么？rancher是一个开源的软件平台，使企业能够在生产环境中运行容器。使用Rancher，我们不再需要使用不同的开源技术从头开始构建容器服务平台。Rancher提供管理生产环境中的容器所需的整个软件堆栈。  </p>
<p>如下为rancher的功能图：<br><img src="/images/rancher/rancher-base/1.png" alt="rancher功能图"></p>
<h2 id="安装Rancher服务器"><a href="#安装Rancher服务器" class="headerlink" title="安装Rancher服务器"></a>安装Rancher服务器</h2><p>Rancher被部署为一组Docker容器。运行的牧场主是简单的启动两个容器。一个容器作为管理服务器，另一个容器在节点上作为代理。</p>
<p><strong>运行Rancher的要求：</strong>  </p>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。如：RancherOS，Ubuntu，RHEL / CentOS 7，这些都进行了更严格的测试。<ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>MySQL服务器应该有一个max_connections设置&gt; 150<ul>
<li>MYSQL配置要求<ul>
<li>选项1：用Antelope文件格式运行，默认值为 COMPACT</li>
<li>选项2：使用Barracuda运行MySQL5.7，默认ROW_FORMAT值为Dynamic  </li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>rancher目前的版本情况：</strong><br>Rancher服务器端的容器有2个不同的版本。</p>
<ul>
<li>rancher/server:latest标签将是我们最新的开发版本。这些构建将通过我们的CI自动化框架进行验证。这些版本不适用于部署在生产中。</li>
<li>rancher/server:stable标签将是我们最新的稳定发布版本。此标签是我们推荐用于生产的版本。  </li>
</ul>
<p>请不要使用任何带有rc{n}后缀的版本。这些rc构建意味着Rancher团队测试构建。</p>
<h3 id="安装一个单容器rancher-service"><a href="#安装一个单容器rancher-service" class="headerlink" title="安装一个单容器rancher service"></a>安装一个单容器rancher service</h3><ul>
<li>运行一个单容器的rancher service，<br>如果要将容器内的数据库保存到主机上的卷上，请通过绑定MySQL卷来启动Rancher服务器  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -v &lt;宿主机目录&gt;:/var/lib/mysql --restart=unless-stopped -p 8080:8080 rancher/server:stable</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>UI和API将在暴露端口上可用8080。在Docker镜像下载完成之后，Rancher成功启动后可能需要一两分钟的时间才能查看。<br>导航到以下网址：http://<server_ip>:8080。该<server_ip>是运行牧场主服务器主机的公网IP地址。</server_ip></server_ip></p>
<p>一旦UI启动并运行，您可以通过添加主机或从基础架构目录中选择一个容器编排。默认情况下，如果不选择不同的容器编排类型，环境将使用rancher默认的编排模型Cattle。将主机添加到Rancher之后，您可以从Rancher目录开始添加服务或启动模板。  </p>
<p>用浏览器打开<a href="http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher" target="_blank" rel="external">http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher</a> Server搭建成功了  </p>
<p><img src="/images/rancher/rancher-base/2.png" alt="rancher">  </p>
<h2 id="RANCHER管理"><a href="#RANCHER管理" class="headerlink" title="RANCHER管理"></a>RANCHER管理</h2><h3 id="设置权限访问"><a href="#设置权限访问" class="headerlink" title="设置权限访问"></a>设置权限访问</h3><p>第一次启动rancher后，它本身是没有给权限控制，所有人都可以访问，并且访问的权限是一样的。在RANCHER UI中我们可以看到系统管理旁边有一个红色的“！”，其实际标识当前的RANCHER是没有权限控制的，需要我们在系统管理下的二级菜单中选择访问控制，添加相应的管理用户后来启动访问权限的控制，Rancher支持多种权限控制方案，分别是：Active Directory、Azure AD、GitHub、Local Auth、OpenLDAP和SHIBBOLETH。我们这里选择简单的本地数据权限local Auth,即设置一个用户名密码，然后启动本地权限控制。<br><img src="/images/rancher/rancher-base/3.png" alt="访问权限"><br><img src="/images/rancher/rancher-base/4.png" alt="本地控制"><br>启动本地权限控制后，我们可以点击账号管理来添加更多的管理账号<br><img src="/images/rancher/rancher-base/5.png" alt="账号添加"><br>或者在系统管理的二级菜单中找到账号设置：<br><img src="/images/rancher/rancher-base/6.png" alt="账号设置"><br>点击添加账号，添加更多的管理账号：<br><img src="/images/rancher/rancher-base/7.png" alt="添加账号信息">  </p>
<h3 id="RANCHER环境管理"><a href="#RANCHER环境管理" class="headerlink" title="RANCHER环境管理"></a>RANCHER环境管理</h3><p>Rancher支持将资源分组到多个环境中。每个环境都从用于创建环境的环境模板定义的一组基础结构服务开始。每个环境都有自己的资源集，由一个或多个用户或组拥有。例如，您可以创建单独的“开发”，“测试”和“生产”环境，以保持彼此的隔离，并为您的整个组织提供“开发”访问权限，但将“生产”环境限制为较小的团队。所有主机和任何Rancher资源（如容器，基础设施服务等）都可以在环境中创建。</p>
<ol>
<li><p>添加RANCHER环境<br><img src="/images/rancher/rancher-base/8.png" alt="环境管理"><br><img src="/images/rancher/rancher-base/9.png" alt="环境管理界面"><br>点击添加环境界面，输入名称与描述，从rancher预制的模板中选择一个模板。然后添加具有访问权限的用户<br><img src="/images/rancher/rancher-base/10.png" alt="添加环境"><br><img src="/images/rancher/rancher-base/11.png" alt="给环境授权用户"><br>在添加完环境的列表中，也可以编辑对应的环境，编辑环境的内容和添加一样。<br><img src="/images/rancher/rancher-base/12.png" alt="编辑环境"></p>
</li>
<li><p>添加主机到RANCHER环境<br>主机是Rancher中最基本的资源单元，并且表示为虚拟或物理的任何Linux服务器，具有以下最低要求：</p>
</li>
</ol>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。RancherOS，Ubuntu，RHEL / CentOS 7进行了更严格的测试。</li>
<li><ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，请使用内核版本3.10.0-514.2.2.el7.x86_64或更高版本。使用7.3版或更高版本时包括。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>推荐CPU / AES-NI</li>
<li>能够通过预先配置的端口通过http或https与Rancher服务器进行通信。默认值为8080。</li>
<li>能够在同一环境下路由到任何其他主机，以利用Rancher对Docker容器的跨主机网络。</li>
<li>Rancher还支持Docker Machine，并允许您通过任何支持的驱动程序添加主机。</li>
<li>主机上必须安装rancher所支持的版本，可参考<a href="http://docs.rancher.com/rancher/v1.5/en/hosts/#supported-docker-versions" target="_blank" rel="external">rancher支持的docker版本</a></li>
</ul>
<p>从基础设施 - &gt; 主机选项卡，单击添加主机。<br><img src="/images/rancher/rancher-base/13.png" alt="添加主机"><br>点击保存，进入添加主机界面，选择不同类型的主机，这里添加本地服务器，可以给每个主机添加不同的labels<br><img src="/images/rancher/rancher-base/14.png" alt="添加主机1"><br><img src="/images/rancher/rancher-base/15.png" alt="添加主机2"><br>点击复制链接，在指定的本地的服务器上粘贴复制的内容，等待下截rancher agent下载运行后，关闭rancher的复制页面，在主机界面就会出现对应的主机信息：<br><img src="/images/rancher/rancher-base/16.png" alt="主机"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rancher是什么，它能为我们做些什么？rancher是一个开源的软件平台，使企业能够在生产环境中运行容器。使用Rancher，我们不再需要使用不同的开源技术从头开始构建容器服务平台。Rancher提供管理生产环境中的容器所需的整个软件堆栈。  &lt;/p&gt;
&lt;p&gt;如下为ra
    
    </summary>
    
      <category term="rancher" scheme="http://www.troylc.cc/categories/rancher/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="rancher" scheme="http://www.troylc.cc/tags/rancher/"/>
    
  </entry>
  
  <entry>
    <title>linux系列(三)-linux在线调整分区大小-centos7</title>
    <link href="http://www.troylc.cc/linux/2017/06/02/linux-03.html"/>
    <id>http://www.troylc.cc/linux/2017/06/02/linux-03.html</id>
    <published>2017-06-02T09:26:15.000Z</published>
    <updated>2017-06-02T09:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用和维护Linux服务器的过程中有时会出现需要调整分区大小的情况。如果配置了lvm（logical volume management）的话，<br>可以很方便使用lvextend/lvreduce无损失增加和减少lvm分区的大小。做任何磁盘操作请做好备份！</p>
<h2 id="summary（概要）"><a href="#summary（概要）" class="headerlink" title="summary（概要）"></a>summary（概要）</h2><ul>
<li>系统环境: centos7</li>
<li>情况：<ol>
<li>home：50G</li>
<li>root：50G</li>
<li>root分区不够用</li>
</ol>
</li>
<li>思路：把home分区的空间划一部分到root分区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 设置home分区大小为200G，释放300G空间</div><div class="line">$ lvreduce -L 200G /dev/centos/home</div><div class="line"></div><div class="line"># 将空闲空间扩展到root分区</div><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line"></div><div class="line"># 使用XFS文件系统自带的命令集增加分区空间</div><div class="line">$ xfs_growfs /dev/mapper/centos-root</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><p>挂载在根目录的分区 <code>/dev/mapper/centos-root</code> 爆满，占用100%</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ df -h</div><div class="line">Filesystem               Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/centos-root   50G   50G   19M 100% /</div><div class="line">devtmpfs                  32G     0   32G   0% /dev</div><div class="line">tmpfs                     32G     0   32G   0% /dev/shm</div><div class="line">tmpfs                     32G  2.5G   29G   8% /run</div><div class="line">tmpfs                     32G     0   32G   0% /sys/fs/cgroup</div><div class="line">/dev/mapper/centos-home  50G   33M  49G   1% /home</div><div class="line">/dev/sda1                497M  238M  259M  48% /boot</div><div class="line">tmpfs                    6.3G     0  6.3G   0% /run/user/0</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>挂载在根目录的分区空间太小，只有50G，而服务器 <code>home</code> 目录为非常用目录，挂在了近50G的空间。</p>
<p>思路：从 <code>centos-home</code> 分区划出40G空间到 <code>centos-root</code> 分区。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="1-查看各分区信息"><a href="#1-查看各分区信息" class="headerlink" title="1.查看各分区信息"></a>1.查看各分区信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# lvdisplay</div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/swap</div><div class="line">  LV Name                swap</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                16Tima-Q9Us-F2NC-sPqb-YmPo-qxjl-zQZdRB</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:17 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 2</div><div class="line">  LV Size                4.00 GiB</div><div class="line">  Current LE             1024</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:1</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/home</div><div class="line">  LV Name                home</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                r42xE3-WwVn-an7C-WQzJ-NK3R-vg10-aWnHwE</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:18 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.45 GiB</div><div class="line">  Current LE             3444</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:2</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/root</div><div class="line">  LV Name                root</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                d74yiv-jdym-sg5h-v49g-cpxZ-6Ttn-JtUoa7</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:20 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.05 GiB</div><div class="line">  Current LE             23054</div><div class="line">  Segments               2</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:0</div></pre></td></tr></table></figure>
<h4 id="2-umount卸载-home目录"><a href="#2-umount卸载-home目录" class="headerlink" title="2.umount卸载/home目录"></a>2.umount卸载/home目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# umount /home/</div></pre></td></tr></table></figure>
<h4 id="3-减少-home分区空间"><a href="#3-减少-home分区空间" class="headerlink" title="3.减少/home分区空间"></a>3.减少/home分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 释放 /dev/centos/home 分区 40G 的空间</div><div class="line"># 命令设置 /dev/centos/home 分区 10G空间</div><div class="line">$ lvreduce -L 10G /dev/centos/home</div><div class="line">WARNING: Reducing active logical volume to 200.00 GiB.</div><div class="line"> THIS MAY DESTROY YOUR DATA (filesystem etc.)</div><div class="line">Do you really want to reduce centos/home? [y/n]: y</div><div class="line"> Size of logical volume centos/home changed from 50.70 GiB (121778 extents) to 10.00 GiB (51200 extents).</div><div class="line"> Logical volume centos/home successfully resized.</div></pre></td></tr></table></figure>
<h4 id="4-增加-root分区空间"><a href="#4-增加-root分区空间" class="headerlink" title="4.增加/root分区空间"></a>4.增加/root分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line">Size of logical volume centos/root changed from 50.06 GiB (12816 extents) to 90.76 GiB (83394 extents).</div><div class="line">Logical volume centos/root successfully resized.</div></pre></td></tr></table></figure>
<h4 id="5-扩展XFS文件空间大小"><a href="#5-扩展XFS文件空间大小" class="headerlink" title="5.扩展XFS文件空间大小"></a>5.扩展XFS文件空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ xfs_growfs /dev/mapper/centos-root</div><div class="line">meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=3276800 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=0        finobt=0 spinodes=0</div><div class="line">data     =                       bsize=4096   blocks=13107200, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</div><div class="line">log      =internal               bsize=4096   blocks=6400, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">data blocks changed from 13107200 to 85395456</div></pre></td></tr></table></figure>
<p>由于xfs文件系统不能执行分区减小的调整！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# xfs_growfs /dev/mapper/centos-home</div><div class="line">xfs_growfs: /dev/mapper/centos-home is not a mounted XFS filesystem</div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line">mount: /dev/mapper/centos-home：不能读超级块</div></pre></td></tr></table></figure>
<p>这样，只能通过重新格式化这个分区，格式化后才能再次挂载到home下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mkfs.xfs /dev/mapper/centos-home -f</div><div class="line">meta-data=/dev/mapper/centos-home isize=512    agcount=4, agsize=41156608 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=1        finobt=0, sparse=0</div><div class="line">data     =                       bsize=4096   blocks=164626432, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</div><div class="line">log      =internal log           bsize=4096   blocks=80384, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">  </div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line"></div><div class="line">[root@localhost ~]# reboot</div></pre></td></tr></table></figure>
<p>再次查看分区，发现home分区已经减小了100G,只不过这个分区里之前的数据都没有了。</p>
<p>完成</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用和维护Linux服务器的过程中有时会出现需要调整分区大小的情况。如果配置了lvm（logical volume management）的话，&lt;br&gt;可以很方便使用lvextend/lvreduce无损失增加和减少lvm分区的大小。做任何磁盘操作请做好备份！&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="linux" scheme="http://www.troylc.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="shell" scheme="http://www.troylc.cc/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>如何在linux配置DockerSwarm的Linux防火墙</title>
    <link href="http://www.troylc.cc/docker-swarm/2017/05/16/docker-swarm-firewalld.html"/>
    <id>http://www.troylc.cc/docker-swarm/2017/05/16/docker-swarm-firewalld.html</id>
    <published>2017-05-16T02:10:07.000Z</published>
    <updated>2017-05-16T02:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker Swarm是Docker的一个功能，可以轻松地在规模上运行Docker主机和容器。Docker Swarm或Docker集群由一个或多个Dockerized主机组成，它们作为管理器节点和任意数量的工作节点。设置这样的系统需要仔细操纵Linux防火墙。</p>
<p>Docker Swarm正常工作所需的网络端口有： </p>
<p><strong>TCP端口 2376 </strong><br>用于安全Docker客户端通信。Docker Machine可以使用此端口。Docker Machine用于编排Docker主机。<br><strong>TCP端口 2377 </strong><br>。该端口用于Docker群集或群集节点之间的通信。它只需要在管理器节点上打开。<br><strong>TCP和UDP端口7946</strong><br>用于节点间的通信（容器网络发现）。<br><strong>4789</strong><br>用于覆盖网络流量的UDP端口（容器入口组网）。<br>注意：除了这些端口之外，<br><strong>端口22  </strong><br>（用于SSH流量）和特定服务在集群上运行所需的任何其他端口都必须打开。</p>
<p>在本文中，您将学习如何使用所有Linux发行版上可用的不同防火墙管理应用程序在Ubuntu 16.04上配置Linux防火墙。这些防火墙管理应用程序是防火墙，IPTables工具和UFW，简单防火墙。UFW是Ubuntu发行版上的默认防火墙应用程序，包括Ubuntu 16.04。虽然本教程涵盖三种方法，但每种方法都会产生相同的结果，因此您可以选择您最熟悉的方法。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a><strong>先决条件</strong></h1><p>在继续阅读本文之前，您应该：</p>
<p>设置构成集群的主机，包括至少一个群组管理器和一个群组工作程序。您可以按照本教程如何在Ubuntu 16.04上使用Docker Machine配置和管理远程Docker主机进行设置。<br><strong>注意：</strong><br>你会注意到命令（和本文中的所有命令）不是前缀sudo。这是因为假设您<br>docker-machine ssh<br>使用Docker Machine配置之后，使用该命令登录到服务器。</p>
<h3 id="方法1-使用UFW打开Docker-Swarm端口"><a href="#方法1-使用UFW打开Docker-Swarm端口" class="headerlink" title="方法1 - 使用UFW打开Docker Swarm端口"></a>方法1 - 使用UFW打开Docker Swarm端口</h3><p>如果您只是设置Docker主机，则UFW已经安装。您只需要启用和配置它。按照本指南了解有关在Ubuntu 16.04上使用UFW的更多信息。</p>
<p>在将用作Swarm管理器的节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 2377/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>这可能不是必需的，但是无论何时更改并重新启动防火墙，都不会重新启动Docker守护程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在作为工作者的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请启用它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>然后重新启动Docker守护进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是您需要做的，使用UFW打开Docker Swarm的必要端口。</p>
<h3 id="方法2-使用FirewallD打开Docker-Swarm端口"><a href="#方法2-使用FirewallD打开Docker-Swarm端口" class="headerlink" title="方法2 - 使用FirewallD打开Docker Swarm端口"></a>方法2 - 使用FirewallD打开Docker Swarm端口</h3><p>FirewallD是基于Fedora，CentOS和其他Linux发行版的默认防火墙应用程序。但是FirewallD也可以在其他Linux发行版中使用，包括Ubuntu 16.04。</p>
<p>如果您选择使用FirewallD而不是UFW，请先卸载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get purge ufw</div></pre></td></tr></table></figure>
<p>然后安装FirewallD：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install firewalld</div></pre></td></tr></table></figure>
<p>验证它是否正在运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure>
<p>如果没有运行，启动它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure>
<p>然后启用它，以便它在启动时启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld</div></pre></td></tr></table></figure>
<p>在作为Swarm管理器的节点上，使用以下命令打开必要的端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=2377/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：如果您犯了错误，需要删除条目，请键入：。</div><div class="line"></div><div class="line">firewall-cmd --remove-port=port-number/tcp —permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在将作为Swarm工作器的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>您已成功使用FirewallD打开Docker Swarm所需的端口。</p>
<h3 id="方法3-使用IPTables打开Docker群集端口"><a href="#方法3-使用IPTables打开Docker群集端口" class="headerlink" title="方法3 - 使用IPTables打开Docker群集端口"></a>方法3 - 使用IPTables打开Docker群集端口</h3><p>要在任何Linux发行版上使用IPtables，您必须先卸载任何其他防火墙工具。如果您正在从FirewallD或UFW切换，请先卸载它们。</p>
<p>然后安装iptables-persistent软件包，管理自动加载IPtables规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<p>接下来，使用以下命令刷新现有规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>现在您可以使用该iptables实用程序添加规则。该第一组命令应该在作为Swarm管理器的节点上执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2377 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>输入所有命令后，将规则保存到磁盘：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>在将用作Swarm工作的节点上，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>将这些新规则保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是为Docker Swarm使用IPTables打开所需的端口。您可以在教程如何使用Iptables防火墙中了解更多关于这些规则如何工作的信息。</p>
<p>如果您希望在使用此方法后切换到FirewallD或UFW，正确的方法是先停止防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent stop</div></pre></td></tr></table></figure>
<p>然后冲洗规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>最后，将现在的空表保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后你可以切换到UFW或FirewallD。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>FirewallD，IPTables工具和UFW是Linux世界中的三个防火墙管理应用程序。你刚刚学会了如何使用它来打开设置Docker Swarm所需的网络端口。您使用哪种方法只是个人偏好的问题，因为它们都具有同等的功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Docker Swarm是Docker的一个功能，可以轻松地在规模上运行Docker主机和容器。Docker Swarm或Docker集群由
    
    </summary>
    
      <category term="docker swarm" scheme="http://www.troylc.cc/categories/docker-swarm/"/>
    
    
      <category term="linux" scheme="http://www.troylc.cc/tags/linux/"/>
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>docker-swarm下部署mysql高可用(主从复制)</title>
    <link href="http://www.troylc.cc/mysql/2017/05/14/docker-swarm-mysql-ha.html"/>
    <id>http://www.troylc.cc/mysql/2017/05/14/docker-swarm-mysql-ha.html</id>
    <published>2017-05-14T07:50:47.000Z</published>
    <updated>2017-05-14T07:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在考虑MySQL数据库的高可用架构时，主要考虑以下几方面：</p>
<ul>
<li>如果数据库发生了宕机或者意外中断等故障，能尽快恢复数据库的可用性，尽可能的减少停机时间，保证业务不会因为数据库的故障而中断。</li>
<li>用作备份、只读副本等功能的非主节点的数据应该和主节点的数据实时或者最终保持一致。</li>
<li>当业务发生数据库切换时，切换前后的数据库内容应当一致，不会因为数据缺失或者数据不一致而影响业务。</li>
</ul>
<p>以下是在docker swarm环境中部署一个mysql的高可用环境，通过MaxScale的一个MySQL数据中间件，实现读写分离，并根据主从状态实现写库的自动切换。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>docker swarm环境</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.xxx</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<p>swarm集群的安装与管理，参考：<br><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a><br><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></p>
<p>查看swarm节点情况：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME         STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">60w2g6sd30iep1865qbi8tt87    docker-node02    Ready   Active        </div><div class="line">uy5jeecverzi7go34p5pkenz8 *  docker-master01  Ready   Active        Leader</div><div class="line">xgwetr888pf6ygkb3rh6zfjqx    docker-node01    Ready   Active</div></pre></td></tr></table></figure>
<h2 id="在swarm上部署myql高可用"><a href="#在swarm上部署myql高可用" class="headerlink" title="在swarm上部署myql高可用"></a>在swarm上部署myql高可用</h2><ul>
<li>创建一个swarm的全局网络：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network create -d overlay dbmysqlnet</span></div><div class="line">m26c1w6c1tilycfv8h6u1pogc</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">m26c1w6c1til        dbmysqlnet          overlay             swarm</div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个mysql cluster集群，设置副本为1，–replicas=1，当副本为1时 mariadb-cluster镜像为这个实例自动变成引导节点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker service create --name mysqldbcluster \</div><div class="line">--network dbmysqlnet \</div><div class="line">--replicas=1 \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">--env MYSQL_DATABASE=mytestdb \</div><div class="line">--env MYSQL_USER=mysqldbuser \</div><div class="line">--env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">toughiq/mariadb-cluster</div></pre></td></tr></table></figure>
<p>注：所提供的服务名称–name必须匹配环境变量DB_SERVICE_NAME镶有–env DB_SERVICE_NAME，并为数据库设置数据库名、root用户名的密码，以及为数据库单独创建的用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service create --name mysqldbcluster \</span></div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --replicas=1 \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">&gt; --env MYSQL_DATABASE=mytestdb \</div><div class="line">&gt; --env MYSQL_USER=mysqldbuser \</div><div class="line">&gt; --env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">&gt; toughiq/mariadb-cluster</div><div class="line">v7azlb9yvbv8uumoisddtd4pu</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  1/1       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02  Running        Running 27 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>再通过更新mysqldbcluster服务扩展mysql数据库，这个通过更新mysqldbcluster服务的2个副本的启动将出现在“cluster join”-mode中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service scale mysqldbcluster=3</span></div><div class="line">mysqldbcluster scaled to 3</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE             DESIRED STATE  CURRENT STATE          ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02    Running        Running 5 minutes ago         </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2  toughiq/mariadb-cluster:latest  docker-master01  Running        Running 7 seconds ago         </div><div class="line">wz5u3sdocykj  mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Running        Running 7 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建MaxScale代理服务并连接到mysqldbcluster   </li>
</ul>
<p>由于Swarm提供了一个负载平衡器，因此使用该Docker Swarm启用的数据库集群不需要MaxScale Proxy服务。因此，可以使用负载均衡器DNS名称连接到集群,上面运行的例子就是mysqldbcluster。它在同一个名字，由启动时提供–name。<br>但是MaxScale提供了一些关于负载平衡数据库流量的附加功能。它是获取有关群集状态的信息的简单方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">docker service create --name maxscale \</div><div class="line">--network dbmysqlnet \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env ENABLE_ROOT_USER=1 \</div><div class="line">--publish 3306:3306 \</div><div class="line">toughiq/maxscale</div><div class="line">```  </div><div class="line">要通过MaxScale禁用root对数据库的访问，只需设置--env ENABLE_ROOT_USER=0或删除该行即可。</div><div class="line">默认情况下禁用根访问。</div><div class="line"></div><div class="line">```bash</div><div class="line">[root@docker-master01 ~]# docker service create --name maxscale \</div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env ENABLE_ROOT_USER=1 \</div><div class="line">&gt; --publish 3306:3306 \</div><div class="line">&gt; toughiq/maxscale</div><div class="line">v50kns05a9f5ufb028g8u3zsr</div><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps maxscale</div><div class="line">ID            NAME        IMAGE                    NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">unny1x1y10hs  maxscale.1  toughiq/maxscale:latest  docker-node02  Running        Running 18 seconds ago</div></pre></td></tr></table></figure>
<p>可以查看到maxscale是在集群的docker-node02上，到这台主机上查看一下mysql集群的情况如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers</div><div class="line">Servers.</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">Server             | Address         | Port  | Connections | Status              </div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">10.0.0.4           | 10.0.0.4        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.5           | 10.0.0.5        |  3306 |           0 | Master, Synced, Running</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">[root@docker-node02 ~]#</div></pre></td></tr></table></figure>
<p>从上面的部署，mysql高可用集群基本上完成，我们可以做一下容灾的测试，比如停掉一台宿主机，或者停止一台集群节点上的容器，在通过以上命令，看看有什么结果，可以自行测试看看。  </p>
<h2 id="测试mysql高可用情况"><a href="#测试mysql高可用情况" class="headerlink" title="测试mysql高可用情况"></a>测试mysql高可用情况</h2><ul>
<li>首页查看master节点是那台机器，通过上面，可以看出ip为10.0.0.5为主节点，通过docker inspect,查看主节点在那台机器上，然后重启这台宿主机上的mysql容器，然后swarm集群会马上启动一个mysql容器，以达到mysql集群的副本数，</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">8a4d7deff9db        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   26 minutes ago      Up 26 minutes       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.wz5u3sdocykj1y0e47bbze1ti</div><div class="line">[root@docker-node01 ~]# docker stop 26d2e2a34089</div><div class="line">26d2e2a34089</div><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">2872c109eee8        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   24 seconds ago      Up 18 seconds       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.idh7t6r9h4nxivz1bm0hn7bi7</div></pre></td></tr></table></figure>
<ul>
<li>在通过swarm 管理节点，查看mysql集群的部署情况，通过maxscale中间件，查看mysql高可用情况<br>swarm manager节点查看：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps mysqldbcluster</div><div class="line">ID            NAME                  IMAGE                           NODE             DESIRED STATE  CURRENT STATE           ERROR                             PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1      toughiq/mariadb-cluster:latest  docker-node02    Running        Running 39 minutes ago                                    </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 33 minutes ago                                    </div><div class="line">boolbkf16bz2  mysqldbcluster.3      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 6 minutes ago                                     </div><div class="line">wz5u3sdocykj   \_ mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Shutdown       Failed 6 minutes ago    &quot;No such container: mysqldbclu…&quot;  </div><div class="line">```  </div><div class="line">maxscale中查看</div></pre></td></tr></table></figure>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Down<br>——————-+—————–+——-+————-+——————–<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">等待swarm集群再恢复所有节点后查看：</div></pre></td></tr></table></figure></p>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Slave, Synced, Running<br>——————-+—————–+——-+————-+——————–<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在考虑MySQL数据库的高可用架构时，主要考虑以下几方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果数据库发生了宕机或者意外中断等故障，能尽快恢复数据库的可用性，尽可能的减少停机时间，保证业务不会因为数据库的故障而中断。&lt;/li&gt;
&lt;li&gt;用作备份、只读副本等功能的非主节点的数据应该
    
    </summary>
    
      <category term="mysql" scheme="http://www.troylc.cc/categories/mysql/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="mysql" scheme="http://www.troylc.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用docker构建与部署spring-cloud的微服务(七)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/24/spring-cloud-deploy.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/24/spring-cloud-deploy.html</id>
    <published>2017-04-24T01:17:43.000Z</published>
    <updated>2017-04-24T10:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先总结一下前面一系列的spring-cloud微服务学习，我们用eureka做服务的注册中心，通过向服务注册中心注册了三个简单的服务，如：用户微服务(microservice-provider-userservice)，商品微服务(microservice-consumer-productservice)，异构平台的评论微服务(microservice-sidecar-comment),在商品微服务中，通过spring cloud FeignClient来进行微服务之间的相互调用，通过sprig cloud zuul来暴露外维系统想访问微服务的接口，并用spring cloud config搭建了一个分布式的配置中心，通过改造用户微服务，来实现分布式的服务的配置功能。用spring cloud bus以及kafka的消息机制来实现服务配置的无停机就能自动刷新加载。本系列相关的文章，在本节就结束了，此系统纯属老司机的学习总结，欢迎大家指正交流，达到相互学习的目的。</p>
<h2 id="此系统列参考文档："><a href="#此系统列参考文档：" class="headerlink" title="此系统列参考文档："></a>此系统列参考文档：</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud config不知道怎么配置</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html">SpringCloud构微服务之-配置中心</a></td>
</tr>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<p>本节通过maven和idea的插件来构建docker镜像，编写docker-compose.yml来编排各服务节点，通过compose命令在docker-swarm中部署前面章节编写的微服务内容。</p>
<h2 id="微服务镜像的构建。"><a href="#微服务镜像的构建。" class="headerlink" title="微服务镜像的构建。"></a>微服务镜像的构建。</h2><p>在构建镜像之前，我们需要把一台内容的docker的远程API开放，以及内网搭建了有自己的docker私有仓库等功能。参考<a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移</a>、<a href="http://www.troylc.cc/docker/2016/07/31/docker-02.html">docker系列(二)使用Docker-Remote-API</a></p>
<p>镜像的构建如果是maven管理的java程序，我们可以通过maven的插件来进行镜像构建，如以下几个项目，都是通过maven插件来构建的。<br>首先在项目的主pom文件中加载一下docker的maven插件docker-maven-plugin，如：<br><img src="/images/spring-cloud/docker-swarm/1.png" alt="build"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    ......</div><div class="line">    &lt;!--添加利用maven插件构建docker镜像的插件依赖--&gt;</div><div class="line">    &lt;pluginManagement&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;0.4.13&lt;/version&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/pluginManagement&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
<ul>
<li>microservice-eureka-service注册中心镜像构建，在pom.xml插件处加入如下配置，  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">    &lt;executions&gt;</div><div class="line">        &lt;execution&gt;</div><div class="line">            &lt;id&gt;build-image&lt;/id&gt;</div><div class="line">            &lt;phase&gt;install&lt;/phase&gt;</div><div class="line">            &lt;goals&gt;</div><div class="line">                &lt;goal&gt;build&lt;/goal&gt;</div><div class="line">            &lt;/goals&gt;</div><div class="line">        &lt;/execution&gt;</div><div class="line">    &lt;/executions&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</div><div class="line">        &lt;dockerHost&gt;http://10.211.55.4:8372&lt;/dockerHost&gt;</div><div class="line">        &lt;pushImage&gt;true&lt;/pushImage&gt;&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</div><div class="line">        &lt;!--镜像名称--&gt;</div><div class="line">        &lt;imageName&gt;$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</div><div class="line">        &lt;!--镜像的基础版本--&gt;</div><div class="line">        &lt;baseImage&gt;java:openjdk-8-jdk-alpine&lt;/baseImage&gt;</div><div class="line">        &lt;!--镜像启动参数--&gt;</div><div class="line">        &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt;</div><div class="line">        &lt;!--&lt;imageTags&gt;</div><div class="line">            &lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;</div><div class="line">        &lt;/imageTags&gt;--&gt;</div><div class="line">        &lt;resources&gt;</div><div class="line">            &lt;resource&gt;</div><div class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</div><div class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</div><div class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</div><div class="line">            &lt;/resource&gt;</div><div class="line">        &lt;/resources&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p><img src="/images/spring-cloud/docker-swarm/2.png" alt="maven的构建"><br>执行maven的构建：<br><img src="/images/spring-cloud/docker-swarm/3.png" alt="maven的构建"><br>查看对应docker环境上的镜像</p>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        4 minutes ago       186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-provider-userservice用户微服务镜像构建<br>在用户微服务的pom文件增加构建镜像配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/4.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        6 minutes ago       215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        36 minutes ago      186 MB</div><div class="line"></div><div class="line">```   </div><div class="line"></div><div class="line">  </div><div class="line">- microservice-consumer-productservice商品微服务镜像构建  </div><div class="line">在商品微服务的pom文件增加构建镜像的配置，并执行install命令构建镜像   </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/5.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：</div></pre></td></tr></table></figure>
<p>[root@docker-master01 ~]# docker images<br>REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE<br>tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB<br>tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB<br>tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  </div><div class="line">- microservice-sidecar-comment异构平台接入微服务构建代码  </div><div class="line">在接入微服务异构平台的接入项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像     </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/6.png)   </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-config-service配置中心服务的构建代码<br>在微服务配置中心的项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/7.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        5 minutes ago       204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-nodejs-comment异构平台构建方法<br>此服务是用nodes编写的，和现有的微服务不是一种语言，如果要接入到微服务中，并部署到docker-swarm集群中，其一就是把自己的服务提供rest接口供微服务接入项目sidecar来配置接入，其二把编写的整个项目docker化。<br>此项目的docker化，因为没有maven来管理，所以需要编写一个dockerfile文件来进行构建，并且构建的方式是通过idea工具的docker插件来操作的。<br>Dockerfile文件内容：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">FROM node:7.7.4-alpine</div><div class="line"></div><div class="line"># Create app directory</div><div class="line">RUN mkdir -p /usr/src/app</div><div class="line">WORKDIR /usr/src/app</div><div class="line"></div><div class="line"># Install app dependencies</div><div class="line">COPY package.json /usr/src/app/</div><div class="line">#RUN npm install</div><div class="line"></div><div class="line"># Bundle app source</div><div class="line">COPY . /usr/src/app</div><div class="line"></div><div class="line">EXPOSE 3000</div><div class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">docker插件构建nodejs项目的镜像：  </div><div class="line">1. 首页在idea工具中安装docker插件  </div><div class="line">![idea插件](/images/spring-cloud/docker-swarm/8.png)  </div><div class="line">2. 其次配置cloud连接远程docker环境  </div><div class="line">![插件配置](/images/spring-cloud/docker-swarm/9.png)  </div><div class="line">3. 最后通过docker控制台构建与运行镜像  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/10.png)  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/11.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        4 minutes ago       66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        About an hour ago   204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        About an hour ago   184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        About an hour ago   187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        About an hour ago   215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div></pre></td></tr></table></figure>
<p>7.microservice-api-gateway微服务的API对外网关镜像构建<br><img src="/images/spring-cloud/docker-swarm/12.png" alt="maven构建镜像">  </p>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-api-gateway               0.1.0                     208d6656085a        2 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        34 minutes ago      66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        2 hours ago         204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        2 hours ago         184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        2 hours ago         187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        2 hours ago         215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">到此运行本次微服务的所有镜像都已经构建完成。版本都为0.1.0  </div><div class="line">  </div><div class="line">## docker-compose.yml的编写</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于eurekaService1的节点，它需要连接http://eurekaService2/3:951X/eureka/，因此需要配置该服务的名称是eurekaService1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:    # 高可用eureka注册节点2</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:    # 高可用eureka注册节点3</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:    # 商品微服务</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:  #服务网关服务</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:    #异构平台商品评价服务</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:    #接入异构平台的微服务</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  zookeeper:       #zookeeper服务，主要是协助kafka消息中心的</div><div class="line">    image: tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;2181:2181&quot;</div><div class="line">  kafka:      #kafka消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9092:9092&quot;</div><div class="line">    environment:</div><div class="line">      - &apos;KAFKA_ADVERTISED_HOST_NAME=kafka&apos;</div><div class="line">      - &apos;KAFKA_ADVERTISED_PORT=9092&apos;</div><div class="line">      - &apos;KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181&apos;</div><div class="line">    depends_on:</div><div class="line">      - zookeeper</div><div class="line">  rabbitmq:     #rqbbitmq消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">    hostname: &apos;my-rabbit&apos;</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;5672:5672&quot;</div><div class="line">      - &quot;15672:15672&quot;</div><div class="line">  configService:    #微服务的配置中心</div><div class="line">    image: tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9518:9518&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:      #用户微服务，且通过config service中获取相关配置信息</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - configService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<h2 id="docker-compose在docker-swarm中部署微服务"><a href="#docker-compose在docker-swarm中部署微服务" class="headerlink" title="docker compose在docker-swarm中部署微服务"></a>docker compose在docker-swarm中部署微服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml microservice</div><div class="line">Creating network microservice_eureka-net</div><div class="line">Creating service microservice_apiGateway</div><div class="line">Creating service microservice_kafka</div><div class="line">Creating service microservice_configService</div><div class="line">Creating service microservice_eurekaService2</div><div class="line">Creating service microservice_userService</div><div class="line">Creating service microservice_zookeeper</div><div class="line">Creating service microservice_sidecarComment</div><div class="line">Creating service microservice_eurekaService3</div><div class="line">Creating service microservice_nodeComment</div><div class="line">Creating service microservice_rabbitmq</div><div class="line">Creating service microservice_eurekaService1</div><div class="line">Creating service microservice_productService</div><div class="line">[root@docker-master01 docker-compose]# docker stack services microservice</div><div class="line">ID            NAME                         MODE        REPLICAS  IMAGE</div><div class="line">3gjonfu6ebh5  microservice_kafka           replicated  1/1       tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">5qen0mvwwa5x  microservice_productService  replicated  1/1       tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">be7j9n6vdm69  microservice_apiGateway      replicated  1/1       tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">ifjhurz97i80  microservice_eurekaService2  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">j6gsnfet2esa  microservice_configService   replicated  1/1       tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">js55ijbe4crw  microservice_userService     replicated  1/1       tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">lqriwyu6npph  microservice_nodeComment     replicated  1/1       tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">qc7s6fm4lnqg  microservice_sidecarComment  replicated  1/1       tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">t67efu3aw48t  microservice_eurekaService3  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">tn33z3ebce8a  microservice_zookeeper       replicated  1/1       tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">wiqe6x1pqpx4  microservice_rabbitmq        replicated  1/1       tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">xd5owqhu7h61  microservice_eurekaService1  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps microservice</div><div class="line">ID            NAME                           IMAGE                                                      NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">3b6wsnap14jw  microservice_productService.1  tcr:5000/myhub/microservice-consumer-productservice:0.1.0  docker-node01    Running        Running 12 seconds ago         </div><div class="line">pwir78iy5gwr  microservice_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node01    Running        Running 31 seconds ago         </div><div class="line">sp3hcoibmh6l  microservice_rabbitmq.1        tcr:5000/myhub/rabbitmq:3.6.9-management-alpine            docker-node01    Running        Running 20 seconds ago         </div><div class="line">gwdrnfyyoia1  microservice_nodeComment.1     tcr:5000/myhub/microservice-nodejs-comment:0.1.0           docker-node02    Running        Running 26 seconds ago         </div><div class="line">rva9h3xc82ub  microservice_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-master01  Running        Running 25 seconds ago         </div><div class="line">a3qy8xlqq65p  microservice_sidecarComment.1  tcr:5000/myhub/microservice-sidecar-comment:0.1.0          docker-node01    Running        Running 15 seconds ago         </div><div class="line">d8s8lpwj7pp6  microservice_zookeeper.1       tcr:5000/myhub/zookeeper:3.4.9                             docker-node02    Running        Running 21 seconds ago         </div><div class="line">ob1z00fyzhov  microservice_userService.1     tcr:5000/myhub/microservice-provider-userservice:0.1.0     docker-master01  Running        Running 24 seconds ago         </div><div class="line">xjrakh9bxh0j  microservice_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node02    Running        Running 30 seconds ago         </div><div class="line">7y2nczvpi7wl  microservice_configService.1   tcr:5000/myhub/microservice-config-service:0.1.0           docker-node02    Running        Running 18 seconds ago         </div><div class="line">85k0gkln3k7p  microservice_kafka.1           tcr:5000/myhub/kafka:0.10.1.1                              docker-master01  Running        Running 25 seconds ago         </div><div class="line">csniz9pc8bbs  microservice_apiGateway.1      tcr:5000/myhub/microservice-api-gateway:0.1.0              docker-master01  Running        Running 29 seconds ago</div></pre></td></tr></table></figure>
<p>出现以上结束，表示通过compose对docker化的微服务部署就完成了。下面我们来验证一下</p>
<h2 id="测试相关微服务的功能"><a href="#测试相关微服务的功能" class="headerlink" title="测试相关微服务的功能"></a>测试相关微服务的功能</h2><p>查看一下eureka注册中心，我们可以看到所有的微服务都已经注册上来了，我们把之前每篇的spring cloud的验证环节的操作，都在此操作一下，就会看到相同的结束，这里就一一验证了，大家可根据上面的源码及部署方式自行测试一下。<br><img src="/images/spring-cloud/docker-swarm/13.png" alt="测试"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先总结一下前面一系列的spring-cloud微服务学习，我们用eureka做服务的注册中心，通过向服务注册中心注册了三个简单的服务，如：用户微服务(microservice-provider-userservice)，商品微服务(microservice-consume
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud构微服务之-配置中心(六)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html</id>
    <published>2017-04-16T10:39:21.000Z</published>
    <updated>2017-04-16T10:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面的章节介绍，我们使用Eureka实现了服务中心；通过Feign实现服务间的消费，为了使服务更为健壮，使用Hystrix的熔断来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制，为了整合异构平台提供的微服务，我们通过sidecar组件把异构平台的微服务集成到了整个微服务的环境中。<br>当我们的业务系统越来越庞大复杂的时候，各种配置就会层出不群。一旦配置修改了，那么我们就是必须修改后停服务，然后再上线，如果服务少，我们可以手动来操作，如果是成千上百的服务，如果是手动操作，肯定就不合适宜了，这个时候我们就需要考虑分布式配置管理，spring cloud config配置中心就是为了解决这个问题的组件， </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="spring-cloud-微服务配置中心"><a href="#spring-cloud-微服务配置中心" class="headerlink" title="spring cloud 微服务配置中心"></a>spring cloud 微服务配置中心</h2><p>spring cloud config 由server端和client端组成，下面我就来结合git仓库来实现分布式配置中心搭建，在此章节我们搭建一个configServer,一个configClient端，并把服务端注册到eureka中心，以便于configClient通过eureka上注册的信息连接到configServer上,通过在configServer中集成spring cloud bus利用rabbitmq或kafka消息机制来实现配置更新后的自动刷新。</p>
<p><img src="/images/spring-cloud/config/1.png" alt="image"></p>
<h2 id="配置中心-服务端"><a href="#配置中心-服务端" class="headerlink" title="配置中心 服务端"></a>配置中心 服务端</h2><h3 id="创建configService"><a href="#创建configService" class="headerlink" title="创建configService"></a>创建configService</h3><ul>
<li>新建一个microservice-config-service的子工程，添加spring-cloud-config-server、spring-cloud-starter-eureka、spring-boot-starter-security、spring-cloud-starter-bus-kafka，如果消息总线是rabbitmq则替换kafka的依赖为spring-cloud-starter-bus-amqp  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!--配置需要认证所需要引用的包--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在新建的工程中的spring boot启动类上加上@EnableConfigServer、@EnableDiscoveryClient注册，第一个注解是启动此项目为configService端，第二个注册是把这个configService注册到Eureka上。  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableConfigServer</div><div class="line">public class ConfigServceApplication</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServceApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置configservice的配置文件，在bootstrap.yml,添加安全认证的配置，git仓库的配置,eurekaservice的配置，zookeeper-kafka的配置。如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 9518</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: configService</div><div class="line">    prefer-ip-address: true</div><div class="line">    ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">    instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">     defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/   #把configservice注册到eureka上，以便于客户端通过eureka上注册的信息找到configservice</div><div class="line">#实现的基本的 HttpBasic 的认证</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: true     # 开启基于HTTP basic的认证</div><div class="line">  user:</div><div class="line">    name: cadmin      # 配置登录的账号是user</div><div class="line">    password: cadmin123   # 配置登录的密码是eadmin123</div><div class="line">#</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-config-service</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: https://git.oschina.net/gittroylc/microservice-config-repo  #配置git仓库位置</div><div class="line">          clone-on-start: true #在启动的时候克隆仓库</div><div class="line">          search-paths: &apos;&#123;application&#125;&apos; #配置仓库路径下的相对搜索位置，可以配置多个</div><div class="line">          username: username   #填写git仓库的用户名</div><div class="line">          password: password   #填写git仓库的密码</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181</div><div class="line">          brokers: kafka:9092</div></pre></td></tr></table></figure>
<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>创建一个git仓库microservice-config-repo目录作为配置仓库，在仓库下创建一个microservice-provider-userservice对应的微服务文件夹，并根据不同环境新建了下面四个配置文件：<br><img src="/images/spring-cloud/config/2.png" alt="image"><br>microservice-provider-userservice-dev.yml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  jpa:</div><div class="line">    generate-ddl: false</div><div class="line">    show-sql: true</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">  datasource:                           # 指定数据源</div><div class="line">    platform: h2                        # 指定数据源类型</div><div class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</div><div class="line">    data: classpath:data.sql            # 指定h2数据库的insert脚本</div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    root: INFO</div><div class="line">    org.hibernate: INFO</div><div class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</div><div class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</div><div class="line">    com.troylc.cloud: debug</div><div class="line"></div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line"># 测试配置属性的自动刷新功能，增加一个自定义的属性文件</div><div class="line">from: git-dev-15.0</div></pre></td></tr></table></figure>
<p>在这四个文件中都有一个from的属性，其属性值分别为：<br>from: git-default-1.0<br>from: git-dev-15.0<br>from: git-prod-1.0<br>from: git-test-1.0  </p>
<h3 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h3><p>启动eurekaservice和configservice两个应用，并把相关的zookeeper,kafka等服务启动，我这里是开发阶段，zookeeper,kafka是用docker镜像启动的服务，两个服务是直接通过idea启动来验证，后面全搭建完成了，直接通过一个docker-compose.yml来统一部署所有服务  </p>
<p>在浏览器中输入：<a href="http://configservice:9518/microservice-provider-userservice/dev" target="_blank" rel="external">http://configservice:9518/microservice-provider-userservice/dev</a><br><img src="/images/spring-cloud/config/3.png" alt="image"><br><img src="/images/spring-cloud/config/4.png" alt="image"><br>从返回的json可以看出，propertySources读取microservice-provider-userservice-dev.yml，还读取了microservice-provider-userservice.yml。从读取的情况来看，如果没有microservice-provider-userservice-dev.yml文件，他会默认的读取microservice-provider-userservice.yml文件</p>
<p>对git仓库中的配置文件microservice-provider-userservice.yml的访问方式有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -s http://localhost:端口/test-service/dev |jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.properties</div><div class="line">curl -s http://localhost:端口/test-service-dev.json | jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.yml</div></pre></td></tr></table></figure>
<p>HTTP服务的git资源构成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.properties</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</div></pre></td></tr></table></figure>
<ul>
<li>{application}:对应客户端的spring.application.name属性;</li>
<li>{profile}:对应客户端的 spring.profiles.active属性(逗号分隔的列表);</li>
<li>{label}:对应服务端属性配置文件的版本。对应git是:提交id,分支名称或tag。  </li>
</ul>
<p>优先级  </p>
<ul>
<li>profiles的优先级高于defaults,有多个profiles,最后一个起作用。</li>
<li>/{application}/{profile}[/{label}]优先级高于application.properties</li>
</ul>
<p>其它方式配置仓库位置：  </p>
<ul>
<li>Spring Cloud Config提供本地存储配置的方式。只需要设置属性spring.profiles.active=native，Config Server会从应用的src/main/resource目录下搜索配置文件。  </li>
<li>spring.cloud.config.server.native.searchLocations=file:F:/properties/ 属性来指定配置文件的位置。  </li>
</ul>
<p>虽然Spring Cloud Config提供了其它配置仓库的功能，但为了能更好的管理内容和版本控制，推荐使用git的方式。</p>
<h2 id="微服务端-configclient-配置"><a href="#微服务端-configclient-配置" class="headerlink" title="微服务端(configclient)配置"></a>微服务端(configclient)配置</h2><p>在开发完成并测试验证了configservice之后，下面我们看看如何在微服务应用中获取相关的配置信息。</p>
<ul>
<li>改造之前我们开发的用户微服务的项目，在pom文件中增加spring-cloud-starter-config、spring-cloud-starter-bus-kafka两个依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"> &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>新建一个配置文件bootstrap.yml,指定configservice相关的配置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-provider-userservice</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      username: cadmin  #configservice认证的用户名</div><div class="line">      password: cadmin123   #认证密码</div><div class="line">      label: master   # 仓库的分支节点</div><div class="line">      discovery:  </div><div class="line">        enabled: true  #开启通过eureka上configservice找到相应的配置</div><div class="line">        service-id: microservice-config-service #configservice注册在Eureka上的service-id</div><div class="line">      profile: dev   #仓库中对应文件的环境，如dev、prod、test等</div><div class="line">      fail-fast: true</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181  </div><div class="line">          brokers: kafka:9092</div><div class="line">    bus:</div><div class="line">      trace:</div><div class="line">        enabled: true   #Spring Cloud Bus事件传播的细节</div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line">#服务状态UNKNOWN</div><div class="line">#如果把微服务的 eureka.client.healthcheck.enabled 属性配置在 bootstrap.yml 里面，可能会引起一些不良反应</div><div class="line">#比如，实际测试发现，Eureka 首页显示的服务状态，本应是 UP(1)，却变成大红色的粗体 UNKNOWN(1)</div><div class="line">#    healthcheck:</div><div class="line">#      enabled: true</div></pre></td></tr></table></figure>
<p>指定相关的configservice的eureka上的注册ID，指定zookeeper、kafka服务配置信息。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.stream.kafka.binder.brokers</td>
<td>Kafka的服务端列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultBrokerPort</td>
<td>Kafka服务端的默认端口，当brokers属性中没有配置端口时，就会个默认这端口</td>
<td>9092</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.zk-nodes</td>
<td>Kafka服务端连接的ZooKeeper节点列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultZkPort</td>
<td>ZooKeeper节点的默认端口，当zk-nodes属性中没有配置端口时，就会默认这个端口</td>
<td>2181</td>
</tr>
</tbody>
</table>
<p>通过以上配置说明，可以看出，如果我们在配置文件中不配置相关的zookeeper和kafka信息时，就会使用以上说明的默认值</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>上面这些属性必须配置在bootstrap.yml，configservice的内容才能正确加载。因为通过bootstrap.yml的加载优先级比configService的高，configservice加载优先于application.yml，所以如果你把上面的配置写在application.yml中，相当于默认不是从configService中读取的配置信息，而是spring boot的默认加载。启动的时候就会看到加载的配置，不是你指定的configservice的服务器,而是默认的<a href="http://localhost:8888服务中加载" target="_blank" rel="external">http://localhost:8888服务中加载</a></p>
<ul>
<li>在userController中添加一个restAPI的方法，用来从配置仓库中读取一个from属性,如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@RefreshScope</div><div class="line">@RestController</div><div class="line">public class UserController &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;from&#125;&quot;)</div><div class="line">    private String fromInfostr;</div><div class="line">    /**</div><div class="line">     * 获取所有用户</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;获取自动刷新后的配置文件中from中的值&quot;, notes = &quot;获取自动刷新后的配置文件&quot;)</div><div class="line">    @GetMapping(&quot;/from&quot;)</div><div class="line">    public ResultInfo geFromInfo() &#123;</div><div class="line">        String fromInfostr = null;</div><div class="line">        try &#123;</div><div class="line">            fromInfostr = this.fromInfostr;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SUCCESS.getState(),ReturnInfoEnum.SUCCESS.getStateInfo(), fromInfostr);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    .......</div></pre></td></tr></table></figure>
<h2 id="微服务端测试"><a href="#微服务端测试" class="headerlink" title="微服务端测试"></a>微服务端测试</h2><p>启动configservice和configclient，为了便于观察消息总线刷新配置的效果，可以启动多个不同端口的configclient。可以看到configservice以及多个configclient都连接上由Kafka实现的消息总线。直接访问每个configclient上的/from请求，查看获取到的from配置的内容，可以看到一开始，都是之前写的默认值。之后，修改Git中对应配置文件中的参数内容，向configservice发送POST请求：/bus/refresh，再去访问各个configclient上的/from请求，可以看到各客户端上的配置都刷新为最新配置内容。<br>eureka上看启动的服务：<br><img src="/images/spring-cloud/config/5.png" alt="image"><br>请求configclient上的查看from属性值：<br><img src="/images/spring-cloud/config/6.png" alt="image"><br>修改git仓库对应的microservice-provider-userservice-dev.yml文件的from的值，并提交，push到git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from: git-dev-16.0</div></pre></td></tr></table></figure>
<p>再从本地ssh中用curl向configServic发送一个/bus/refresh刷新请求，会看到configservice和configclient端应用程序会打出刷新后重新加载配置文件的日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST cadmin:cadmin123@configService:9518/bus/refresh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2017-04-14 17:04:19.078  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - deregister  status: 200</div><div class="line">2017-04-14 17:04:19.092  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient</div><div class="line">2017-04-14 17:04:19.093  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">.......</div><div class="line">2017-04-14 17:04:19.224  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1492160659224 with initial instances count: 2</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.230  WARN 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1492160659230, current=UP, previous=DOWN]</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514: registering service...</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] o.s.cloud.bus.event.RefreshListener      : Received remote refresh request. Keys refreshed [config.client.version, from]</div><div class="line">2017-04-14 17:04:19.237  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - registration status: 204</div><div class="line">2017-04-14 17:04:19.248  INFO 4600 --- [afka-listener-1] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values:</div></pre></td></tr></table></figure>
<p>再次请求configclient的/from<br><img src="/images/spring-cloud/config/7.png" alt="image"></p>
<p>至此spring cloud 的基本使用总结到这里，后续会出一个在docker swarm中把这些微服务，通过docker-compose进行统一编排部署。</p>
<p>本系列的完整示例：<br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面的章节介绍，我们使用Eureka实现了服务中心；通过Feign实现服务间的消费，为了使服务更为健壮，使用Hystrix的熔断来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制，为了整合异构平台提供
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud构建异构平台的微服务之-sidecar(五)</title>
    <link href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html"/>
    <id>http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html</id>
    <published>2017-04-13T05:52:51.000Z</published>
    <updated>2017-04-13T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面的几个章节介绍，我们使用Spring Cloud的Eureka实现了服务注册中心；而服务间通过Feign实现服务的消费，为了使得服务更为健壮，使用Hystrix的熔断机制来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，为了使外部系统能够调用微服务注册中心注册的各种微服务，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制。<br>本节我们主要讨论一下异构平台（比如，nodejs、python、php等提供的Rest接口服务）的服务，怎么通过spring cloud组件对这些服务注册到eureka中心以及与在微服务中怎么和异构平台的服务进行通信。这里主要是通过spring cloud的sidecar来构建异构平台的服务注册与通信。<br>sidecar灵感来自Netflix Prana。它可以获取注册中心的所有微服务实例的信息(例如host，端口等)的http api。也可以通过嵌入的Zuul代理来代理服务调用，该代理从Eureka获取其路由条目。 Spring Cloud配置服务器可以通过主机查找或通过Zuul代理直接访问。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="开启sidecar之旅"><a href="#开启sidecar之旅" class="headerlink" title="开启sidecar之旅"></a>开启sidecar之旅</h2><p>通过Node.js构建的评论服务通过Sidecar接入Spring Cloud微服务集群的整体架构，如下图：<br><img src="/images/spring-cloud/sidecar/11.png" alt="整体架构"> </p>
<h3 id="nodejs应用-简单的评论服务"><a href="#nodejs应用-简单的评论服务" class="headerlink" title="nodejs应用-简单的评论服务"></a>nodejs应用-简单的评论服务</h3><ul>
<li>首页需要构建一个异构平台的rest服务，我们这里采用nodejs创建，为了能够让微服务的注册中心知道这个异构平台的服务，需要在异构平台应用中实现一个健康检查接口，让Sidecar可以把这个服务实例的健康情况告诉Eureka注册中心。如：<br><img src="/images/spring-cloud/sidecar/1.png" alt="image"><br>创建一个nodejs的工程，在工程中实现一个健康接口并且返回如下形式的json文档： </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot;:&quot;UP&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编写一个首页和获取评论接口，该评论接口主要是供其它在微服务来调用，如：<br><img src="/images/spring-cloud/sidecar/2.png" alt="image"><br>评价返加接口的json数据如：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    status: &apos;100&apos;,</div><div class="line">    message: &apos;操作成功&apos;,</div><div class="line">    data: &#123;</div><div class="line">        commentId: &apos;123456&apos;,</div><div class="line">        userId: &apos;2&apos;,</div><div class="line">        productId: &apos;1&apos;,</div><div class="line">        commentContext: &apos;这个品质不错，快递速度很快！&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="把nodejs的评论服务接入微服务的sidecar应用"><a href="#把nodejs的评论服务接入微服务的sidecar应用" class="headerlink" title="把nodejs的评论服务接入微服务的sidecar应用"></a>把nodejs的评论服务接入微服务的sidecar应用</h3><ul>
<li>创建一个sidecar的子项目，在pom文件中添加sidecar的依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-netflix-sidecar&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在spring boot的启动类上，加上启动sidecar的注解@EnableSidecar</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableSidecar</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SidecarApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SidecarApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看看@EnableSidecar都做了些什么事，点击这个注解查看源码，我们发现hystrix熔断器、Eureka服务发现、zuul代理，这些组件都启动了，可以看到这个注解是一个组合注解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@EnableCircuitBreaker</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableZuulProxy</div><div class="line">@Target(&#123;ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Import(&#123;SidecarConfiguration.class&#125;)</div><div class="line">public @interface EnableSidecar &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置sidecar的application.yml属性文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-sidecar-comment</div><div class="line">server:</div><div class="line">  port: 9517</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">     hostname: sidecar</div><div class="line">     prefer-ip-address: true</div><div class="line">     ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">     instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">      serviceUrl:</div><div class="line">        defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">      healthcheck:</div><div class="line">        enabled: true</div><div class="line">        </div><div class="line">sidecar:</div><div class="line">  port: 3000    # Node.js微服务的端口</div><div class="line">  health-uri: http://sidecar:3000/health   # Node.js微服务的健康检查URL</div><div class="line"></div><div class="line">hystrix:</div><div class="line">  command:</div><div class="line">    default:</div><div class="line">      execution:</div><div class="line">        timeout:</div><div class="line">          enabled: false</div></pre></td></tr></table></figure>
<p>这里主要说明以下两个属性：<br>sidecar.port属性代表Node.js应用监听的端口。<br>sidecar.health-uri是一个用来模拟Spring Boot应用健康检查的接口的，接口返加的json必须是”status”:”UP”。</p>
<h3 id="消费端微服务定义"><a href="#消费端微服务定义" class="headerlink" title="消费端微服务定义"></a>消费端微服务定义</h3><p>在之前的商品微服务中，定义一个feign接口，写上对应的sidecar 的服务ID，如：</p>
<p><img src="/images/spring-cloud/sidecar/3.png" alt="image"></p>
<p>FeignClient可以根据serviceId去Eureka注册中心上找对应的服务信息，如果服务的实例不止一个，就会使用Ribbon进行客户端负载均衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@FeignClient(name = &quot;microservice-sidecar-comment&quot;)</div><div class="line">public interface CommentServiceFeign &#123;</div><div class="line">    @RequestMapping(value = &quot;/comment&quot;, method = RequestMethod.GET)</div><div class="line">    ResultInfo getComment() throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="compose部署并测试"><a href="#compose部署并测试" class="headerlink" title="compose部署并测试"></a>compose部署并测试</h2><p>通过docker-compose在swarm部署并启动所有服务进行测试，docker-compose文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.0.3</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>登录eureka，可看所有服务<br><img src="/images/spring-cloud/sidecar/4.png" alt="image"></p>
<p>通过sidecar访问一下nodejs的提供的健康检查接口：<br><img src="/images/spring-cloud/sidecar/5.png" alt="image"><br>这说明zuul功能已经开启了<br>通过<a href="http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：" target="_blank" rel="external">http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：</a><br><img src="/images/spring-cloud/sidecar/51.png" alt="image"><br>通过商品微服务访问nodejs异构平台构建的评论微服务信息，<br><img src="/images/spring-cloud/sidecar/6.png" alt="image"></p>
<p><strong>附代码仓库地址：</strong><br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过前面的几个章节介绍，我们使用Spring Cloud的Eureka实现了服务注册中心；而服务间通过Feign实现服务的消费，为了使得服务更为健壮，使用Hystrix的熔断机制来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，为了使外部系统能够调用微服务注册中心注册
    
    </summary>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/categories/spring-cloud/"/>
    
    
      <category term="docker" scheme="http://www.troylc.cc/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.troylc.cc/tags/swarm/"/>
    
      <category term="docker-compose" scheme="http://www.troylc.cc/tags/docker-compose/"/>
    
      <category term="java" scheme="http://www.troylc.cc/tags/java/"/>
    
      <category term="spring-boot" scheme="http://www.troylc.cc/tags/spring-boot/"/>
    
      <category term="spring cloud" scheme="http://www.troylc.cc/tags/spring-cloud/"/>
    
  </entry>
  
</feed>
