<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Dockerfile制作openjdk-8u131-jdk-alpine基础镜像]]></title>
      <url>http://www.troylc.cc/docker/2017/07/28/dockerfile-alpine-tz-curl.html</url>
      <content type="html"><![CDATA[<p>从dockerhub上下载openjdk:8u131-jdk-alpine本身是一个轻量级的操作系统，只带有jre，不带任何jre外的软件，如果想增加其它软件就需要我们自己在此基础上再构建自己想的基础镜像。</p>
<h2 id="下载openjdk-8u131-jdk-alpine基础镜像"><a href="#下载openjdk-8u131-jdk-alpine基础镜像" class="headerlink" title="下载openjdk:8u131-jdk-alpine基础镜像"></a>下载openjdk:8u131-jdk-alpine基础镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">openjdk-8-time                  latest                 ab859b2c2910        14 hours ago        107.8 MB</div><div class="line">nginx                           1.13.3-alpine          ba60b24dbad5        2 weeks ago         15.51 MB</div><div class="line">openjdk                         8u131-jdk-alpine       478bf389b75b        4 weeks ago         101 MB</div></pre></td></tr></table></figure>
<p>本次在openjdk:8u131-jdk-alpine基础上增加时区文件和CURL、TREE等工具。</p>
<hr>
<h2 id="编写Dockerfile文件，并构建alpine基础镜像"><a href="#编写Dockerfile文件，并构建alpine基础镜像" class="headerlink" title="编写Dockerfile文件，并构建alpine基础镜像"></a>编写Dockerfile文件，并构建alpine基础镜像</h2><p>由于docker构建的时候要到alpine官网上下载软件，因我的构建服务器不能上外网，所在在构建的时候特殊增加http_proxy代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# vim Dockerfile</div><div class="line">FROM openjdk:8u131-jdk-alpine</div><div class="line"># MAINTAINER指令允许你给将要制作的镜像设置作者信息</div><div class="line">MAINTAINER iucheng &lt;liu_cheng@topsec.com.cn&gt;</div><div class="line"></div><div class="line">#ADD cacerts /etc/ssl/certs/java/cacerts</div><div class="line"></div><div class="line">ARG http_proxy</div><div class="line"></div><div class="line">ENV http_proxy=$&#123;http_proxy&#125;</div><div class="line">ENV https_proxy=$&#123;http_proxy&#125;</div><div class="line"></div><div class="line"># 设置时区 中国的时区有多种表述 分别为: UTC+8:00 GMT+8 # 写/etc/TZ, 不要设置TZ环境变量 ENV TZ UTC+8:00</div><div class="line">RUN  apk update \</div><div class="line">    &amp;&amp; apk add --no-cache \</div><div class="line">    &amp;&amp; apk add curl bash tree tzdata &amp;&amp; \</div><div class="line">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</div><div class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"></div><div class="line">ENV http_proxy=</div><div class="line">ENV https_proxy=</div><div class="line"></div><div class="line">[root@registry-jenkins ~]# docker build --build-arg http_proxy=http://192.168.72.188:808 -t openjdk:8u131-jdk-tz-curl-alpine .</div><div class="line">Sending build context to Docker daemon 49.15 kB</div><div class="line">Step 1 : FROM openjdk:8u131-jdk-alpine</div><div class="line"> ---&gt; 478bf389b75b</div><div class="line">Step 2 : MAINTAINER iucheng &lt;liu_cheng@topsec.com.cn&gt;</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; 0fe3b8ac71b7</div><div class="line">Step 3 : ARG http_proxy</div><div class="line"> ---&gt; Running in 2069da05a659</div><div class="line"> ---&gt; 74c725e41083</div><div class="line">Removing intermediate container 2069da05a659</div><div class="line">Step 4 : ENV http_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in ac0bf48d4b6c</div><div class="line"> ---&gt; 8c058688cfa8</div><div class="line">Removing intermediate container ac0bf48d4b6c</div><div class="line">Step 5 : ENV https_proxy $&#123;http_proxy&#125;</div><div class="line"> ---&gt; Running in 55e645b7c4b8</div><div class="line"> ---&gt; df34875db960</div><div class="line">Removing intermediate container 55e645b7c4b8</div><div class="line">Step 6 : RUN apk update     &amp;&amp; apk add --no-cache     &amp;&amp; apk add curl bash tree tzdata &amp;&amp;     ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;     echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</div><div class="line"> ---&gt; Running in 387ca24a223a</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">v3.6.2-40-gf1c202674f [http://dl-cdn.alpinelinux.org/alpine/v3.6/main]</div><div class="line">v3.6.2-32-g6f53cfcccd [http://dl-cdn.alpinelinux.org/alpine/v3.6/community]</div><div class="line">OK: 8436 distinct packages available</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz</div><div class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz</div><div class="line">OK: 99 MiB in 51 packages</div><div class="line">(1/10) Installing ncurses-terminfo-base (6.0-r7)</div><div class="line">(2/10) Installing ncurses-terminfo (6.0-r7)</div><div class="line">(3/10) Installing ncurses-libs (6.0-r7)</div><div class="line">(4/10) Installing readline (6.3.008-r5)</div><div class="line">(5/10) Installing bash (4.3.48-r1)</div><div class="line">Executing bash-4.3.48-r1.post-install</div><div class="line">(6/10) Installing libssh2 (1.8.0-r1)</div><div class="line">(7/10) Installing libcurl (7.54.0-r0)</div><div class="line">(8/10) Installing curl (7.54.0-r0)</div><div class="line">(9/10) Installing tree (1.7.0-r0)</div><div class="line">(10/10) Installing tzdata (2017a-r0)</div><div class="line">Executing busybox-1.26.2-r5.trigger</div><div class="line">OK: 111 MiB in 61 packages</div><div class="line"> ---&gt; d2ed313ab5f3</div><div class="line">Removing intermediate container 387ca24a223a</div><div class="line">Step 7 : ENV http_proxy</div><div class="line"> ---&gt; Running in 104af5cd52df</div><div class="line"> ---&gt; 7c2f38e0d8fd</div><div class="line">Removing intermediate container 104af5cd52df</div><div class="line">Step 8 : ENV https_proxy</div><div class="line"> ---&gt; Running in d93dd0df2c4a</div><div class="line"> ---&gt; 4ad2436778d3</div><div class="line">Removing intermediate container d93dd0df2c4a</div><div class="line">Successfully built 4ad2436778d3</div></pre></td></tr></table></figure>
<p>构建命中中增加了<code>--build-arg http_proxy=http://192.168.72.188:808</code>，主要是为了构建过程中通过代理上外网，从外网下载所需的软件。</p>
<h2 id="验证构建的镜像是否成功"><a href="#验证构建的镜像是否成功" class="headerlink" title="验证构建的镜像是否成功"></a>验证构建的镜像是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@registry-jenkins ~]# docker run -it --rm --name jdk-test openjdk:8u131-jdk-tz-curl-alpine /bin/bash</div><div class="line">bash-4.3# date</div><div class="line">Fri Jul 28 09:44:59 CST 2017</div><div class="line">bash-4.3# curl</div><div class="line">curl: try &apos;curl --help&apos; or &apos;curl --manual&apos; for more information</div><div class="line">bash-4.3# exit</div><div class="line">exit</div><div class="line">[root@registry-jenkins ~]#</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker-registry私有仓库及web ui镜像管理]]></title>
      <url>http://www.troylc.cc/docker/2017/06/20/docker-registry-web.html</url>
      <content type="html"><![CDATA[<hr>
<p><img src="/images/docker/registry/registry.jpeg" alt="registry"></p>
<p>docker提供了开放式的dockerhub公共中央仓库，我们可以从这上面下载到自己工作和学习中想要的各种镜像，但由于dockerhub是国外的服务器，很多时候国内是很难下载，这里我们可以通过国内的中转服务器来下载。<br>国内常用的中转服务器有：  </p>
<ol>
<li>daocloud： 在<a href="https://hub.daocloud.io/" target="_blank" rel="external">daocloud</a>通过<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">安装daocloud加载器</a>可以下载到需要的镜像</li>
<li>阿里云容器hub：在<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">开发者平台的-&gt;容器hub</a>中搜索镜像，如果想通过阿里云服务来下载镜像，需要登录阿里云-&gt;产品与服务-&gt;云计算基础服务-&gt;弹性计算-&gt;容器服务-&gt;镜像与方案-&gt;镜像-&gt;镜像仓库控制台-&gt;Docker Hub 镜像站点中有安装阿里云的dockerhub加载器</li>
<li>网易蜂巢镜像中心：在<a href="https://c.163.com/hub#/m/home/" target="_blank" rel="external">网易蜂巢镜像中心</a>搜索镜像，然后复制docker pull 链接，到服务器上执行就行</li>
</ol>
<hr>
<p>以上是公共的docker仓库获取镜像的方法，但在国内大部分公司的情况是不能把项目上用到的镜像放到公网上，一般从公网上只会下载基础版本的镜像，然后基于这个基础版本的镜像自己在本地build镜像，由于在本地build的镜像，不能在内部网络中直接下载，上传，所以需要一个内部环境的私有仓库，做为内部镜像中心来让容器，可以在内容任何地方下载上传。<br>搭建私有仓库有如下的优点：</p>
<ul>
<li>节省网络带宽，提升Docker部署速度，不用每个镜像从DockerHub上去下载，只需从私有仓库下载就可；</li>
<li>私有镜像，包含公司敏感信息，不方便公开对外，只在公司内部使用。<br>本文就是基于以上目的，并参考<a href="https://docs.docker.com/registry/" target="_blank" rel="external">docker官方关于docker registry的构建</a>来进行搭建，并通过web ui来进行管理。</li>
</ul>
<hr>
<h3 id="从公共仓库中下载搭建私有仓库的镜像"><a href="#从公共仓库中下载搭建私有仓库的镜像" class="headerlink" title="从公共仓库中下载搭建私有仓库的镜像"></a>从公共仓库中下载搭建私有仓库的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull registry</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker pull hyper/docker-registry-web</span></div><div class="line">[root@docker-node01 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                      TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">registry                        latest                    9d0c4eabab4d        5 weeks ago         33.2MB</div><div class="line">registry:5000/myhub/rabbitmp    latest                    758cc906ba57        2 months ago        37.5MB</div><div class="line">tcr:5000/myhub/rabbitmq         3.6.9-management-alpine   758cc906ba57        2 months ago        37.5MB</div><div class="line">hyper/docker-registry-web       latest                    0db5683824d8        8 months ago        599MB</div></pre></td></tr></table></figure>
<h3 id="启用身份验证搭建私有仓库"><a href="#启用身份验证搭建私有仓库" class="headerlink" title="启用身份验证搭建私有仓库"></a>启用身份验证搭建私有仓库</h3><p>令牌认证需要具有PEM格式的RSA私钥和与该密钥相匹配的证书</p>
<h4 id="生成私钥和证书"><a href="#生成私钥和证书" class="headerlink" title="生成私钥和证书"></a>生成私钥和证书</h4><p>编写生成证书的shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim generate-key.s</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">openssl req \</div><div class="line">    -new \</div><div class="line">    -newkey rsa:4096 \</div><div class="line">    -days 3650 \</div><div class="line">    -subj <span class="string">"/CN=localhost"</span> \</div><div class="line">    -nodes \</div><div class="line">    -x509 \</div><div class="line">    -keyout /devops/registry-web/conf/auth.key \</div><div class="line">    -out /devops/registry/conf/auth.cert</div><div class="line"></div><div class="line">:wq 保存</div><div class="line">[root@docker-node01 devops]<span class="comment"># chmod +x generate-key.sh</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># ./generate-key.sh</span></div><div class="line">Generating a 4096 bit RSA private key</div><div class="line">.................................................................++</div><div class="line">..................++</div><div class="line">writing new private key to <span class="string">'/devops/registry-web/conf/auth.key'</span></div><div class="line">-----</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry</span></div><div class="line">registry/     registry-web/</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry/conf/</span></div><div class="line">auth.cert</div><div class="line">[root@docker-node01 devops]<span class="comment"># ls /devops/registry-web/conf/</span></div><div class="line">auth.key</div></pre></td></tr></table></figure>
<h4 id="创建registry配置文件"><a href="#创建registry配置文件" class="headerlink" title="创建registry配置文件"></a>创建registry配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry/config.yml</span></div><div class="line">version: 0.1</div><div class="line"></div><div class="line">storage:</div><div class="line">  filesystem:</div><div class="line">    rootdirectory: /var/lib/registry</div><div class="line">  delete:</div><div class="line">    enabled: <span class="literal">true</span></div><div class="line"></div><div class="line">http:</div><div class="line">  addr: 0.0.0.0:5000</div><div class="line"></div><div class="line">auth:</div><div class="line">  token:</div><div class="line">    realm: http://localhost:8090/api/auth</div><div class="line">    service: registry:5000</div><div class="line">    issuer: <span class="built_in">test</span></div><div class="line">    rootcertbundle: /etc/docker/registry/auth.cert</div><div class="line"></div><div class="line"><span class="built_in">log</span>:</div><div class="line">  level: info</div><div class="line"></div><div class="line">notifications:</div><div class="line">  endpoints:</div><div class="line">    - name: listener</div><div class="line">      url: http://localhost:8090/api/notification</div><div class="line">      timeout: 500ms</div><div class="line">      threshold: 5</div><div class="line">      backoff: 1s</div><div class="line"></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>storage</code>选项是必需的<br>|—<code>filesystem</code> 使用本地磁盘来存储注册表文件。它是开发的理想选择，适用于一些小规模的生产应用<br>|—<code>delete</code> 用delete结构启用通过摘要删除图像斑点和清单。它默认为false,可以设置true来启用<br><code>log</code>小节配置了日志系统的行为。日志记录系统将所有内容输出到stdout<br>|—<code>level</code>设置测井输出的级别。允许值是error，warn，info，和debug。默认是info<br><code>http</code>选项详细说明托管registry的HTTP服务器的配置。<br>|—<code>addr</code>服务器应该接受连接的地址。表单取决于网络类型（使用HOST:PORTTCP和FILE一个UNIX套接字。<br><code>auth</code>是验证方式，该选项是可选的。<br>|—<code>token</code>基于令牌的身份验证允许您将身份验证系统与注册表分离。它是一种具有高度安全性的已建立的认证范例。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>realm</td>
<td>是</td>
<td>registry服务器认证的API接口，这是通过registry-web中的权限来认证</td>
</tr>
<tr>
<td>service</td>
<td>是</td>
<td>指定需要被认证的服务。</td>
</tr>
<tr>
<td>issuer</td>
<td>是</td>
<td>令牌颁发者的名称。发行人将其插入到令牌中，因此它必须与为发行者配置的值相匹配</td>
</tr>
<tr>
<td>rootcertbundle</td>
<td>是</td>
<td>根证书包的绝对路径。此捆绑包包含用于签署身份验证令牌的证书的公共部分</td>
</tr>
</tbody>
</table>
<p><code>notifications</code>，registry通知，此项不是必须的，可选选项<br>|—<code>endpoints</code>结构包含可以接受事件通知的命名服务（URL）的列表。具体参考<a href="https://docs.docker.com/registry/configuration/#notifications" target="_blank" rel="external">官网说明</a></p>
<h4 id="创建regsitry的web-ui管理镜像的配置文件"><a href="#创建regsitry的web-ui管理镜像的配置文件" class="headerlink" title="创建regsitry的web ui管理镜像的配置文件"></a>创建regsitry的web ui管理镜像的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /devops/registry-web/config.yml</span></div><div class="line">registry:</div><div class="line">   url: http://registry:5000/v2</div><div class="line">   name: registry:5000</div><div class="line">   <span class="built_in">readonly</span>: <span class="literal">false</span></div><div class="line">   auth:</div><div class="line">     enabled: <span class="literal">true</span></div><div class="line">     key: /conf/auth.key</div><div class="line">     issuer: <span class="built_in">test</span></div><div class="line">:wq 保存</div></pre></td></tr></table></figure>
<p>说明：<br><code>url</code>-指定registry的地址<br><code>name</code>-regsitry私服的名称<br><code>readonly</code>-是否为只读模式，设置为true时不允许删除<br><code>auth</code>-registry-web的验证方式<br>|—<code>enabled</code> 是否启动验证<br>|—<code>key</code> 验证的证书key<br>|—<code>issuer</code> 证书颁发者的名称</p>
<h4 id="创建docker-compose文件来编排registry两个服务"><a href="#创建docker-compose文件来编排registry两个服务" class="headerlink" title="创建docker-compose文件来编排registry两个服务"></a>创建docker-compose文件来编排registry两个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim docker-compose.yml</span></div><div class="line">version: <span class="string">'2'</span></div><div class="line">services:</div><div class="line">  registry:</div><div class="line">    image: registry</div><div class="line">    container_name: registry</div><div class="line">    ports:</div><div class="line">      - <span class="string">"5000:5000"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry/conf:/etc/docker/registry:ro</div><div class="line">      - /devops/registry:/var/lib/registry</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">  registry-web:</div><div class="line">    image: hyper/docker-registry-web</div><div class="line">    container_name: registry-web</div><div class="line">    ports:</div><div class="line">      - <span class="string">"8090:8080"</span></div><div class="line">    volumes:</div><div class="line">      - /devops/registry-web/conf:/conf:ro</div><div class="line">      - /devops/registry-web/db:/data</div><div class="line">    networks:</div><div class="line">      - registry-net</div><div class="line">    depends_on:</div><div class="line">      - registry</div><div class="line">    environment:</div><div class="line">      - TZ=Asia/Shanghai</div><div class="line">    restart: always</div><div class="line">networks:</div><div class="line">  registry-net:</div><div class="line">:wq 保存</div><div class="line"></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose up -d</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker-compose log -f 查看日志</span></div></pre></td></tr></table></figure>
<h4 id="配置本地hosts表"><a href="#配置本地hosts表" class="headerlink" title="配置本地hosts表"></a>配置本地hosts表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># vim /etc/hosts</span></div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">10.211.55.7 registry  <span class="comment">#增加registry的hosts表</span></div></pre></td></tr></table></figure>
<h3 id="验证registry及web-ui管理"><a href="#验证registry及web-ui管理" class="headerlink" title="验证registry及web ui管理"></a>验证registry及web ui管理</h3><ol>
<li>登录到<a href="http://localhost:8090/" target="_blank" rel="external">http://localhost:8090/</a> 默认用户名/密码  admin/admin<br><img src="/images/docker/registry/1.jpg" alt="registry-web管理界面"></li>
<li>创建测试用户并向该用户授予“全部写入”角色。<br><img src="/images/docker/registry/2.jpg" alt=""></li>
<li>在本地shell上：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 devops]<span class="comment"># docker login registry:5000</span></div><div class="line">Username: troylc</div><div class="line">Password:</div><div class="line">Login Succeeded</div><div class="line">[root@docker-node01 devops]<span class="comment"># docker pull hello-world</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker tag hello-world registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker push registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker rmi registry:5000/hello-world:latest</span></div><div class="line">[root@docker-node01 devops]<span class="comment"># docker run registry:5000/hello-world:latest</span></div></pre></td></tr></table></figure>
<ol>
<li>在界面上查看，并操作（列表中可删除）<br>用troylc用户名登录，可以看到有一个hello-worlad镜像，展开列表<br><img src="/images/docker/registry/3.jpg" alt=""></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA For Mac 快捷键]]></title>
      <url>http://www.troylc.cc/IntelliJ-IDEA/2017/06/17/idea-01.html</url>
      <content type="html"><![CDATA[<p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。本文参考以下内容摘记下来，方便自己记忆。<br><strong>参考地址：</strong><br><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a><br><a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">IntelliJ IDEA 官方快捷键说明</a></p>
<h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul>
<li><code>⌘</code> Command</li>
<li><code>⇧</code> Shift</li>
<li><code>⌥</code> Option</li>
<li><code>⌃</code> Control</li>
<li><code>↩︎</code> Return/Enter</li>
<li><code>⌫</code> Delete</li>
<li><code>⌦</code> 向前删除键（Fn+Delete）</li>
<li><code>↑</code> 上箭头</li>
<li><code>↓</code> 下箭头</li>
<li><code>←</code> 左箭头</li>
<li><code>→</code> 右箭头</li>
<li><code>⇞</code> Page Up（Fn+↑）</li>
<li><code>⇟</code> Page Down（Fn+↓）</li>
<li><code>Home</code> Fn + ←</li>
<li><code>End</code> Fn + →</li>
<li><code>⇥</code> 右制表符（Tab键）</li>
<li><code>⇤</code> 左制表符（Shift+Tab）</li>
<li><code>⎋</code> Escape (Esc)</li>
</ul>
<h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul>
<li><code>Control + Space</code> 基本的代码补全（补全任何类、方法、变量）</li>
<li><code>Control + Shift + Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>
<li><code>Command + Shift + Enter</code> 自动结束代码，行末自动添加分号</li>
<li><code>Command + P</code> 显示方法的参数信息</li>
<li><code>Control + J</code> 快速查看文档</li>
<li><code>Shift + F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>
<li><code>Command + 鼠标放在代码上</code> 显示代码简要信息</li>
<li><code>Command + F1</code> 在错误或警告处显示具体描述信息</li>
<li><code>Command + N, Control + Enter, Control + N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>
<li><code>Control + O</code> 覆盖方法（重写父类方法）</li>
<li><code>Control + I</code> 实现方法（实现接口中的方法）</li>
<li><code>Command + Option + T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>
<li><code>Command + /</code> 注释/取消注释与行注释</li>
<li><code>Command + Option + /</code> 注释/取消注释与块注释</li>
<li><code>Option + 方向键上</code> 连续选中代码块</li>
<li><code>Option + 方向键下</code> 减少当前选中的代码块</li>
<li><code>Control + Shift + Q</code> 显示上下文信息</li>
<li><code>Option + Enter</code> 显示意向动作和快速修复代码</li>
<li><code>Command + Option + L</code> 格式化代码</li>
<li><code>Control + Option + O</code> 优化import</li>
<li><code>Control + Option + I</code> 自动缩进线</li>
<li><code>Tab / Shift + Tab</code> 缩进代码 / 反缩进代码</li>
<li><code>Command + X</code> 剪切当前行或选定的块到剪贴板</li>
<li><code>Command + C</code> 复制当前行或选定的块到剪贴板</li>
<li><code>Command + V</code> 从剪贴板粘贴</li>
<li><code>Command + Shift + V</code> 从最近的缓冲区粘贴</li>
<li><code>Command + D</code> 复制当前行或选定的块</li>
<li><code>Command + Delete</code> 删除当前行或选定的块的行</li>
<li><code>Control + Shift + J</code> 智能的将代码拼接成一行</li>
<li><code>Command + Enter</code> 智能的拆分拼接的行</li>
<li><code>Shift + Enter</code> 开始新的一行</li>
<li><code>Command + Shift + U</code> 大小写切换</li>
<li><code>Command + Shift + ] / Command + Shift + [</code> 选择直到代码块结束/开始 </li>
<li><code>Option + Fn + Delete</code> 删除到单词的末尾</li>
<li><code>Option + Delete</code> 删除到单词的开头</li>
<li><code>Command + 加号 / Command + 减号</code> 展开 / 折叠代码块</li>
<li><code>Command + Shift + 加号</code> 展开所以代码块</li>
<li><code>Command + Shift + 减号</code> 折叠所有代码块</li>
<li><code>Command + W</code> 关闭活动的编辑器选项卡</li>
</ul>
<h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul>
<li><code>Double Shift</code> 查询任何东西</li>
<li><code>Command + F</code> 文件内查找</li>
<li><code>Command + G</code> 查找模式下，向下查找</li>
<li><code>Command + Shift + G</code> 查找模式下，向上查找</li>
<li><code>Command + R</code> 文件内替换</li>
<li><code>Command + Shift + F</code> 全局查找（根据路径）</li>
<li><code>Command + Shift + R</code> 全局替换（根据路径）</li>
<li><code>Command + Shift + S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
<li><code>Command + Shift + M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
</ul>
<h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul>
<li><code>Option + F7 / Command + F7</code> 在文件中查找用法 / 在类中查找用法</li>
<li><code>Command + Shift + F7</code> 在文件中突出显示的用法</li>
<li><code>Command + Option + F7</code> 显示用法</li>
</ul>
<h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul>
<li><code>Command + F9</code> 编译Project</li>
<li><code>Command + Shift + F9</code> 编译选择的文件、包或模块</li>
<li><code>Control + Option + R</code> 弹出 Run 的可选择菜单</li>
<li><code>Control + Option + D</code> 弹出 Debug 的可选择菜单</li>
<li><code>Control + R</code> 运行</li>
<li><code>Control + D</code> 调试</li>
<li><code>Control + Shift + R, Control + Shift + D</code> 从编辑器运行上下文环境配置</li>
</ul>
<h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul>
<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>
<li><code>Shift + F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>
<li><code>Shift + F8</code> 跳出</li>
<li><code>Option + F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>
<li><code>Option + F8</code> 计算表达式（可以更改变量值使其生效）</li>
<li><code>Command + Option + R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>
<li><code>Command + F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>
<li><code>Command + Shift + F8</code> 查看断点信息</li>
</ul>
<h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul>
<li><code>Command + O</code> 查找类文件</li>
<li><code>Command + Shift + O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>
<li><code>Command + Option + O</code> 前往指定的变量 / 方法</li>
<li><code>Control + 方向键左 / Control + 方向键右</code> 左右切换打开的编辑tab页</li>
<li><code>F12</code> 返回到前一个工具窗口</li>
<li><code>Esc</code> 从工具窗口进入代码文件窗口</li>
<li><code>Shift + Esc</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>
<li><code>Command + Shift + F4</code> 关闭活动run/messages/find/… tab</li>
<li><code>Command + L</code> 在当前文件跳转到某一行的指定处</li>
<li><code>Command + E</code> 显示最近打开的文件记录列表</li>
<li><code>Option + 方向键左 / Option + 方向键右</code> 光标跳转到当前单词 / 中文句的左 / 右侧开头位置</li>
<li><code>Command + Option + 方向键左 / Command + Option + 方向键右</code> 退回 / 前进到上一个操作的地方</li>
<li><code>Command + Shift + Delete</code> 跳转到最后一个编辑的地方</li>
<li><code>Option + F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>
<li><code>Command + B / Command +  鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>
<li><code>Command + Option + B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>
<li><code>Option + Space, Command + Y</code> 快速打开光标所在方法、类的定义</li>
<li><code>Control + Shift + B</code> 跳转到类型声明处</li>
<li><code>Command + U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>
<li><code>Control + 方向键下 / Control + 方向键上</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>
<li><code>Command + ] / Command + [</code> 移动光标到当前所在代码的花括号开始/结束位置</li>
<li><code>Command + F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>
<li><code>Control + H</code> 显示当前类的层次结构</li>
<li><code>Command + Shift + H</code> 显示方法层次结构</li>
<li><code>Control + Option + H</code> 显示调用层次结构</li>
<li><code>F2 / Shift + F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>
<li><code>F4 / Command + 方向键下</code> 编辑/查看代码源</li>
<li><code>Option + Home</code> 显示到当前文件的导航条</li>
<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>
<li><code>Option + F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>
<li><code>Control + 0...Control + 9</code> 定位到对应数值的书签位置</li>
<li><code>Command + F3</code> 显示所有书签</li>
</ul>
<h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul>
<li><code>F5</code> 复制文件到指定目录</li>
<li><code>F6</code> 移动文件到指定目录</li>
<li><code>Command + Delete</code> 在文件上为安全删除文件，弹出确认框</li>
<li><code>Shift + F6</code> 重命名文件</li>
<li><code>Command + F6</code> 更改签名</li>
<li><code>Command + Option + N</code> 一致性</li>
<li><code>Command + Option + M</code> 将选中的代码提取为方法</li>
<li><code>Command + Option + V</code> 提取变量</li>
<li><code>Command + Option + F</code> 提取字段</li>
<li><code>Command + Option + C</code> 提取常量</li>
<li><code>Command + Option + P</code> 提取参数</li>
</ul>
<h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul>
<li><code>Command + K</code> 提交代码到版本控制器</li>
<li><code>Command + T</code> 从版本控制器更新代码</li>
<li><code>Option + Shift + C</code> 查看最近的变更记录</li>
<li><code>Control + C</code> 快速弹出版本控制器操作面板</li>
</ul>
<h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul>
<li><code>Command + Option + J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>
<li><code>Command + J</code> 插入自定义动态代码模板</li>
</ul>
<h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul>
<li><code>Command + 1...Command + 9</code> 打开相应编号的工具窗口</li>
<li><code>Command + S</code> 保存所有</li>
<li><code>Command + Option + Y</code> 同步、刷新</li>
<li><code>Control + Command + F</code> 切换全屏模式</li>
<li><code>Command + Shift + F12</code> 切换最大化编辑器</li>
<li><code>Option + Shift + F</code> 添加到收藏夹</li>
<li><code>Option + Shift + I</code> 检查当前文件与当前的配置文件</li>
<li>Control + ` 快速切换当前的scheme（切换主题、代码样式等）</li>
<li><code>Command + ,</code> 打开IDEA系统设置</li>
<li><code>Command + ;</code> 打开项目结构对话框</li>
<li><code>Shift + Command + A</code> 查找动作（可设置相关选项）</li>
<li><code>Control + Shift + Tab</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>
</ul>
<h4 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h4><ul>
<li><code>Command + Shift +8</code> 竖编辑模式</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[macOs环境下搭建hexo静态博客]]></title>
      <url>http://www.troylc.cc/macOs/2017/06/12/macos-02.html</url>
      <content type="html"><![CDATA[<p>hexo-Github Pages静态博客，需要node js的支持，由于我的环境，之前在有安装过hexo，本身已经用的是之前的较早版本的node js，最新由于工作需要，用到angular js，准备安装一个最新的node js,所以对node js有多版本支持的要求，因此我通过nvm来进行管理node的版本。  </p>
<h3 id="安装NVM工具"><a href="#安装NVM工具" class="headerlink" title="安装NVM工具"></a>安装NVM工具</h3><p>由于上一节安装了oh my zsh命令增强工具，安装nvm我是通过安装zsh的插件方式安装的，<br>参考：<a href="http://www.troylc.cc/macOs/2017/06/11/macos-01.html">macOs终端工具优化iTerm2+oh my zsh</a><br>如下所示：<br>首页：Clone zsh-nvm 到oh my zsh 自定义插件库中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm</div></pre></td></tr></table></figure>
<p>其次：修改oh my zsh的配置文件.zshrc，增加以下内容</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins+=(zsh-nvm) 或者加到之前的后面，用空格分开 plugins=(*** zsh-nvm)</div></pre></td></tr></table></figure>
<p>最后：如果要即时生效刚执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment">#或者关闭当前终端重新打开。</span></div></pre></td></tr></table></figure></p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node js"></a>安装node js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm list-remote</div><div class="line">        v0.1.14</div><div class="line">        v0.1.15</div><div class="line">        v0.1.16</div><div class="line">        ......</div><div class="line">       v0.12.15</div><div class="line">       v0.12.16</div><div class="line">       v0.12.17</div><div class="line">       v0.12.18</div><div class="line">       ......</div><div class="line">       v7.7.2</div><div class="line">       v7.10.0</div><div class="line">       v8.0.0</div><div class="line">       v8.1.0</div></pre></td></tr></table></figure>
<p>由于之前折腾hexo静态博客的时候用的是node js v0.12.17版本，安装此版本以便于和之前的hexo保持一致，最近工作中需要用到新版本的node js,所以再安装一个v8.1.0版本，让两个版本共存  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  nvm install v0.12.17</div><div class="line">Downloading and installing node v0.12.17...</div><div class="line">Downloading https://nodejs.org/dist/v0.12.17/node-v0.12.17-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v0.12.17 (npm v2.15.1)</div><div class="line">Creating default <span class="built_in">alias</span>: default -&gt; v0.12.17</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm install v8.1.0</div><div class="line">Downloading and installing node v8.1.0...</div><div class="line">Downloading https://nodejs.org/dist/v8.1.0/node-v8.1.0-darwin-x64.tar.gz...</div><div class="line"><span class="comment">######################################################################## 100.0%</span></div><div class="line">Computing checksum with shasum -a 256</div><div class="line">Checksums matched!</div><div class="line">Now using node v8.1.0 (npm v5.0.3)</div><div class="line"></div><div class="line">zdgqiuysn@zqy  ~  nvm list</div><div class="line">       v0.12.17</div><div class="line">-&gt;       v8.1.0</div><div class="line">default -&gt; v0.12.17</div><div class="line">node -&gt; stable (-&gt; v8.1.0) (default)</div><div class="line">stable -&gt; 8.1 (-&gt; v8.1.0) (default)</div><div class="line">iojs -&gt; N/A (default)</div><div class="line">lts/* -&gt; lts/boron (-&gt; N/A)</div><div class="line">lts/argon -&gt; v4.8.3 (-&gt; N/A)</div><div class="line">lts/boron -&gt; v6.11.0 (-&gt; N/A)</div></pre></td></tr></table></figure>
<p>node js已经安装完了，由于先安装的v0.12.17版本，所以被设置为默认的node版本，这里先用这个为默认版本，后续用到新版本时，再切换到新的版本中。</p>
<h3 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy  ~  npm install hexo-cli -g</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">......</div><div class="line">/Users/zdgqiuysn/.nvm/versions/node/v0.12.17/bin/hexo -&gt; /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli/bin/hexo</div><div class="line">hexo-cli@1.0.3 /Users/zdgqiuysn/.nvm/versions/node/v0.12.17/lib/node_modules/hexo-cli</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── object-assign@4.1.1</div><div class="line">├── <span class="built_in">command</span>-exists@1.2.2</div><div class="line">├── minimist@1.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── chalk@1.1.3 (supports-color@2.0.0, escape-string-regexp@1.0.5, ansi-styles@2.2.1, strip-ansi@3.0.1, has-ansi@2.0.0)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, camel-case@3.0.0, cross-spawn@4.0.2)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">└── hexo-fs@0.2.0 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line"></div><div class="line"> zdgqiuysn@zqy  ~  npm install hexo --save</div><div class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</div><div class="line">npm WARN engine esprima@3.1.3: wanted: &#123;<span class="string">"node"</span>:<span class="string">"&gt;=4"</span>&#125; (current: &#123;<span class="string">"node"</span>:<span class="string">"0.12.17"</span>,<span class="string">"npm"</span>:<span class="string">"2.15.1"</span>&#125;)</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.2 install /Users/zdgqiuysn/node_modules/hexo/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">hexo@3.3.7 node_modules/hexo</div><div class="line">├── abbrev@1.1.0</div><div class="line">├── pretty-hrtime@1.0.3</div><div class="line">├── hexo-front-matter@0.2.3</div><div class="line">├── archy@1.0.0</div><div class="line">├── titlecase@1.1.2</div><div class="line">├── text-table@0.2.0</div><div class="line">├── bluebird@3.5.0</div><div class="line">├── tildify@1.2.0 (os-homedir@1.0.2)</div><div class="line">├── moment-timezone@0.5.13</div><div class="line">├── moment@2.13.0</div><div class="line">├── lodash@4.17.4</div><div class="line">├── deep-assign@2.0.0 (is-obj@1.0.1)</div><div class="line">├── hexo-i18n@0.2.1 (sprintf-js@1.1.1)</div><div class="line">├── minimatch@3.0.4 (brace-expansion@1.1.7)</div><div class="line">├── strip-indent@1.0.1 (get-stdin@4.0.1)</div><div class="line">├── chalk@1.1.3 (escape-string-regexp@1.0.5, ansi-styles@2.2.1, supports-color@2.0.0, has-ansi@2.0.0, strip-ansi@3.0.1)</div><div class="line">├── hexo-util@0.6.0 (striptags@2.2.1, html-entities@1.2.1, highlight.js@9.12.0, cross-spawn@4.0.2, camel-case@3.0.0)</div><div class="line">├── js-yaml@3.8.4 (esprima@3.1.3, argparse@1.0.9)</div><div class="line">├── hexo-log@0.1.3 (bunyan@1.8.10)</div><div class="line">├── swig-extras@0.0.1 (markdown@0.5.0)</div><div class="line">├── swig@1.4.2 (optimist@0.6.1, uglify-js@2.4.24)</div><div class="line">├── hexo-fs@0.1.6 (escape-string-regexp@1.0.5, graceful-fs@4.1.11, chokidar@1.7.0)</div><div class="line">├── hexo-cli@1.0.3 (object-assign@4.1.1, <span class="built_in">command</span>-exists@1.2.2, minimist@1.2.0, hexo-fs@0.2.0)</div><div class="line">├── nunjucks@2.5.2 (asap@2.0.5, yargs@3.32.0, chokidar@1.7.0)</div><div class="line">├── warehouse@2.2.0 (graceful-fs@4.1.11, JSONStream@1.3.1, is-plain-object@2.0.3, cuid@1.3.8)</div><div class="line">└── cheerio@0.20.0 (entities@1.1.1, dom-serializer@0.1.0, css-select@1.2.0, htmlparser2@3.8.3, jsdom@7.2.2)</div></pre></td></tr></table></figure>
<h3 id="hexo命令生成静态页面"><a href="#hexo命令生成静态页面" class="headerlink" title="hexo命令生成静态页面"></a>hexo命令生成静态页面</h3><p>由于之前已经搭建过了hexo的静态博客，这次只要安装完hexo，通过hexo命令生成页面和上传到github上就行，<br>参考：<a href="http://www.troylc.cc/categories/hexo/">Hexo教程(系列)-hexo静态博客</a></p>
<p>创建一篇新的文章，执行hexo g -d 操作</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">zdgqiuysn@zqy <span class="built_in">pwd</span></div><div class="line">/myspace/java/githubPages/Blog/hexo</div><div class="line"></div><div class="line">zdgqiuysn@zqy  hexo g -d</div><div class="line"> </div><div class="line">[master c4513b5] Site updated: 2017-06-11 19:31:39</div><div class="line"> 107 files changed, 598 insertions(+), 325 deletions(-)</div><div class="line"> rewrite archives/2017/06/index.html (72%)</div><div class="line"> rewrite archives/2017/index.html (79%)</div><div class="line"> rewrite archives/index.html (82%)</div><div class="line"> create mode 100644 categories/macOs/index.html</div><div class="line"> create mode 100644 images/macos/macos-01/1.png</div><div class="line"> create mode 100644 images/macos/macos-01/10.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/11.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/12.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/2.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/3.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/4.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/5.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/6.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/7.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/8.jpg</div><div class="line"> create mode 100644 images/macos/macos-01/9.jpg</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-01.html</div><div class="line"> create mode 100644 macOs/2017/06/11/macos-02.html</div><div class="line"> rewrite page/4/index.html (76%)</div><div class="line"> create mode 100644 page/5/index.html</div><div class="line"> create mode 100644 tags/git/index.html</div><div class="line"> rewrite tags/hexo/index.html (74%)</div><div class="line"> rewrite tags/linux/index.html (76%)</div><div class="line"> create mode 100644 tags/macOs/index.html</div><div class="line"> create mode 100644 tags/zsh/index.html</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To github.com:troychn/troychn.github.io.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@github.com:troychn/troychn.github.io.git.</div><div class="line">On branch master</div><div class="line">nothing to commit, working tree clean</div><div class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/Users/zdgqiuysn/.ssh/id_rsa'</span>:</div><div class="line">To git.coding.net:troylc/troylc.git</div><div class="line">   79d9285..c4513b5  HEAD -&gt; master</div><div class="line">Branch master <span class="built_in">set</span> up to track remote branch master from git@git.coding.net:troylc/troylc.git.</div><div class="line">INFO  Deploy <span class="keyword">done</span>: git</div></pre></td></tr></table></figure>
<p>打开浏览器输入<a href="http://www.troylc.cc/">http://www.troylc.cc/</a><br><img src="/images/macos/macos-02/1.png" alt="1"></p>
<p><strong>如何卸载Hexo：</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3.0.0版本执行</div><div class="line">npm uninstall hexo-cli -g</div><div class="line"></div><div class="line">之前版本执行</div><div class="line">npm uninstall hexo -g</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[macOs终端工具优化iTerm2+oh my zsh]]></title>
      <url>http://www.troylc.cc/macOs/2017/06/11/macos-01.html</url>
      <content type="html"><![CDATA[<p>工欲善其事,必先利其器。能从千百年传承下来，必定是经过各行各业的实践与验证，到今年仍然适用，今天就分享一些软件行业对程序员来说的利器(zsh+oh my zsh)这款屌炸天linux下的增加命令行的工具。</p>
<p>之前一直都是用着各种环境下的默认的终端工具，在逛github时，发现了zsh和oh my zsh增强终端工具，觉得很强大，让程序员的逼格瞬间提升一个T，但发现这工具其实老外都是几年前就开始逼格了，一直持续到现在，而且star都是好几万，要不怎么说开源质量方面老个都这么强大呢。虚心学习什么时候都不晚，既然发现了，咋也来逼格一下，并分享自己的安装与配置的过程，记录下逼格过程的快感；扯远了，回正题。</p>
<p>本次安装环境为macOS Sierra 10.12.5下安装与配置iTerm2+zsh+oh my zs，当然网上大神们也有其它环境下的针对(zsh+oh my zs)这工具的安装，后续也给出相关的链接地址。</p>
<h2 id="iTerm2终端工具"><a href="#iTerm2终端工具" class="headerlink" title="iTerm2终端工具"></a>iTerm2终端工具</h2><p>虽然mac系统自带有终端工具，但今天说的Iterm2在mac上显得更加强大与突出，它能使命令行工具变得更加美观与便捷。</p>
<h3 id="iTerm2安装"><a href="#iTerm2安装" class="headerlink" title="iTerm2安装"></a>iTerm2安装</h3><p>在iTerm2<a href="http://iterm2.com" target="_blank" rel="external">官方网站</a>下载最新版本的iTerm2安装包，解压之后将iTerm2.app程序文件移动或复制到应用程序(Applications)目录下，即可以完成安装。安装完成后，启动iTerm2，这里先分享我配置好的iTerm2的界面：<br><img src="/images/macos/macos-01/1.png" alt="iTerm2管理界面"></p>
<h3 id="iTerm2基本配置与操作"><a href="#iTerm2基本配置与操作" class="headerlink" title="iTerm2基本配置与操作"></a>iTerm2基本配置与操作</h3><h4 id="修改iTerm2配置方案-配置"><a href="#修改iTerm2配置方案-配置" class="headerlink" title="修改iTerm2配置方案-配置"></a>修改iTerm2配置方案-配置</h4><p>首页要选择一个iTerm2的配置主题，我们这里选择的是solarized，这个主题也很强大，有很多工具的配色方案可以选择，从github上下载主题到本地的一个目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:altercation/solarized.git</div></pre></td></tr></table></figure>
<p><img src="/images/macos/macos-01//2.jpg" alt="配置方案下载"><br>进入iterm2-colors-solarized目录，双击Solarized Dark.itermcolors和Solarized Light.itermcolors这两个文件。<br>然后进入iTerm2设置preferences-&gt;Profiles-&gt;Colors-&gt;Color Presets-&gt;选择刚刚安装的solarized Dark;<br><img src="/images/macos/macos-01/3.jpg" alt="设置iTerm2配置方案"></p>
<h4 id="让新窗口的命令行跟随上一个打开的窗口的目录-配置"><a href="#让新窗口的命令行跟随上一个打开的窗口的目录-配置" class="headerlink" title="让新窗口的命令行跟随上一个打开的窗口的目录-配置"></a>让新窗口的命令行跟随上一个打开的窗口的目录-配置</h4><p>iTerm2设置preferences-&gt;Profiles/Default/General,Working DIrectory选择 Reuse previous session’s directory<br><img src="/images/macos/macos-01/4.jpg" alt="跟随目录"></p>
<h4 id="保存ssh远程登录指令及相关用户名密码-配置"><a href="#保存ssh远程登录指令及相关用户名密码-配置" class="headerlink" title="保存ssh远程登录指令及相关用户名密码-配置"></a>保存ssh远程登录指令及相关用户名密码-配置</h4><p>在iTerm2中可以直接存储登录命令，如：<code>ssh root@localhost</code>然后就会出现提示，让我们输入密码，但这样每次输入密码也很烦恼，有时远程机器太多，真记不住，然而iTerm2中可以使用expect脚本实现。   </p>
<p>首先打开iTerm2设置preferences-&gt;Profiles-&gt;在左侧最下方有一个<code>+</code>和<code>-</code>，或者旁边的Other Actions来新建，删除，复制一个现有的profiles。  </p>
<p>然后接着上面的配置，在配置profiles的界面右侧中，填写相关的信息与快捷键，tags等。<br>最后在在配置profiles的界面右侧的Command下面的Send Text at start 输入我们编写的expect脚本来运行，如下所示<br>编写expect脚本  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ vim /usr/<span class="built_in">local</span>/bin/item2login.sh</div><div class="line"><span class="comment">#!/usr/bin/expect</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> timeout 30</div><div class="line">spawn ssh -o ServerAliveInterval=60 -p [lindex <span class="variable">$argv</span> 0] [lindex <span class="variable">$argv</span> 1]@[lindex <span class="variable">$argv</span> 2]</div><div class="line">expect &#123;</div><div class="line">        <span class="string">"(yes/no)?"</span></div><div class="line">        &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</div><div class="line">        <span class="string">"password:"</span></div><div class="line">        &#123;send <span class="string">"[lindex <span class="variable">$argv</span> 3]\n"</span>&#125;</div><div class="line">&#125;</div><div class="line">interact</div></pre></td></tr></table></figure>
<p>这里<code>[lindex $argv 0]， [lindex $argv 1]， [lindex $argv 2]， [lindex $argv 3]</code> 分别代表着4个参数。<br>将item2login.sh保存到 /usr/local/bin 就可以了，然后在iTerm2中设置：脚本 端口号 用户名 服务器地址 <code>密码</code> 一定要一一对应,如果密码中含有特殊字符，就需要把密码这个参数用<code>`包起来</code>item2login.sh 22 root 10.211.55.4 ‘edfr@#3’  这里最后密码参数中含有@#，所以需要把密码用’’单引号包括起来的。`</p>
<p><img src="/images/macos/macos-01/5.jpg" alt=""></p>
<h4 id="iTerm2选择即为复制-操作"><a href="#iTerm2选择即为复制-操作" class="headerlink" title="iTerm2选择即为复制-操作"></a>iTerm2选择即为复制-操作</h4><p>在用命令行中进行复制，之前的命令行要么是不能使用常规复制快键来操作,要么是选中后再按复制command+C,然而在iTerm2这个功能就非常出色了,选中就自动复制成功.<br>然后我们只需要在粘贴的地方按下 command + v 即可粘贴成功。</p>
<h4 id="命令行界面全文查找功能-操作"><a href="#命令行界面全文查找功能-操作" class="headerlink" title="命令行界面全文查找功能-操作"></a>命令行界面全文查找功能-操作</h4><p>全文查找功能和在文本编辑器中一样,只需按下command + f 输入要查找的内容,即可在当前命令行界面查找并高亮显示,点击搜索框右侧箭头可以循环逐个定位，如下所示：<br><img src="/images/macos/macos-01/6.jpg" alt=""></p>
<h4 id="分隔屏幕显示-操作"><a href="#分隔屏幕显示-操作" class="headerlink" title="分隔屏幕显示-操作"></a>分隔屏幕显示-操作</h4><p>水平分隔 <code>command +shift +d</code>，垂直分隔 <code>command+d</code><br><img src="/images/macos/macos-01/7.jpg" alt=""></p>
<h4 id="命令行补全-操作"><a href="#命令行补全-操作" class="headerlink" title="命令行补全-操作"></a>命令行补全-操作</h4><p><code>command + ;</code>  自动补全命令，<code>command + shift +h</code> 把历史输入命令全部显示出来<br><img src="/images/macos/macos-01/8.jpg" alt=""><br><img src="/images/macos/macos-01/9.jpg" alt=""><br>iTerm2就先说这么多了，以后用到了新的功能，再更新分享吧。</p>
<h2 id="终端命令增强工具zsh和oh-my-zsh"><a href="#终端命令增强工具zsh和oh-my-zsh" class="headerlink" title="终端命令增强工具zsh和oh my zsh"></a>终端命令增强工具zsh和oh my zsh</h2><p>这两个命令行增强工具不单单是适用macOs，其它linux上也是支持的。安装说明可以参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH]</a>上的说明  </p>
<h3 id="macOs下安装zsh工具"><a href="#macOs下安装zsh工具" class="headerlink" title="macOs下安装zsh工具"></a>macOs下安装zsh工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">***@localhost ~ brew install zsh zsh-completions</div><div class="line">......</div><div class="line">***@localhost ~ zsh --version</div><div class="line">zsh 5.2 (x86_64-apple-darwin16.0)</div></pre></td></tr></table></figure>
<h3 id="macOs下安装oh-my-zsh"><a href="#macOs下安装oh-my-zsh" class="headerlink" title="macOs下安装oh my zsh"></a>macOs下安装oh my zsh</h3><p>oh my zsh是在zsh基础上增加了许多插件化的增强功能，安装说明也可以在<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">github[https://github.com/robbyrussell/oh-my-zsh]</a>找到说明，以下以github参考进行安装：<br><strong>curl:</strong>  </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p><strong>wget</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure>
<h4 id="oh-my-zsh-配置主题及添加自带的插件和自定义的插件"><a href="#oh-my-zsh-配置主题及添加自带的插件和自定义的插件" class="headerlink" title="oh my zsh 配置主题及添加自带的插件和自定义的插件"></a>oh my zsh 配置主题及添加自带的插件和自定义的插件</h4><p>oh my zsh安装完后，一般配置都会~/.zshrc配置文件中进行配置，<br><strong>配置主题agnoster：</strong>  </p>
<p>修改~/.zshrc文件，把主题修改为agnoster,<code>ZSH_THEME=&quot;agnoster&quot;</code>，修改完后重新打开终端就会生效，或者用<code>source ~/.zshrc</code>,让配置即时生效。由于agnoster需要Powerline字体的支持，不然终端的命令中中的三角会显示乱码。  </p>
<p><strong><a href="https://github.com/powerline/fonts" target="_blank" rel="external">安装Powerline字体</a>：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># clone</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</div><div class="line"><span class="comment"># install</span></div><div class="line"><span class="built_in">cd</span> fonts</div><div class="line">./install.sh</div><div class="line"><span class="comment"># clean-up a bit</span></div><div class="line"><span class="built_in">cd</span> ..</div><div class="line">rm -rf fonts</div></pre></td></tr></table></figure>
<p>如果终端是iTerm2,需要在Term2设置preferences-&gt;Profiles/Default/Text-&gt;chang font中选择上面安装的powerline字体<br><img src="/images/macos/macos-01/10.jpg" alt=""></p>
<p><strong>配置oh my zsh插件</strong><br>oh my zsh中插件分为两种:<br>一种是oh my zsh默认自带的插件，自带的插件是在~/.oh-my-zsh/plugins/目录下，这里面有很多插件，一般应该是足够逼格了。配置插件只需要修改~/.zshrc文件中的<code>plugins=(git cp z vim-interaction npm)</code>  </p>
<p>另一种是oh my zsh自定义插件，处定义的插件是放在~/ .oh-my-zsh/custom/plugins/目录下，这个目录下的插件，就需要我们自己到网络上下载，然后再放到这个目录下，然后也是修改~/.zshrc文件中的<code>plugins=(git zsh-syntax-highlighting cp z vim-interaction npm zsh-nvm)</code>,<br><img src="/images/macos/macos-01/11.jpg" alt=""><br>比如我这里安装了一个自定义的插件zsh-syntax-highlighting，用来增强zsh在命令行中输入正确的命令为绿色，如果输入错误的命令则显示为红色。如图所示：<br><img src="/images/macos/macos-01/12.jpg" alt=""><br><strong>安装oh my zsh自定义插件的方法，参考<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="external">github源码</a></strong>：<br>首先将这个插件的源码克隆到oh-my-zsh的自定义plugins目录中：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</div></pre></td></tr></table></figure>
<p>其实在oh my zsh配置文件中配置激活插件，修改~/.zshrc：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=( [plugins...] zsh-syntax-highlighting)</div></pre></td></tr></table></figure>
<p>最后执行<code>source ~/.zshrc</code>让插件即时生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>其它自定义的插件，安装方法类似，大家可以自行到网络上搜索oh my zsh的插件，我也是在慢慢的探索新逼格的新插件中。至此分享结束，后续也会持续关注有关macOs上的工具优化。希望能够帮到大家，相互学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RANCHER容器平台管理(一)-环境构建与配置]]></title>
      <url>http://www.troylc.cc/rancher/2017/06/02/rancher-01.html</url>
      <content type="html"><![CDATA[<p>rancher是什么，它能为我们做些什么？rancher是一个开源的软件平台，使企业能够在生产环境中运行容器。使用Rancher，我们不再需要使用不同的开源技术从头开始构建容器服务平台。Rancher提供管理生产环境中的容器所需的整个软件堆栈。  </p>
<p>如下为rancher的功能图：<br><img src="/images/rancher/rancher-base/1.png" alt="rancher功能图"></p>
<h2 id="安装Rancher服务器"><a href="#安装Rancher服务器" class="headerlink" title="安装Rancher服务器"></a>安装Rancher服务器</h2><p>Rancher被部署为一组Docker容器。运行的牧场主是简单的启动两个容器。一个容器作为管理服务器，另一个容器在节点上作为代理。</p>
<p><strong>运行Rancher的要求：</strong>  </p>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。如：RancherOS，Ubuntu，RHEL / CentOS 7，这些都进行了更严格的测试。<ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>MySQL服务器应该有一个max_connections设置&gt; 150<ul>
<li>MYSQL配置要求<ul>
<li>选项1：用Antelope文件格式运行，默认值为 COMPACT</li>
<li>选项2：使用Barracuda运行MySQL5.7，默认ROW_FORMAT值为Dynamic  </li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>rancher目前的版本情况：</strong><br>Rancher服务器端的容器有2个不同的版本。</p>
<ul>
<li>rancher/server:latest标签将是我们最新的开发版本。这些构建将通过我们的CI自动化框架进行验证。这些版本不适用于部署在生产中。</li>
<li>rancher/server:stable标签将是我们最新的稳定发布版本。此标签是我们推荐用于生产的版本。  </li>
</ul>
<p>请不要使用任何带有rc{n}后缀的版本。这些rc构建意味着Rancher团队测试构建。</p>
<h3 id="安装一个单容器rancher-service"><a href="#安装一个单容器rancher-service" class="headerlink" title="安装一个单容器rancher service"></a>安装一个单容器rancher service</h3><ul>
<li>运行一个单容器的rancher service，<br>如果要将容器内的数据库保存到主机上的卷上，请通过绑定MySQL卷来启动Rancher服务器  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -v &lt;宿主机目录&gt;:/var/lib/mysql --restart=unless-stopped -p 8080:8080 rancher/server:stable</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>UI和API将在暴露端口上可用8080。在Docker镜像下载完成之后，Rancher成功启动后可能需要一两分钟的时间才能查看。<br>导航到以下网址：http://<server_ip>:8080。该<server_ip>是运行牧场主服务器主机的公网IP地址。</server_ip></server_ip></p>
<p>一旦UI启动并运行，您可以通过添加主机或从基础架构目录中选择一个容器编排。默认情况下，如果不选择不同的容器编排类型，环境将使用rancher默认的编排模型Cattle。将主机添加到Rancher之后，您可以从Rancher目录开始添加服务或启动模板。  </p>
<p>用浏览器打开<a href="http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher" target="_blank" rel="external">http://hostsname:8080/，如果你看到如下页面，则说明你的Rancher</a> Server搭建成功了  </p>
<p><img src="/images/rancher/rancher-base/2.png" alt="rancher">  </p>
<h2 id="RANCHER管理"><a href="#RANCHER管理" class="headerlink" title="RANCHER管理"></a>RANCHER管理</h2><h3 id="设置权限访问"><a href="#设置权限访问" class="headerlink" title="设置权限访问"></a>设置权限访问</h3><p>第一次启动rancher后，它本身是没有给权限控制，所有人都可以访问，并且访问的权限是一样的。在RANCHER UI中我们可以看到系统管理旁边有一个红色的“！”，其实际标识当前的RANCHER是没有权限控制的，需要我们在系统管理下的二级菜单中选择访问控制，添加相应的管理用户后来启动访问权限的控制，Rancher支持多种权限控制方案，分别是：Active Directory、Azure AD、GitHub、Local Auth、OpenLDAP和SHIBBOLETH。我们这里选择简单的本地数据权限local Auth,即设置一个用户名密码，然后启动本地权限控制。<br><img src="/images/rancher/rancher-base/3.png" alt="访问权限"><br><img src="/images/rancher/rancher-base/4.png" alt="本地控制"><br>启动本地权限控制后，我们可以点击账号管理来添加更多的管理账号<br><img src="/images/rancher/rancher-base/5.png" alt="账号添加"><br>或者在系统管理的二级菜单中找到账号设置：<br><img src="/images/rancher/rancher-base/6.png" alt="账号设置"><br>点击添加账号，添加更多的管理账号：<br><img src="/images/rancher/rancher-base/7.png" alt="添加账号信息">  </p>
<h3 id="RANCHER环境管理"><a href="#RANCHER环境管理" class="headerlink" title="RANCHER环境管理"></a>RANCHER环境管理</h3><p>Rancher支持将资源分组到多个环境中。每个环境都从用于创建环境的环境模板定义的一组基础结构服务开始。每个环境都有自己的资源集，由一个或多个用户或组拥有。例如，您可以创建单独的“开发”，“测试”和“生产”环境，以保持彼此的隔离，并为您的整个组织提供“开发”访问权限，但将“生产”环境限制为较小的团队。所有主机和任何Rancher资源（如容器，基础设施服务等）都可以在环境中创建。</p>
<ol>
<li><p>添加RANCHER环境<br><img src="/images/rancher/rancher-base/8.png" alt="环境管理"><br><img src="/images/rancher/rancher-base/9.png" alt="环境管理界面"><br>点击添加环境界面，输入名称与描述，从rancher预制的模板中选择一个模板。然后添加具有访问权限的用户<br><img src="/images/rancher/rancher-base/10.png" alt="添加环境"><br><img src="/images/rancher/rancher-base/11.png" alt="给环境授权用户"><br>在添加完环境的列表中，也可以编辑对应的环境，编辑环境的内容和添加一样。<br><img src="/images/rancher/rancher-base/12.png" alt="编辑环境"></p>
</li>
<li><p>添加主机到RANCHER环境<br>主机是Rancher中最基本的资源单元，并且表示为虚拟或物理的任何Linux服务器，具有以下最低要求：</p>
</li>
</ol>
<ul>
<li>任何具有受支持版本的Docker的现代Linux发行版。RancherOS，Ubuntu，RHEL / CentOS 7进行了更严格的测试。</li>
<li><ul>
<li>对于RHEL / CentOS，Docker不推荐使用默认存储驱动程序，即使用环回的devicemapper 。请参考Docker文档，了解如何更改。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，如果要启用SELinux，则需要安装其他SELinux模块。</li>
</ul>
</li>
<li><ul>
<li>对于RHEL / CentOS，请使用内核版本3.10.0-514.2.2.el7.x86_64或更高版本。使用7.3版或更高版本时包括。</li>
</ul>
</li>
<li>1GB RAM</li>
<li>推荐CPU / AES-NI</li>
<li>能够通过预先配置的端口通过http或https与Rancher服务器进行通信。默认值为8080。</li>
<li>能够在同一环境下路由到任何其他主机，以利用Rancher对Docker容器的跨主机网络。</li>
<li>Rancher还支持Docker Machine，并允许您通过任何支持的驱动程序添加主机。</li>
<li>主机上必须安装rancher所支持的版本，可参考<a href="http://docs.rancher.com/rancher/v1.5/en/hosts/#supported-docker-versions" target="_blank" rel="external">rancher支持的docker版本</a></li>
</ul>
<p>从基础设施 - &gt; 主机选项卡，单击添加主机。<br><img src="/images/rancher/rancher-base/13.png" alt="添加主机"><br>点击保存，进入添加主机界面，选择不同类型的主机，这里添加本地服务器，可以给每个主机添加不同的labels<br><img src="/images/rancher/rancher-base/14.png" alt="添加主机1"><br><img src="/images/rancher/rancher-base/15.png" alt="添加主机2"><br>点击复制链接，在指定的本地的服务器上粘贴复制的内容，等待下截rancher agent下载运行后，关闭rancher的复制页面，在主机界面就会出现对应的主机信息：<br><img src="/images/rancher/rancher-base/16.png" alt="主机"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux系列(三)-linux在线调整分区大小-centos7]]></title>
      <url>http://www.troylc.cc/linux/2017/06/02/linux-03.html</url>
      <content type="html"><![CDATA[<p>在使用和维护Linux服务器的过程中有时会出现需要调整分区大小的情况。如果配置了lvm（logical volume management）的话，<br>可以很方便使用lvextend/lvreduce无损失增加和减少lvm分区的大小。做任何磁盘操作请做好备份！</p>
<h2 id="summary（概要）"><a href="#summary（概要）" class="headerlink" title="summary（概要）"></a>summary（概要）</h2><ul>
<li>系统环境: centos7</li>
<li>情况：<ol>
<li>home：50G</li>
<li>root：50G</li>
<li>root分区不够用</li>
</ol>
</li>
<li>思路：把home分区的空间划一部分到root分区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 设置home分区大小为200G，释放300G空间</div><div class="line">$ lvreduce -L 200G /dev/centos/home</div><div class="line"></div><div class="line"># 将空闲空间扩展到root分区</div><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line"></div><div class="line"># 使用XFS文件系统自带的命令集增加分区空间</div><div class="line">$ xfs_growfs /dev/mapper/centos-root</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><p>挂载在根目录的分区 <code>/dev/mapper/centos-root</code> 爆满，占用100%</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ df -h</div><div class="line">Filesystem               Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/centos-root   50G   50G   19M 100% /</div><div class="line">devtmpfs                  32G     0   32G   0% /dev</div><div class="line">tmpfs                     32G     0   32G   0% /dev/shm</div><div class="line">tmpfs                     32G  2.5G   29G   8% /run</div><div class="line">tmpfs                     32G     0   32G   0% /sys/fs/cgroup</div><div class="line">/dev/mapper/centos-home  50G   33M  49G   1% /home</div><div class="line">/dev/sda1                497M  238M  259M  48% /boot</div><div class="line">tmpfs                    6.3G     0  6.3G   0% /run/user/0</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>挂载在根目录的分区空间太小，只有50G，而服务器 <code>home</code> 目录为非常用目录，挂在了近50G的空间。</p>
<p>思路：从 <code>centos-home</code> 分区划出40G空间到 <code>centos-root</code> 分区。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="1-查看各分区信息"><a href="#1-查看各分区信息" class="headerlink" title="1.查看各分区信息"></a>1.查看各分区信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# lvdisplay</div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/swap</div><div class="line">  LV Name                swap</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                16Tima-Q9Us-F2NC-sPqb-YmPo-qxjl-zQZdRB</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:17 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 2</div><div class="line">  LV Size                4.00 GiB</div><div class="line">  Current LE             1024</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:1</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/home</div><div class="line">  LV Name                home</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                r42xE3-WwVn-an7C-WQzJ-NK3R-vg10-aWnHwE</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:18 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.45 GiB</div><div class="line">  Current LE             3444</div><div class="line">  Segments               1</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:2</div><div class="line">   </div><div class="line">  --- Logical volume ---</div><div class="line">  LV Path                /dev/centos/root</div><div class="line">  LV Name                root</div><div class="line">  VG Name                centos</div><div class="line">  LV UUID                d74yiv-jdym-sg5h-v49g-cpxZ-6Ttn-JtUoa7</div><div class="line">  LV Write Access        read/write</div><div class="line">  LV Creation host, time localhost.localdomain, 2016-11-09 15:45:20 +0800</div><div class="line">  LV Status              available</div><div class="line">  # open                 1</div><div class="line">  LV Size                50.05 GiB</div><div class="line">  Current LE             23054</div><div class="line">  Segments               2</div><div class="line">  Allocation             inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently set to     8192</div><div class="line">  Block device           253:0</div></pre></td></tr></table></figure>
<h4 id="2-umount卸载-home目录"><a href="#2-umount卸载-home目录" class="headerlink" title="2.umount卸载/home目录"></a>2.umount卸载/home目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# umount /home/</div></pre></td></tr></table></figure>
<h4 id="3-减少-home分区空间"><a href="#3-减少-home分区空间" class="headerlink" title="3.减少/home分区空间"></a>3.减少/home分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 释放 /dev/centos/home 分区 40G 的空间</div><div class="line"># 命令设置 /dev/centos/home 分区 10G空间</div><div class="line">$ lvreduce -L 10G /dev/centos/home</div><div class="line">WARNING: Reducing active logical volume to 200.00 GiB.</div><div class="line"> THIS MAY DESTROY YOUR DATA (filesystem etc.)</div><div class="line">Do you really want to reduce centos/home? [y/n]: y</div><div class="line"> Size of logical volume centos/home changed from 50.70 GiB (121778 extents) to 10.00 GiB (51200 extents).</div><div class="line"> Logical volume centos/home successfully resized.</div></pre></td></tr></table></figure>
<h4 id="4-增加-root分区空间"><a href="#4-增加-root分区空间" class="headerlink" title="4.增加/root分区空间"></a>4.增加/root分区空间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lvextend -l +100%FREE /dev/centos/root</div><div class="line">Size of logical volume centos/root changed from 50.06 GiB (12816 extents) to 90.76 GiB (83394 extents).</div><div class="line">Logical volume centos/root successfully resized.</div></pre></td></tr></table></figure>
<h4 id="5-扩展XFS文件空间大小"><a href="#5-扩展XFS文件空间大小" class="headerlink" title="5.扩展XFS文件空间大小"></a>5.扩展XFS文件空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ xfs_growfs /dev/mapper/centos-root</div><div class="line">meta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=3276800 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=0        finobt=0 spinodes=0</div><div class="line">data     =                       bsize=4096   blocks=13107200, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</div><div class="line">log      =internal               bsize=4096   blocks=6400, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">data blocks changed from 13107200 to 85395456</div></pre></td></tr></table></figure>
<p>由于xfs文件系统不能执行分区减小的调整！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# xfs_growfs /dev/mapper/centos-home</div><div class="line">xfs_growfs: /dev/mapper/centos-home is not a mounted XFS filesystem</div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line">mount: /dev/mapper/centos-home：不能读超级块</div></pre></td></tr></table></figure>
<p>这样，只能通过重新格式化这个分区，格式化后才能再次挂载到home下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mkfs.xfs /dev/mapper/centos-home -f</div><div class="line">meta-data=/dev/mapper/centos-home isize=512    agcount=4, agsize=41156608 blks</div><div class="line">         =                       sectsz=512   attr=2, projid32bit=1</div><div class="line">         =                       crc=1        finobt=0, sparse=0</div><div class="line">data     =                       bsize=4096   blocks=164626432, imaxpct=25</div><div class="line">         =                       sunit=0      swidth=0 blks</div><div class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</div><div class="line">log      =internal log           bsize=4096   blocks=80384, version=2</div><div class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</div><div class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</div><div class="line">  </div><div class="line">[root@localhost ~]# mount /dev/mapper/centos-home /home/</div><div class="line"></div><div class="line">[root@localhost ~]# reboot</div></pre></td></tr></table></figure>
<p>再次查看分区，发现home分区已经减小了100G,只不过这个分区里之前的数据都没有了。</p>
<p>完成</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在linux配置DockerSwarm的Linux防火墙]]></title>
      <url>http://www.troylc.cc/docker-swarm/2017/05/16/docker-swarm-firewalld.html</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker Swarm是Docker的一个功能，可以轻松地在规模上运行Docker主机和容器。Docker Swarm或Docker集群由一个或多个Dockerized主机组成，它们作为管理器节点和任意数量的工作节点。设置这样的系统需要仔细操纵Linux防火墙。</p>
<p>Docker Swarm正常工作所需的网络端口有： </p>
<p><strong>TCP端口 2376 </strong><br>用于安全Docker客户端通信。Docker Machine可以使用此端口。Docker Machine用于编排Docker主机。<br><strong>TCP端口 2377 </strong><br>。该端口用于Docker群集或群集节点之间的通信。它只需要在管理器节点上打开。<br><strong>TCP和UDP端口7946</strong><br>用于节点间的通信（容器网络发现）。<br><strong>4789</strong><br>用于覆盖网络流量的UDP端口（容器入口组网）。<br>注意：除了这些端口之外，<br><strong>端口22  </strong><br>（用于SSH流量）和特定服务在集群上运行所需的任何其他端口都必须打开。</p>
<p>在本文中，您将学习如何使用所有Linux发行版上可用的不同防火墙管理应用程序在Ubuntu 16.04上配置Linux防火墙。这些防火墙管理应用程序是防火墙，IPTables工具和UFW，简单防火墙。UFW是Ubuntu发行版上的默认防火墙应用程序，包括Ubuntu 16.04。虽然本教程涵盖三种方法，但每种方法都会产生相同的结果，因此您可以选择您最熟悉的方法。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a><strong>先决条件</strong></h1><p>在继续阅读本文之前，您应该：</p>
<p>设置构成集群的主机，包括至少一个群组管理器和一个群组工作程序。您可以按照本教程如何在Ubuntu 16.04上使用Docker Machine配置和管理远程Docker主机进行设置。<br><strong>注意：</strong><br>你会注意到命令（和本文中的所有命令）不是前缀sudo。这是因为假设您<br>docker-machine ssh<br>使用Docker Machine配置之后，使用该命令登录到服务器。</p>
<h3 id="方法1-使用UFW打开Docker-Swarm端口"><a href="#方法1-使用UFW打开Docker-Swarm端口" class="headerlink" title="方法1 - 使用UFW打开Docker Swarm端口"></a>方法1 - 使用UFW打开Docker Swarm端口</h3><p>如果您只是设置Docker主机，则UFW已经安装。您只需要启用和配置它。按照本指南了解有关在Ubuntu 16.04上使用UFW的更多信息。</p>
<p>在将用作Swarm管理器的节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 2377/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>这可能不是必需的，但是无论何时更改并重新启动防火墙，都不会重新启动Docker守护程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在作为工作者的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ufw allow 22/tcp</div><div class="line">ufw allow 2376/tcp</div><div class="line">ufw allow 7946/tcp</div><div class="line">ufw allow 7946/udp</div><div class="line">ufw allow 4789/udp</div></pre></td></tr></table></figure>
<p>之后，重新加载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw reload</div></pre></td></tr></table></figure>
<p>如果UFW未启用，请启用它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ufw enable</div></pre></td></tr></table></figure>
<p>然后重新启动Docker守护进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是您需要做的，使用UFW打开Docker Swarm的必要端口。</p>
<h3 id="方法2-使用FirewallD打开Docker-Swarm端口"><a href="#方法2-使用FirewallD打开Docker-Swarm端口" class="headerlink" title="方法2 - 使用FirewallD打开Docker Swarm端口"></a>方法2 - 使用FirewallD打开Docker Swarm端口</h3><p>FirewallD是基于Fedora，CentOS和其他Linux发行版的默认防火墙应用程序。但是FirewallD也可以在其他Linux发行版中使用，包括Ubuntu 16.04。</p>
<p>如果您选择使用FirewallD而不是UFW，请先卸载UFW：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get purge ufw</div></pre></td></tr></table></figure>
<p>然后安装FirewallD：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install firewalld</div></pre></td></tr></table></figure>
<p>验证它是否正在运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure>
<p>如果没有运行，启动它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure>
<p>然后启用它，以便它在启动时启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld</div></pre></td></tr></table></figure>
<p>在作为Swarm管理器的节点上，使用以下命令打开必要的端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=2377/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：如果您犯了错误，需要删除条目，请键入：。</div><div class="line"></div><div class="line">firewall-cmd --remove-port=port-number/tcp —permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>然后在将作为Swarm工作器的每个节点上执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --add-port=22/tcp --permanent</div><div class="line">firewall-cmd --add-port=2376/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/tcp --permanent</div><div class="line">firewall-cmd --add-port=7946/udp --permanent</div><div class="line">firewall-cmd --add-port=4789/udp --permanent</div></pre></td></tr></table></figure>
<p>之后，重新加载防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p>您已成功使用FirewallD打开Docker Swarm所需的端口。</p>
<h3 id="方法3-使用IPTables打开Docker群集端口"><a href="#方法3-使用IPTables打开Docker群集端口" class="headerlink" title="方法3 - 使用IPTables打开Docker群集端口"></a>方法3 - 使用IPTables打开Docker群集端口</h3><p>要在任何Linux发行版上使用IPtables，您必须先卸载任何其他防火墙工具。如果您正在从FirewallD或UFW切换，请先卸载它们。</p>
<p>然后安装iptables-persistent软件包，管理自动加载IPtables规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<p>接下来，使用以下命令刷新现有规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>现在您可以使用该iptables实用程序添加规则。该第一组命令应该在作为Swarm管理器的节点上执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2377 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>输入所有命令后，将规则保存到磁盘：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>在将用作Swarm工作的节点上，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 2376 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 7946 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp --dport 4789 -j ACCEPT</div></pre></td></tr></table></figure>
<p>将这些新规则保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后重新启动Docker：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<p>这就是为Docker Swarm使用IPTables打开所需的端口。您可以在教程如何使用Iptables防火墙中了解更多关于这些规则如何工作的信息。</p>
<p>如果您希望在使用此方法后切换到FirewallD或UFW，正确的方法是先停止防火墙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent stop</div></pre></td></tr></table></figure>
<p>然后冲洗规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent flush</div></pre></td></tr></table></figure>
<p>最后，将现在的空表保存到磁盘中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netfilter-persistent save</div></pre></td></tr></table></figure>
<p>然后你可以切换到UFW或FirewallD。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>FirewallD，IPTables工具和UFW是Linux世界中的三个防火墙管理应用程序。你刚刚学会了如何使用它来打开设置Docker Swarm所需的网络端口。您使用哪种方法只是个人偏好的问题，因为它们都具有同等的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker-swarm下部署mysql高可用(主从复制)]]></title>
      <url>http://www.troylc.cc/mysql/2017/05/14/docker-swarm-mysql-ha.html</url>
      <content type="html"><![CDATA[<p>在考虑MySQL数据库的高可用架构时，主要考虑以下几方面：</p>
<ul>
<li>如果数据库发生了宕机或者意外中断等故障，能尽快恢复数据库的可用性，尽可能的减少停机时间，保证业务不会因为数据库的故障而中断。</li>
<li>用作备份、只读副本等功能的非主节点的数据应该和主节点的数据实时或者最终保持一致。</li>
<li>当业务发生数据库切换时，切换前后的数据库内容应当一致，不会因为数据缺失或者数据不一致而影响业务。</li>
</ul>
<p>以下是在docker swarm环境中部署一个mysql的高可用环境，通过MaxScale的一个MySQL数据中间件，实现读写分离，并根据主从状态实现写库的自动切换。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>docker swarm环境</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.xxx</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.xxx</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<p>swarm集群的安装与管理，参考：<br><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a><br><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></p>
<p>查看swarm节点情况：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME         STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">60w2g6sd30iep1865qbi8tt87    docker-node02    Ready   Active        </div><div class="line">uy5jeecverzi7go34p5pkenz8 *  docker-master01  Ready   Active        Leader</div><div class="line">xgwetr888pf6ygkb3rh6zfjqx    docker-node01    Ready   Active</div></pre></td></tr></table></figure>
<h2 id="在swarm上部署myql高可用"><a href="#在swarm上部署myql高可用" class="headerlink" title="在swarm上部署myql高可用"></a>在swarm上部署myql高可用</h2><ul>
<li>创建一个swarm的全局网络：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network create -d overlay dbmysqlnet</span></div><div class="line">m26c1w6c1tilycfv8h6u1pogc</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">04b7b4731612        bridge              bridge              <span class="built_in">local</span></div><div class="line">m26c1w6c1til        dbmysqlnet          overlay             swarm</div><div class="line">626ec1305a55        docker_gwbridge     bridge              <span class="built_in">local</span></div><div class="line">2a5147ecaf4c        host                host                <span class="built_in">local</span></div><div class="line">p4wh41oefk4d        ingress             overlay             swarm</div><div class="line">6fc1d335c2e8        none                null                <span class="built_in">local</span></div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建一个mysql cluster集群，设置副本为1，–replicas=1，当副本为1时 mariadb-cluster镜像为这个实例自动变成引导节点。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker service create --name mysqldbcluster \</div><div class="line">--network dbmysqlnet \</div><div class="line">--replicas=1 \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">--env MYSQL_DATABASE=mytestdb \</div><div class="line">--env MYSQL_USER=mysqldbuser \</div><div class="line">--env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">toughiq/mariadb-cluster</div></pre></td></tr></table></figure>
<p>注：所提供的服务名称–name必须匹配环境变量DB_SERVICE_NAME镶有–env DB_SERVICE_NAME，并为数据库设置数据库名、root用户名的密码，以及为数据库单独创建的用户名和密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service create --name mysqldbcluster \</span></div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --replicas=1 \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env MYSQL_ROOT_PASSWORD=rootpass \</div><div class="line">&gt; --env MYSQL_DATABASE=mytestdb \</div><div class="line">&gt; --env MYSQL_USER=mysqldbuser \</div><div class="line">&gt; --env MYSQL_PASSWORD=mysqldbpass \</div><div class="line">&gt; toughiq/mariadb-cluster</div><div class="line">v7azlb9yvbv8uumoisddtd4pu</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  1/1       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02  Running        Running 27 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>再通过更新mysqldbcluster服务扩展mysql数据库，这个通过更新mysqldbcluster服务的2个副本的启动将出现在“cluster join”-mode中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]<span class="comment"># docker service scale mysqldbcluster=3</span></div><div class="line">mysqldbcluster scaled to 3</div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ps mysqldbcluster</span></div><div class="line">ID            NAME              IMAGE                           NODE             DESIRED STATE  CURRENT STATE          ERROR  PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1  toughiq/mariadb-cluster:latest  docker-node02    Running        Running 5 minutes ago         </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2  toughiq/mariadb-cluster:latest  docker-master01  Running        Running 7 seconds ago         </div><div class="line">wz5u3sdocykj  mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Running        Running 7 seconds ago         </div><div class="line">[root@docker-master01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li>创建MaxScale代理服务并连接到mysqldbcluster   </li>
</ul>
<p>由于Swarm提供了一个负载平衡器，因此使用该Docker Swarm启用的数据库集群不需要MaxScale Proxy服务。因此，可以使用负载均衡器DNS名称连接到集群,上面运行的例子就是mysqldbcluster。它在同一个名字，由启动时提供–name。<br>但是MaxScale提供了一些关于负载平衡数据库流量的附加功能。它是获取有关群集状态的信息的简单方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">docker service create --name maxscale \</div><div class="line">--network dbmysqlnet \</div><div class="line">--env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">--env ENABLE_ROOT_USER=1 \</div><div class="line">--publish 3306:3306 \</div><div class="line">toughiq/maxscale</div><div class="line">```  </div><div class="line">要通过MaxScale禁用root对数据库的访问，只需设置--env ENABLE_ROOT_USER=0或删除该行即可。</div><div class="line">默认情况下禁用根访问。</div><div class="line"></div><div class="line">```bash</div><div class="line">[root@docker-master01 ~]# docker service create --name maxscale \</div><div class="line">&gt; --network dbmysqlnet \</div><div class="line">&gt; --env DB_SERVICE_NAME=mysqldbcluster \</div><div class="line">&gt; --env ENABLE_ROOT_USER=1 \</div><div class="line">&gt; --publish 3306:3306 \</div><div class="line">&gt; toughiq/maxscale</div><div class="line">v50kns05a9f5ufb028g8u3zsr</div><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps maxscale</div><div class="line">ID            NAME        IMAGE                    NODE           DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">unny1x1y10hs  maxscale.1  toughiq/maxscale:latest  docker-node02  Running        Running 18 seconds ago</div></pre></td></tr></table></figure>
<p>可以查看到maxscale是在集群的docker-node02上，到这台主机上查看一下mysql集群的情况如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers</div><div class="line">Servers.</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">Server             | Address         | Port  | Connections | Status              </div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">10.0.0.4           | 10.0.0.4        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running</div><div class="line">10.0.0.5           | 10.0.0.5        |  3306 |           0 | Master, Synced, Running</div><div class="line">-------------------+-----------------+-------+-------------+--------------------</div><div class="line">[root@docker-node02 ~]#</div></pre></td></tr></table></figure>
<p>从上面的部署，mysql高可用集群基本上完成，我们可以做一下容灾的测试，比如停掉一台宿主机，或者停止一台集群节点上的容器，在通过以上命令，看看有什么结果，可以自行测试看看。  </p>
<h2 id="测试mysql高可用情况"><a href="#测试mysql高可用情况" class="headerlink" title="测试mysql高可用情况"></a>测试mysql高可用情况</h2><ul>
<li>首页查看master节点是那台机器，通过上面，可以看出ip为10.0.0.5为主节点，通过docker inspect,查看主节点在那台机器上，然后重启这台宿主机上的mysql容器，然后swarm集群会马上启动一个mysql容器，以达到mysql集群的副本数，</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">8a4d7deff9db        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   26 minutes ago      Up 26 minutes       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.wz5u3sdocykj1y0e47bbze1ti</div><div class="line">[root@docker-node01 ~]# docker stop 26d2e2a34089</div><div class="line">26d2e2a34089</div><div class="line">[root@docker-node01 ~]# docker ps</div><div class="line">CONTAINER ID        IMAGE                                                                                             COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">2872c109eee8        toughiq/mariadb-cluster@sha256:09213e60b57734206a376d42f87c1aa83163b53745736fc566fd460578fd3461   &quot;docker-entrypoint...&quot;   24 seconds ago      Up 18 seconds       3306/tcp, 4444/tcp, 4567-4568/tcp   mysqldbcluster.3.idh7t6r9h4nxivz1bm0hn7bi7</div></pre></td></tr></table></figure>
<ul>
<li>在通过swarm 管理节点，查看mysql集群的部署情况，通过maxscale中间件，查看mysql高可用情况<br>swarm manager节点查看：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker service ls</div><div class="line">ID            NAME            MODE        REPLICAS  IMAGE</div><div class="line">v50kns05a9f5  maxscale        replicated  1/1       toughiq/maxscale:latest</div><div class="line">v7azlb9yvbv8  mysqldbcluster  replicated  3/3       toughiq/mariadb-cluster:latest</div><div class="line">[root@docker-master01 ~]# docker service ps mysqldbcluster</div><div class="line">ID            NAME                  IMAGE                           NODE             DESIRED STATE  CURRENT STATE           ERROR                             PORTS</div><div class="line">7vwdy4qz8k5b  mysqldbcluster.1      toughiq/mariadb-cluster:latest  docker-node02    Running        Running 39 minutes ago                                    </div><div class="line">i0qw4p83ke6o  mysqldbcluster.2      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 33 minutes ago                                    </div><div class="line">boolbkf16bz2  mysqldbcluster.3      toughiq/mariadb-cluster:latest  docker-master01  Running        Running 6 minutes ago                                     </div><div class="line">wz5u3sdocykj   \_ mysqldbcluster.3  toughiq/mariadb-cluster:latest  docker-node01    Shutdown       Failed 6 minutes ago    &quot;No such container: mysqldbclu…&quot;  </div><div class="line">```  </div><div class="line">maxscale中查看</div></pre></td></tr></table></figure>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Down<br>——————-+—————–+——-+————-+——————–<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">等待swarm集群再恢复所有节点后查看：</div></pre></td></tr></table></figure></p>
<p>[root@docker-node02 ~]# docker exec -it maxscale.1.unny1x1y10hsaxkm1kotmg8oq maxadmin -pmariadb list servers<br>Servers.<br>——————-+—————–+——-+————-+——————–<br>Server             | Address         | Port  | Connections | Status<br>——————-+—————–+——-+————-+——————–<br>10.0.0.4           | 10.0.0.4        |  3306 |           0 | Master, Synced, Running<br>10.0.0.3           | 10.0.0.3        |  3306 |           0 | Slave, Synced, Running<br>10.0.0.5           | 10.0.0.5        |  3306 |           0 | Slave, Synced, Running<br>——————-+—————–+——-+————-+——————–<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用docker构建与部署spring-cloud的微服务(七)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/04/24/spring-cloud-deploy.html</url>
      <content type="html"><![CDATA[<p>首先总结一下前面一系列的spring-cloud微服务学习，我们用eureka做服务的注册中心，通过向服务注册中心注册了三个简单的服务，如：用户微服务(microservice-provider-userservice)，商品微服务(microservice-consumer-productservice)，异构平台的评论微服务(microservice-sidecar-comment),在商品微服务中，通过spring cloud FeignClient来进行微服务之间的相互调用，通过sprig cloud zuul来暴露外维系统想访问微服务的接口，并用spring cloud config搭建了一个分布式的配置中心，通过改造用户微服务，来实现分布式的服务的配置功能。用spring cloud bus以及kafka的消息机制来实现服务配置的无停机就能自动刷新加载。本系列相关的文章，在本节就结束了，此系统纯属老司机的学习总结，欢迎大家指正交流，达到相互学习的目的。</p>
<h2 id="此系统列参考文档："><a href="#此系统列参考文档：" class="headerlink" title="此系统列参考文档："></a>此系统列参考文档：</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud config不知道怎么配置</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html">SpringCloud构微服务之-配置中心</a></td>
</tr>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<p>本节通过maven和idea的插件来构建docker镜像，编写docker-compose.yml来编排各服务节点，通过compose命令在docker-swarm中部署前面章节编写的微服务内容。</p>
<h2 id="微服务镜像的构建。"><a href="#微服务镜像的构建。" class="headerlink" title="微服务镜像的构建。"></a>微服务镜像的构建。</h2><p>在构建镜像之前，我们需要把一台内容的docker的远程API开放，以及内网搭建了有自己的docker私有仓库等功能。参考<a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移</a>、<a href="http://www.troylc.cc/docker/2016/07/31/docker-02.html">docker系列(二)使用Docker-Remote-API</a></p>
<p>镜像的构建如果是maven管理的java程序，我们可以通过maven的插件来进行镜像构建，如以下几个项目，都是通过maven插件来构建的。<br>首先在项目的主pom文件中加载一下docker的maven插件docker-maven-plugin，如：<br><img src="/images/spring-cloud/docker-swarm/1.png" alt="build"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    ......</div><div class="line">    &lt;!--添加利用maven插件构建docker镜像的插件依赖--&gt;</div><div class="line">    &lt;pluginManagement&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;0.4.13&lt;/version&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/pluginManagement&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
<ul>
<li>microservice-eureka-service注册中心镜像构建，在pom.xml插件处加入如下配置，  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">    &lt;executions&gt;</div><div class="line">        &lt;execution&gt;</div><div class="line">            &lt;id&gt;build-image&lt;/id&gt;</div><div class="line">            &lt;phase&gt;install&lt;/phase&gt;</div><div class="line">            &lt;goals&gt;</div><div class="line">                &lt;goal&gt;build&lt;/goal&gt;</div><div class="line">            &lt;/goals&gt;</div><div class="line">        &lt;/execution&gt;</div><div class="line">    &lt;/executions&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</div><div class="line">        &lt;dockerHost&gt;http://10.211.55.4:8372&lt;/dockerHost&gt;</div><div class="line">        &lt;pushImage&gt;true&lt;/pushImage&gt;&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</div><div class="line">        &lt;!--镜像名称--&gt;</div><div class="line">        &lt;imageName&gt;$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</div><div class="line">        &lt;!--镜像的基础版本--&gt;</div><div class="line">        &lt;baseImage&gt;java:openjdk-8-jdk-alpine&lt;/baseImage&gt;</div><div class="line">        &lt;!--镜像启动参数--&gt;</div><div class="line">        &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt;</div><div class="line">        &lt;!--&lt;imageTags&gt;</div><div class="line">            &lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;</div><div class="line">        &lt;/imageTags&gt;--&gt;</div><div class="line">        &lt;resources&gt;</div><div class="line">            &lt;resource&gt;</div><div class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</div><div class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</div><div class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</div><div class="line">            &lt;/resource&gt;</div><div class="line">        &lt;/resources&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<p><img src="/images/spring-cloud/docker-swarm/2.png" alt="maven的构建"><br>执行maven的构建：<br><img src="/images/spring-cloud/docker-swarm/3.png" alt="maven的构建"><br>查看对应docker环境上的镜像</p>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        4 minutes ago       186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-provider-userservice用户微服务镜像构建<br>在用户微服务的pom文件增加构建镜像配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/4.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        6 minutes ago       215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        36 minutes ago      186 MB</div><div class="line"></div><div class="line">```   </div><div class="line"></div><div class="line">  </div><div class="line">- microservice-consumer-productservice商品微服务镜像构建  </div><div class="line">在商品微服务的pom文件增加构建镜像的配置，并执行install命令构建镜像   </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/5.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：</div></pre></td></tr></table></figure>
<p>[root@docker-master01 ~]# docker images<br>REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE<br>tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB<br>tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB<br>tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  </div><div class="line">- microservice-sidecar-comment异构平台接入微服务构建代码  </div><div class="line">在接入微服务异构平台的接入项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像     </div><div class="line">![maven的构建](/images/spring-cloud/docker-swarm/6.png)   </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-config-service配置中心服务的构建代码<br>在微服务配置中心的项目中的pom文件增加构建镜像的配置，并执行install命令构建镜像<br><img src="/images/spring-cloud/docker-swarm/7.png" alt="maven的构建">  </li>
</ul>
<p>在docker远程主机查看本地镜像，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        5 minutes ago       204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        8 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        17 minutes ago      187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        27 minutes ago      215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        57 minutes ago      186 MB</div></pre></td></tr></table></figure>
<ul>
<li>microservice-nodejs-comment异构平台构建方法<br>此服务是用nodes编写的，和现有的微服务不是一种语言，如果要接入到微服务中，并部署到docker-swarm集群中，其一就是把自己的服务提供rest接口供微服务接入项目sidecar来配置接入，其二把编写的整个项目docker化。<br>此项目的docker化，因为没有maven来管理，所以需要编写一个dockerfile文件来进行构建，并且构建的方式是通过idea工具的docker插件来操作的。<br>Dockerfile文件内容：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">FROM node:7.7.4-alpine</div><div class="line"></div><div class="line"># Create app directory</div><div class="line">RUN mkdir -p /usr/src/app</div><div class="line">WORKDIR /usr/src/app</div><div class="line"></div><div class="line"># Install app dependencies</div><div class="line">COPY package.json /usr/src/app/</div><div class="line">#RUN npm install</div><div class="line"></div><div class="line"># Bundle app source</div><div class="line">COPY . /usr/src/app</div><div class="line"></div><div class="line">EXPOSE 3000</div><div class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">docker插件构建nodejs项目的镜像：  </div><div class="line">1. 首页在idea工具中安装docker插件  </div><div class="line">![idea插件](/images/spring-cloud/docker-swarm/8.png)  </div><div class="line">2. 其次配置cloud连接远程docker环境  </div><div class="line">![插件配置](/images/spring-cloud/docker-swarm/9.png)  </div><div class="line">3. 最后通过docker控制台构建与运行镜像  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/10.png)  </div><div class="line">![构建镜像](/images/spring-cloud/docker-swarm/11.png)  </div><div class="line"></div><div class="line">在docker远程主机查看本地镜像，如：  </div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        4 minutes ago       66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        About an hour ago   204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        About an hour ago   184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        About an hour ago   187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        About an hour ago   215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div></pre></td></tr></table></figure>
<p>7.microservice-api-gateway微服务的API对外网关镜像构建<br><img src="/images/spring-cloud/docker-swarm/12.png" alt="maven构建镜像">  </p>
<p>在docker远程主机查看本地镜像，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 ~]# docker images</div><div class="line">REPOSITORY                                            TAG                       IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/microservice-api-gateway               0.1.0                     208d6656085a        2 minutes ago       184 MB</div><div class="line">tcr:5000/myhub/microservice-nodejs-comment            0.1.0                     5f30b81a7df3        34 minutes ago      66.3 MB</div><div class="line">tcr:5000/myhub/microservice-config-service            0.1.0                     c895d68cfff0        2 hours ago         204 MB</div><div class="line">tcr:5000/myhub/microservice-sidecar-comment           0.1.0                     148fb0bf84e9        2 hours ago         184 MB</div><div class="line">tcr:5000/myhub/microservice-consumer-productservice   0.1.0                     4632254f9d3c        2 hours ago         187 MB</div><div class="line">tcr:5000/myhub/microservice-provider-userservice      0.1.0                     b8bf9b72c012        2 hours ago         215 MB</div><div class="line">tcr:5000/myhub/microservice-eureka-service            0.1.0                     032a842e950c        2 hours ago         186 MB</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">到此运行本次微服务的所有镜像都已经构建完成。版本都为0.1.0  </div><div class="line">  </div><div class="line">## docker-compose.yml的编写</div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于eurekaService1的节点，它需要连接http://eurekaService2/3:951X/eureka/，因此需要配置该服务的名称是eurekaService1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:    # 高可用eureka注册节点2</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:    # 高可用eureka注册节点3</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:    # 商品微服务</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:  #服务网关服务</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:    #异构平台商品评价服务</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:    #接入异构平台的微服务</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  zookeeper:       #zookeeper服务，主要是协助kafka消息中心的</div><div class="line">    image: tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;2181:2181&quot;</div><div class="line">  kafka:      #kafka消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9092:9092&quot;</div><div class="line">    environment:</div><div class="line">      - &apos;KAFKA_ADVERTISED_HOST_NAME=kafka&apos;</div><div class="line">      - &apos;KAFKA_ADVERTISED_PORT=9092&apos;</div><div class="line">      - &apos;KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181&apos;</div><div class="line">    depends_on:</div><div class="line">      - zookeeper</div><div class="line">  rabbitmq:     #rqbbitmq消息中心，在此主要是用户配置刷新的消息通知。</div><div class="line">    image: tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">    hostname: &apos;my-rabbit&apos;</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;5672:5672&quot;</div><div class="line">      - &quot;15672:15672&quot;</div><div class="line">  configService:    #微服务的配置中心</div><div class="line">    image: tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9518:9518&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:      #用户微服务，且通过config service中获取相关配置信息</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - kafka</div><div class="line">      - zookeeper</div><div class="line">      - configService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<h2 id="docker-compose在docker-swarm中部署微服务"><a href="#docker-compose在docker-swarm中部署微服务" class="headerlink" title="docker compose在docker-swarm中部署微服务"></a>docker compose在docker-swarm中部署微服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml microservice</div><div class="line">Creating network microservice_eureka-net</div><div class="line">Creating service microservice_apiGateway</div><div class="line">Creating service microservice_kafka</div><div class="line">Creating service microservice_configService</div><div class="line">Creating service microservice_eurekaService2</div><div class="line">Creating service microservice_userService</div><div class="line">Creating service microservice_zookeeper</div><div class="line">Creating service microservice_sidecarComment</div><div class="line">Creating service microservice_eurekaService3</div><div class="line">Creating service microservice_nodeComment</div><div class="line">Creating service microservice_rabbitmq</div><div class="line">Creating service microservice_eurekaService1</div><div class="line">Creating service microservice_productService</div><div class="line">[root@docker-master01 docker-compose]# docker stack services microservice</div><div class="line">ID            NAME                         MODE        REPLICAS  IMAGE</div><div class="line">3gjonfu6ebh5  microservice_kafka           replicated  1/1       tcr:5000/myhub/kafka:0.10.1.1</div><div class="line">5qen0mvwwa5x  microservice_productService  replicated  1/1       tcr:5000/myhub/microservice-consumer-productservice:0.1.0</div><div class="line">be7j9n6vdm69  microservice_apiGateway      replicated  1/1       tcr:5000/myhub/microservice-api-gateway:0.1.0</div><div class="line">ifjhurz97i80  microservice_eurekaService2  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">j6gsnfet2esa  microservice_configService   replicated  1/1       tcr:5000/myhub/microservice-config-service:0.1.0</div><div class="line">js55ijbe4crw  microservice_userService     replicated  1/1       tcr:5000/myhub/microservice-provider-userservice:0.1.0</div><div class="line">lqriwyu6npph  microservice_nodeComment     replicated  1/1       tcr:5000/myhub/microservice-nodejs-comment:0.1.0</div><div class="line">qc7s6fm4lnqg  microservice_sidecarComment  replicated  1/1       tcr:5000/myhub/microservice-sidecar-comment:0.1.0</div><div class="line">t67efu3aw48t  microservice_eurekaService3  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">tn33z3ebce8a  microservice_zookeeper       replicated  1/1       tcr:5000/myhub/zookeeper:3.4.9</div><div class="line">wiqe6x1pqpx4  microservice_rabbitmq        replicated  1/1       tcr:5000/myhub/rabbitmq:3.6.9-management-alpine</div><div class="line">xd5owqhu7h61  microservice_eurekaService1  replicated  1/1       tcr:5000/myhub/microservice-eureka-service:0.1.0</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps microservice</div><div class="line">ID            NAME                           IMAGE                                                      NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">3b6wsnap14jw  microservice_productService.1  tcr:5000/myhub/microservice-consumer-productservice:0.1.0  docker-node01    Running        Running 12 seconds ago         </div><div class="line">pwir78iy5gwr  microservice_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node01    Running        Running 31 seconds ago         </div><div class="line">sp3hcoibmh6l  microservice_rabbitmq.1        tcr:5000/myhub/rabbitmq:3.6.9-management-alpine            docker-node01    Running        Running 20 seconds ago         </div><div class="line">gwdrnfyyoia1  microservice_nodeComment.1     tcr:5000/myhub/microservice-nodejs-comment:0.1.0           docker-node02    Running        Running 26 seconds ago         </div><div class="line">rva9h3xc82ub  microservice_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-master01  Running        Running 25 seconds ago         </div><div class="line">a3qy8xlqq65p  microservice_sidecarComment.1  tcr:5000/myhub/microservice-sidecar-comment:0.1.0          docker-node01    Running        Running 15 seconds ago         </div><div class="line">d8s8lpwj7pp6  microservice_zookeeper.1       tcr:5000/myhub/zookeeper:3.4.9                             docker-node02    Running        Running 21 seconds ago         </div><div class="line">ob1z00fyzhov  microservice_userService.1     tcr:5000/myhub/microservice-provider-userservice:0.1.0     docker-master01  Running        Running 24 seconds ago         </div><div class="line">xjrakh9bxh0j  microservice_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.1.0           docker-node02    Running        Running 30 seconds ago         </div><div class="line">7y2nczvpi7wl  microservice_configService.1   tcr:5000/myhub/microservice-config-service:0.1.0           docker-node02    Running        Running 18 seconds ago         </div><div class="line">85k0gkln3k7p  microservice_kafka.1           tcr:5000/myhub/kafka:0.10.1.1                              docker-master01  Running        Running 25 seconds ago         </div><div class="line">csniz9pc8bbs  microservice_apiGateway.1      tcr:5000/myhub/microservice-api-gateway:0.1.0              docker-master01  Running        Running 29 seconds ago</div></pre></td></tr></table></figure>
<p>出现以上结束，表示通过compose对docker化的微服务部署就完成了。下面我们来验证一下</p>
<h2 id="测试相关微服务的功能"><a href="#测试相关微服务的功能" class="headerlink" title="测试相关微服务的功能"></a>测试相关微服务的功能</h2><p>查看一下eureka注册中心，我们可以看到所有的微服务都已经注册上来了，我们把之前每篇的spring cloud的验证环节的操作，都在此操作一下，就会看到相同的结束，这里就一一验证了，大家可根据上面的源码及部署方式自行测试一下。<br><img src="/images/spring-cloud/docker-swarm/13.png" alt="测试"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud构微服务之-配置中心(六)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/04/16/spirng-cloud-config.html</url>
      <content type="html"><![CDATA[<p>通过前面的章节介绍，我们使用Eureka实现了服务中心；通过Feign实现服务间的消费，为了使服务更为健壮，使用Hystrix的熔断来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制，为了整合异构平台提供的微服务，我们通过sidecar组件把异构平台的微服务集成到了整个微服务的环境中。<br>当我们的业务系统越来越庞大复杂的时候，各种配置就会层出不群。一旦配置修改了，那么我们就是必须修改后停服务，然后再上线，如果服务少，我们可以手动来操作，如果是成千上百的服务，如果是手动操作，肯定就不合适宜了，这个时候我们就需要考虑分布式配置管理，spring cloud config配置中心就是为了解决这个问题的组件， </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的怎么把异构平台的服务纳入微服务</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html">SpringCloud构建异构平台的微服务之-sidecar</a> </td>
</tr>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="spring-cloud-微服务配置中心"><a href="#spring-cloud-微服务配置中心" class="headerlink" title="spring cloud 微服务配置中心"></a>spring cloud 微服务配置中心</h2><p>spring cloud config 由server端和client端组成，下面我就来结合git仓库来实现分布式配置中心搭建，在此章节我们搭建一个configServer,一个configClient端，并把服务端注册到eureka中心，以便于configClient通过eureka上注册的信息连接到configServer上,通过在configServer中集成spring cloud bus利用rabbitmq或kafka消息机制来实现配置更新后的自动刷新。</p>
<p><img src="/images/spring-cloud/config/1.png" alt="image"></p>
<h2 id="配置中心-服务端"><a href="#配置中心-服务端" class="headerlink" title="配置中心 服务端"></a>配置中心 服务端</h2><h3 id="创建configService"><a href="#创建configService" class="headerlink" title="创建configService"></a>创建configService</h3><ul>
<li>新建一个microservice-config-service的子工程，添加spring-cloud-config-server、spring-cloud-starter-eureka、spring-boot-starter-security、spring-cloud-starter-bus-kafka，如果消息总线是rabbitmq则替换kafka的依赖为spring-cloud-starter-bus-amqp  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!--配置需要认证所需要引用的包--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在新建的工程中的spring boot启动类上加上@EnableConfigServer、@EnableDiscoveryClient注册，第一个注解是启动此项目为configService端，第二个注册是把这个configService注册到Eureka上。  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableConfigServer</div><div class="line">public class ConfigServceApplication</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(ConfigServceApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置configservice的配置文件，在bootstrap.yml,添加安全认证的配置，git仓库的配置,eurekaservice的配置，zookeeper-kafka的配置。如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 9518</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: configService</div><div class="line">    prefer-ip-address: true</div><div class="line">    ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">    instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">     defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/   #把configservice注册到eureka上，以便于客户端通过eureka上注册的信息找到configservice</div><div class="line">#实现的基本的 HttpBasic 的认证</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: true     # 开启基于HTTP basic的认证</div><div class="line">  user:</div><div class="line">    name: cadmin      # 配置登录的账号是user</div><div class="line">    password: cadmin123   # 配置登录的密码是eadmin123</div><div class="line">#</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-config-service</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      server:</div><div class="line">        git:</div><div class="line">          uri: https://git.oschina.net/gittroylc/microservice-config-repo  #配置git仓库位置</div><div class="line">          clone-on-start: true #在启动的时候克隆仓库</div><div class="line">          search-paths: &apos;&#123;application&#125;&apos; #配置仓库路径下的相对搜索位置，可以配置多个</div><div class="line">          username: username   #填写git仓库的用户名</div><div class="line">          password: password   #填写git仓库的密码</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181</div><div class="line">          brokers: kafka:9092</div></pre></td></tr></table></figure>
<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>创建一个git仓库microservice-config-repo目录作为配置仓库，在仓库下创建一个microservice-provider-userservice对应的微服务文件夹，并根据不同环境新建了下面四个配置文件：<br><img src="/images/spring-cloud/config/2.png" alt="image"><br>microservice-provider-userservice-dev.yml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  jpa:</div><div class="line">    generate-ddl: false</div><div class="line">    show-sql: true</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">  datasource:                           # 指定数据源</div><div class="line">    platform: h2                        # 指定数据源类型</div><div class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</div><div class="line">    data: classpath:data.sql            # 指定h2数据库的insert脚本</div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    root: INFO</div><div class="line">    org.hibernate: INFO</div><div class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</div><div class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</div><div class="line">    com.troylc.cloud: debug</div><div class="line"></div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line"># 测试配置属性的自动刷新功能，增加一个自定义的属性文件</div><div class="line">from: git-dev-15.0</div></pre></td></tr></table></figure>
<p>在这四个文件中都有一个from的属性，其属性值分别为：<br>from: git-default-1.0<br>from: git-dev-15.0<br>from: git-prod-1.0<br>from: git-test-1.0  </p>
<h3 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h3><p>启动eurekaservice和configservice两个应用，并把相关的zookeeper,kafka等服务启动，我这里是开发阶段，zookeeper,kafka是用docker镜像启动的服务，两个服务是直接通过idea启动来验证，后面全搭建完成了，直接通过一个docker-compose.yml来统一部署所有服务  </p>
<p>在浏览器中输入：<a href="http://configservice:9518/microservice-provider-userservice/dev" target="_blank" rel="external">http://configservice:9518/microservice-provider-userservice/dev</a><br><img src="/images/spring-cloud/config/3.png" alt="image"><br><img src="/images/spring-cloud/config/4.png" alt="image"><br>从返回的json可以看出，propertySources读取microservice-provider-userservice-dev.yml，还读取了microservice-provider-userservice.yml。从读取的情况来看，如果没有microservice-provider-userservice-dev.yml文件，他会默认的读取microservice-provider-userservice.yml文件</p>
<p>对git仓库中的配置文件microservice-provider-userservice.yml的访问方式有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -s http://localhost:端口/test-service/dev |jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.properties</div><div class="line">curl -s http://localhost:端口/test-service-dev.json | jq .</div><div class="line">curl -s http://localhost:端口/test-service-dev.yml</div></pre></td></tr></table></figure>
<p>HTTP服务的git资源构成:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</div><div class="line">/&#123;application&#125;-&#123;profile&#125;.properties</div><div class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</div></pre></td></tr></table></figure>
<ul>
<li>{application}:对应客户端的spring.application.name属性;</li>
<li>{profile}:对应客户端的 spring.profiles.active属性(逗号分隔的列表);</li>
<li>{label}:对应服务端属性配置文件的版本。对应git是:提交id,分支名称或tag。  </li>
</ul>
<p>优先级  </p>
<ul>
<li>profiles的优先级高于defaults,有多个profiles,最后一个起作用。</li>
<li>/{application}/{profile}[/{label}]优先级高于application.properties</li>
</ul>
<p>其它方式配置仓库位置：  </p>
<ul>
<li>Spring Cloud Config提供本地存储配置的方式。只需要设置属性spring.profiles.active=native，Config Server会从应用的src/main/resource目录下搜索配置文件。  </li>
<li>spring.cloud.config.server.native.searchLocations=file:F:/properties/ 属性来指定配置文件的位置。  </li>
</ul>
<p>虽然Spring Cloud Config提供了其它配置仓库的功能，但为了能更好的管理内容和版本控制，推荐使用git的方式。</p>
<h2 id="微服务端-configclient-配置"><a href="#微服务端-configclient-配置" class="headerlink" title="微服务端(configclient)配置"></a>微服务端(configclient)配置</h2><p>在开发完成并测试验证了configservice之后，下面我们看看如何在微服务应用中获取相关的配置信息。</p>
<ul>
<li>改造之前我们开发的用户微服务的项目，在pom文件中增加spring-cloud-starter-config、spring-cloud-starter-bus-kafka两个依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"> &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-kafka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>新建一个配置文件bootstrap.yml,指定configservice相关的配置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-provider-userservice</div><div class="line">  cloud:</div><div class="line">    config:</div><div class="line">      username: cadmin  #configservice认证的用户名</div><div class="line">      password: cadmin123   #认证密码</div><div class="line">      label: master   # 仓库的分支节点</div><div class="line">      discovery:  </div><div class="line">        enabled: true  #开启通过eureka上configservice找到相应的配置</div><div class="line">        service-id: microservice-config-service #configservice注册在Eureka上的service-id</div><div class="line">      profile: dev   #仓库中对应文件的环境，如dev、prod、test等</div><div class="line">      fail-fast: true</div><div class="line">    stream:   #配置通过spring cloud bus利用kafka消息机制实现自动刷新配置文件</div><div class="line">      kafka:</div><div class="line">        binder:</div><div class="line">          zk-nodes: zookeeper:2181  </div><div class="line">          brokers: kafka:9092</div><div class="line">    bus:</div><div class="line">      trace:</div><div class="line">        enabled: true   #Spring Cloud Bus事件传播的细节</div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line">#服务状态UNKNOWN</div><div class="line">#如果把微服务的 eureka.client.healthcheck.enabled 属性配置在 bootstrap.yml 里面，可能会引起一些不良反应</div><div class="line">#比如，实际测试发现，Eureka 首页显示的服务状态，本应是 UP(1)，却变成大红色的粗体 UNKNOWN(1)</div><div class="line">#    healthcheck:</div><div class="line">#      enabled: true</div></pre></td></tr></table></figure>
<p>指定相关的configservice的eureka上的注册ID，指定zookeeper、kafka服务配置信息。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.stream.kafka.binder.brokers</td>
<td>Kafka的服务端列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultBrokerPort</td>
<td>Kafka服务端的默认端口，当brokers属性中没有配置端口时，就会个默认这端口</td>
<td>9092</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.zk-nodes</td>
<td>Kafka服务端连接的ZooKeeper节点列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultZkPort</td>
<td>ZooKeeper节点的默认端口，当zk-nodes属性中没有配置端口时，就会默认这个端口</td>
<td>2181</td>
</tr>
</tbody>
</table>
<p>通过以上配置说明，可以看出，如果我们在配置文件中不配置相关的zookeeper和kafka信息时，就会使用以上说明的默认值</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>上面这些属性必须配置在bootstrap.yml，configservice的内容才能正确加载。因为通过bootstrap.yml的加载优先级比configService的高，configservice加载优先于application.yml，所以如果你把上面的配置写在application.yml中，相当于默认不是从configService中读取的配置信息，而是spring boot的默认加载。启动的时候就会看到加载的配置，不是你指定的configservice的服务器,而是默认的<a href="http://localhost:8888服务中加载" target="_blank" rel="external">http://localhost:8888服务中加载</a></p>
<ul>
<li>在userController中添加一个restAPI的方法，用来从配置仓库中读取一个from属性,如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@RefreshScope</div><div class="line">@RestController</div><div class="line">public class UserController &#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;from&#125;&quot;)</div><div class="line">    private String fromInfostr;</div><div class="line">    /**</div><div class="line">     * 获取所有用户</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;获取自动刷新后的配置文件中from中的值&quot;, notes = &quot;获取自动刷新后的配置文件&quot;)</div><div class="line">    @GetMapping(&quot;/from&quot;)</div><div class="line">    public ResultInfo geFromInfo() &#123;</div><div class="line">        String fromInfostr = null;</div><div class="line">        try &#123;</div><div class="line">            fromInfostr = this.fromInfostr;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;String&gt;(ReturnInfoEnum.SUCCESS.getState(),ReturnInfoEnum.SUCCESS.getStateInfo(), fromInfostr);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    .......</div></pre></td></tr></table></figure>
<h2 id="微服务端测试"><a href="#微服务端测试" class="headerlink" title="微服务端测试"></a>微服务端测试</h2><p>启动configservice和configclient，为了便于观察消息总线刷新配置的效果，可以启动多个不同端口的configclient。可以看到configservice以及多个configclient都连接上由Kafka实现的消息总线。直接访问每个configclient上的/from请求，查看获取到的from配置的内容，可以看到一开始，都是之前写的默认值。之后，修改Git中对应配置文件中的参数内容，向configservice发送POST请求：/bus/refresh，再去访问各个configclient上的/from请求，可以看到各客户端上的配置都刷新为最新配置内容。<br>eureka上看启动的服务：<br><img src="/images/spring-cloud/config/5.png" alt="image"><br>请求configclient上的查看from属性值：<br><img src="/images/spring-cloud/config/6.png" alt="image"><br>修改git仓库对应的microservice-provider-userservice-dev.yml文件的from的值，并提交，push到git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from: git-dev-16.0</div></pre></td></tr></table></figure>
<p>再从本地ssh中用curl向configServic发送一个/bus/refresh刷新请求，会看到configservice和configclient端应用程序会打出刷新后重新加载配置文件的日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST cadmin:cadmin123@configService:9518/bus/refresh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2017-04-14 17:04:19.078  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - deregister  status: 200</div><div class="line">2017-04-14 17:04:19.092  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient</div><div class="line">2017-04-14 17:04:19.093  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">.......</div><div class="line">2017-04-14 17:04:19.224  INFO 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1492160659224 with initial instances count: 2</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.230  WARN 4600 --- [afka-listener-1] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1492160659230, current=UP, previous=DOWN]</div><div class="line">2017-04-14 17:04:19.230  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514: registering service...</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Unregistering application microservice-provider-userservice with eureka with status DOWN</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] c.n.e.EurekaDiscoveryClientConfiguration : Registering application microservice-provider-userservice with eureka with status UP</div><div class="line">2017-04-14 17:04:19.234  INFO 4600 --- [afka-listener-1] o.s.cloud.bus.event.RefreshListener      : Received remote refresh request. Keys refreshed [config.client.version, from]</div><div class="line">2017-04-14 17:04:19.237  INFO 4600 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MICROSERVICE-PROVIDER-USERSERVICE/userService:9514 - registration status: 204</div><div class="line">2017-04-14 17:04:19.248  INFO 4600 --- [afka-listener-1] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values:</div></pre></td></tr></table></figure>
<p>再次请求configclient的/from<br><img src="/images/spring-cloud/config/7.png" alt="image"></p>
<p>至此spring cloud 的基本使用总结到这里，后续会出一个在docker swarm中把这些微服务，通过docker-compose进行统一编排部署。</p>
<p>本系列的完整示例：<br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud构建异构平台的微服务之-sidecar(五)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/04/13/spirng-cloud-sidecar.html</url>
      <content type="html"><![CDATA[<p>通过前面的几个章节介绍，我们使用Spring Cloud的Eureka实现了服务注册中心；而服务间通过Feign实现服务的消费，为了使得服务更为健壮，使用Hystrix的熔断机制来避免在微服务架构中因个别服务出现异常而引起的故障蔓延，为了使外部系统能够调用微服务注册中心注册的各种微服务，我们通过zuul实现了外部系统访问微服务的路由以及相关的权限控制。<br>本节我们主要讨论一下异构平台（比如，nodejs、python、php等提供的Rest接口服务）的服务，怎么通过spring cloud组件对这些服务注册到eureka中心以及与在微服务中怎么和异构平台的服务进行通信。这里主要是通过spring cloud的sidecar来构建异构平台的服务注册与通信。<br>sidecar灵感来自Netflix Prana。它可以获取注册中心的所有微服务实例的信息(例如host，端口等)的http api。也可以通过嵌入的Zuul代理来代理服务调用，该代理从Eureka获取其路由条目。 Spring Cloud配置服务器可以通过主机查找或通过Zuul代理直接访问。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对spring cloud的服务网关不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html">SpringCloud构建微服务之-apiGateway</a></td>
</tr>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="开启sidecar之旅"><a href="#开启sidecar之旅" class="headerlink" title="开启sidecar之旅"></a>开启sidecar之旅</h2><p>通过Node.js构建的评论服务通过Sidecar接入Spring Cloud微服务集群的整体架构，如下图：<br><img src="/images/spring-cloud/sidecar/11.png" alt="整体架构"> </p>
<h3 id="nodejs应用-简单的评论服务"><a href="#nodejs应用-简单的评论服务" class="headerlink" title="nodejs应用-简单的评论服务"></a>nodejs应用-简单的评论服务</h3><ul>
<li>首页需要构建一个异构平台的rest服务，我们这里采用nodejs创建，为了能够让微服务的注册中心知道这个异构平台的服务，需要在异构平台应用中实现一个健康检查接口，让Sidecar可以把这个服务实例的健康情况告诉Eureka注册中心。如：<br><img src="/images/spring-cloud/sidecar/1.png" alt="image"><br>创建一个nodejs的工程，在工程中实现一个健康接口并且返回如下形式的json文档： </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot;:&quot;UP&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编写一个首页和获取评论接口，该评论接口主要是供其它在微服务来调用，如：<br><img src="/images/spring-cloud/sidecar/2.png" alt="image"><br>评价返加接口的json数据如：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    status: &apos;100&apos;,</div><div class="line">    message: &apos;操作成功&apos;,</div><div class="line">    data: &#123;</div><div class="line">        commentId: &apos;123456&apos;,</div><div class="line">        userId: &apos;2&apos;,</div><div class="line">        productId: &apos;1&apos;,</div><div class="line">        commentContext: &apos;这个品质不错，快递速度很快！&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="把nodejs的评论服务接入微服务的sidecar应用"><a href="#把nodejs的评论服务接入微服务的sidecar应用" class="headerlink" title="把nodejs的评论服务接入微服务的sidecar应用"></a>把nodejs的评论服务接入微服务的sidecar应用</h3><ul>
<li>创建一个sidecar的子项目，在pom文件中添加sidecar的依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-netflix-sidecar&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在spring boot的启动类上，加上启动sidecar的注解@EnableSidecar</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableSidecar</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SidecarApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SidecarApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看看@EnableSidecar都做了些什么事，点击这个注解查看源码，我们发现hystrix熔断器、Eureka服务发现、zuul代理，这些组件都启动了，可以看到这个注解是一个组合注解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@EnableCircuitBreaker</div><div class="line">@EnableDiscoveryClient</div><div class="line">@EnableZuulProxy</div><div class="line">@Target(&#123;ElementType.TYPE&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Import(&#123;SidecarConfiguration.class&#125;)</div><div class="line">public @interface EnableSidecar &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置sidecar的application.yml属性文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-sidecar-comment</div><div class="line">server:</div><div class="line">  port: 9517</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">     hostname: sidecar</div><div class="line">     prefer-ip-address: true</div><div class="line">     ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">     instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">      serviceUrl:</div><div class="line">        defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">      healthcheck:</div><div class="line">        enabled: true</div><div class="line">        </div><div class="line">sidecar:</div><div class="line">  port: 3000    # Node.js微服务的端口</div><div class="line">  health-uri: http://sidecar:3000/health   # Node.js微服务的健康检查URL</div><div class="line"></div><div class="line">hystrix:</div><div class="line">  command:</div><div class="line">    default:</div><div class="line">      execution:</div><div class="line">        timeout:</div><div class="line">          enabled: false</div></pre></td></tr></table></figure>
<p>这里主要说明以下两个属性：<br>sidecar.port属性代表Node.js应用监听的端口。<br>sidecar.health-uri是一个用来模拟Spring Boot应用健康检查的接口的，接口返加的json必须是”status”:”UP”。</p>
<h3 id="消费端微服务定义"><a href="#消费端微服务定义" class="headerlink" title="消费端微服务定义"></a>消费端微服务定义</h3><p>在之前的商品微服务中，定义一个feign接口，写上对应的sidecar 的服务ID，如：</p>
<p><img src="/images/spring-cloud/sidecar/3.png" alt="image"></p>
<p>FeignClient可以根据serviceId去Eureka注册中心上找对应的服务信息，如果服务的实例不止一个，就会使用Ribbon进行客户端负载均衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@FeignClient(name = &quot;microservice-sidecar-comment&quot;)</div><div class="line">public interface CommentServiceFeign &#123;</div><div class="line">    @RequestMapping(value = &quot;/comment&quot;, method = RequestMethod.GET)</div><div class="line">    ResultInfo getComment() throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="compose部署并测试"><a href="#compose部署并测试" class="headerlink" title="compose部署并测试"></a>compose部署并测试</h2><p>通过docker-compose在swarm部署并启动所有服务进行测试，docker-compose文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  productService:</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  apiGateway:</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">    depends_on:</div><div class="line">      - productService</div><div class="line">      - userService</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  nodeComment:</div><div class="line">    image: tcr:5000/myhub/microservice-nodejs-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;3000:3000&quot;</div><div class="line">  sidecarComment:</div><div class="line">    image: tcr:5000/myhub/microservice-sidecar-comment:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9517:9517&quot;</div><div class="line">    depends_on:</div><div class="line">      - nodeComment</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">  userService:</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.0.3</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">    depends_on:</div><div class="line">      - eurekaService1</div><div class="line">      - eurekaService2</div><div class="line">      - eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>登录eureka，可看所有服务<br><img src="/images/spring-cloud/sidecar/4.png" alt="image"></p>
<p>通过sidecar访问一下nodejs的提供的健康检查接口：<br><img src="/images/spring-cloud/sidecar/5.png" alt="image"><br>这说明zuul功能已经开启了<br>通过<a href="http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：" target="_blank" rel="external">http://sidecar:9517/hosts/microservice-sidecar-comment访问sidecar的路由地址：</a><br><img src="/images/spring-cloud/sidecar/51.png" alt="image"><br>通过商品微服务访问nodejs异构平台构建的评论微服务信息，<br><img src="/images/spring-cloud/sidecar/6.png" alt="image"></p>
<p><strong>附代码仓库地址：</strong><br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud和docker之微服务-apigateway(四)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/03/19/spirng-cloud-apigateway.html</url>
      <content type="html"><![CDATA[<p>通过前面几节，我们已经通过spring cloud的组件构建了一个简单的微服务架构。<br>我们使用Spring Cloud中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Feign实现服务的消费，为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p>
<p>本文继续spring cloud和docker之微服务的api网关的相关介绍与案例，先来看看如下图：<br><img src="/images/spring-cloud/apigateway/1-1.png" alt="服务网关"></p>
<p>本图说明：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过负载均衡公开至服务调用方，在open Service中我们需要将权限控制从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器，它就是本文将要介绍的：服务网关。<br>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。 </p>
<p>为什么微服务中实现服务网关很重要：  </p>
<ul>
<li>服务网关实现了路由功能来屏蔽诸多服务细节，更实现了服务级别、均衡负载的路由。</li>
<li>实现了接口权限校验与微服务业务逻辑的解耦。通过服务网关中的过滤器，在各生命周期中去校验请求的内容，将原本在对外服务层做的校验前移，保证了微服务的无状态性，同时降低了微服务的测试难度，让服务本身更集中关注业务逻辑的处理。</li>
<li>实现了断路器，不会因为具体微服务的故障而导致服务网关的阻塞，依然可以对外服务。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://note.youdao.com/" target="_blank" rel="external">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对服务消费不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html">SpringCloud和docker之微服务-consumer</a></td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm集群创建不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>如果你对swarm集群的服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
<tr>
<td>如果你不知道docker-compose怎么来部署swarm集群?</td>
<td><a href="http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html">docker-compose部署swarm服务(docker1.13.1)</a></td>
</tr>
</tbody>
</table>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在使用Zuul之前，我们先构建一个服务注册中心、以及两个简单的服务，比如：我构建了一个microservice-provider-userservice，一个microservice-consumer-productservice。然后启动eureka-server和这两个服务。通过访问eureka-server，我们可以看到microservice-provider-userservice和microservice-consumer-productservice已经注册到了服务中心。</p>
<p>如果不熟悉请在参考中找到对应的文章进行操作。也可以通过文章最后附的源码，自己构建。</p>
<h2 id="开始使用Zuul"><a href="#开始使用Zuul" class="headerlink" title="开始使用Zuul"></a>开始使用Zuul</h2><ul>
<li>引入依赖spring-cloud-starter-zuul、spring-cloud-starter-eureka，如果不是通过指定serviceId的方式，eureka依赖不需要，但是为了对服务集群细节的透明性，还是用serviceId来避免直接引用url的方式吧</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>应用主类使用@EnableZuulProxy注解开启Zuul</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</div><div class="line"></div><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ApiGatewayApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>application.yml中配置Zuul应用的基础信息，如：应用名、服务端口等。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-api-gateway</div><div class="line">server:</div><div class="line">  port: 9516</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">     hostname: apiGateway</div><div class="line">     prefer-ip-address: true</div><div class="line">     ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">     instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">      serviceUrl:</div><div class="line">        defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">      healthcheck:</div><div class="line">        enabled: true</div><div class="line"># 设置默认超时时间60s（default为全局；若想设置某项服务的超时时间，只需要将default替换为对应的服务名）</div><div class="line">hystrix:</div><div class="line">  command:</div><div class="line">    default:</div><div class="line">      execution:</div><div class="line">        isolation:</div><div class="line">          thread:</div><div class="line">            timeoutInMilliseconds: 60000</div><div class="line">zuul:</div><div class="line">   routes:</div><div class="line">     api-productservice:</div><div class="line">       path: /api/product/**</div><div class="line">       serviceId: microservice-consumer-productservice</div><div class="line">       stripPrefix: true</div><div class="line"># stripPrefix：是否去除前缀，默认为true</div><div class="line"># stripPrefix=true, http://apiGateway:9516/api/swagger/api/hello ==&gt; http://apiGateway:9516/api/hello</div><div class="line"># stripPrefix=false, http://apiGateway:9516/api/swagger/api/hello ==&gt; http://apiGateway:9516/api/swagger/api/hello</div><div class="line">     api-usertservice:</div><div class="line">       path: /api/users/**</div><div class="line">       serviceId: microservice-provider-userservice</div></pre></td></tr></table></figure>
<p>zuul配置：<br>我们在实现微服务架构时，服务名与服务实例地址的关系在eureka server中已经存在了，所以只需要将Zuul注册到eureka server上去发现其他服务，我们就可以实现对serviceId的映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zuul:</div><div class="line">   routes:</div><div class="line">     api-productservice:</div><div class="line">       path: /api/product/**</div><div class="line">       serviceId: microservice-consumer-productservice</div><div class="line">     api-usertservice:</div><div class="line">       path: /api/users/**</div><div class="line">       serviceId: microservice-provider-userservice</div></pre></td></tr></table></figure>
<p>针对我们在准备工作中实现的两个微服务microservice-provider-userservice和microservice-consumer-productservice，定义了两个路由api-a和api-b来分别映射。另外为了让Zuul能发现microservice-provider-userservice和microservice-consumer-productservice，也加入了eureka的配置  </p>
<h2 id="服务过滤"><a href="#服务过滤" class="headerlink" title="服务过滤"></a>服务过滤</h2><p>在完成了服务路由之后，我们对外开放服务还需要一些安全措施来保护客户端只能访问它应该访问到的资源。所以我们需要利用Zuul的过滤器来实现我们对外服务的安全控制。<br>在服务网关中定义过滤器只需要继承ZuulFilter，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</div><div class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.vbean.ResultInfo;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> * 自定义过滤器的实现，需要继承ZuulFilter，需要重写实现下面四个方法：</div><div class="line"> * filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</div><div class="line"> * pre：可以在请求被路由之前调用</div><div class="line"> * routing：在路由请求时候被调用</div><div class="line"> * post：在routing和error过滤器之后被调用</div><div class="line"> * error：处理请求时发生错误时被调用</div><div class="line"> * filterOrder：通过int值来定义过滤器的执行顺序</div><div class="line"> * shouldFilter：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。</div><div class="line"> * 在上例中，我们直接返回true，所以该过滤器总是生效。</div><div class="line"> * run：过滤器的具体逻辑。需要注意，这里我们通过ctx.setSendZuulResponse(false)令zuul过滤该请求，</div><div class="line"> * 不对其进行路由，然后通过ctx.setResponseStatusCode(401)设置了其返回的错误码，</div><div class="line"> * 当然我们也可以进一步优化我们的返回，比如，通过ctx.setResponseBody(body)对返回body内容进行编辑，</div><div class="line"> * 如果有中文乱码。则可以：ctx.getResponse().setContentType("text/html;charset=UTF-8")</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AccessControlFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line">        log.info(String.format(<span class="string">"%s request to %s"</span>, request.getMethod(), request.getRequestURL().toString()));</div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            log.warn(<span class="string">"access token is empty,please enter accessToken!"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            <span class="comment">//未认证</span></div><div class="line">            ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.NOT_AUTHENTICATE.getState(),ReturnInfoEnum.NOT_AUTHENTICATE.getStateInfo());</div><div class="line">            ctx.getResponse().setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">            ctx.getResponse().setContentType(String.valueOf(MediaType.APPLICATION_JSON));</div><div class="line">            ctx.setResponseBody(resultInfo.toString());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        log.info(<span class="string">"access token ok"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据对filterType生命周期介绍，可以参考下图去理解，并根据自己的需要在不同的生命周期中去实现不同类型的过滤器。<br><img src="/images/spring-cloud/apigateway/1-2.png" alt="filterType生命周期"></p>
<h2 id="定义服务fallback"><a href="#定义服务fallback" class="headerlink" title="定义服务fallback"></a>定义服务fallback</h2><p>完成了服务网站的filter,我们可以针对具体的内部服务，在zuul中定义服务的回退方法<br>如：<br>UserFallbackProvider：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.fallback;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.vbean.ResultInfo;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 路由网关的用户短路器返回调用</div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFallbackProvider</span> <span class="keyword">implements</span> <span class="title">ZuulFallbackProvider</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"microservice-provider-userservice"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> HttpStatus.OK;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">200</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                ResultInfo resultInfo = <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.ERROR_SERVICE.getState(),</div><div class="line">                        ReturnInfoEnum.ERROR_SERVICE.getStateInfo() + <span class="string">";服务名为："</span> + UserFallbackProvider.<span class="keyword">this</span>.getRoute());</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(resultInfo.toString().getBytes());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">                <span class="keyword">return</span> headers;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ProductFallbackProvider：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.fallback;</div><div class="line"></div><div class="line">import com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line">import com.troylc.cloud.vbean.ResultInfo;</div><div class="line">import org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;</div><div class="line">import org.springframework.http.HttpHeaders;</div><div class="line">import org.springframework.http.HttpStatus;</div><div class="line">import org.springframework.http.MediaType;</div><div class="line">import org.springframework.http.client.ClientHttpResponse;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">import java.io.ByteArrayInputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 路由网关的商品短路器返回调用</div><div class="line"> * Created by troylc on 2017/3/14.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class ProductFallbackProvider implements ZuulFallbackProvider &#123;</div><div class="line">    @Override</div><div class="line">    public String getRoute() &#123;</div><div class="line">        return &quot;microservice-consumer-productservice&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ClientHttpResponse fallbackResponse() &#123;</div><div class="line">        return new ClientHttpResponse() &#123;</div><div class="line">            @Override</div><div class="line">            public HttpStatus getStatusCode() throws IOException &#123;</div><div class="line">                return HttpStatus.OK;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int getRawStatusCode() throws IOException &#123;</div><div class="line">                return 200;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public String getStatusText() throws IOException &#123;</div><div class="line">                return &quot;OK&quot;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void close() &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public InputStream getBody() throws IOException &#123;</div><div class="line">                ResultInfo resultInfo = new ResultInfo&lt;&gt;(ReturnInfoEnum.ERROR_SERVICE.getState(),</div><div class="line">                        ReturnInfoEnum.ERROR_SERVICE.getStateInfo()+&quot;;服务名为：&quot;+ProductFallbackProvider.this.getRoute());</div><div class="line">                return new ByteArrayInputStream(resultInfo.toString().getBytes());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public HttpHeaders getHeaders() &#123;</div><div class="line">                HttpHeaders headers = new HttpHeaders();</div><div class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">                return headers;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="docker-compose运行服务"><a href="#docker-compose运行服务" class="headerlink" title="docker-compose运行服务"></a>docker-compose运行服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">    image: tcr:5000/myhub/microservice-provider-userservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9514:9514&quot;</div><div class="line">  productService:</div><div class="line">    image: tcr:5000/myhub/microservice-consumer-productservice:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9515:9515&quot;</div><div class="line">  apiGateway:</div><div class="line">    image: tcr:5000/myhub/microservice-api-gateway:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9516:9516&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>接下来，我们将microservice-eureka-services、microservice-provider-userservice、microservice-consumer-productservice以及这里用Zuul实现的服务网关启动起来，在eureka-server的控制页面中，我们可以看到分别注册了icroservice-provider-userservice、microservice-consumer-productservice以及microservice-api-gateway<br>在swarm集群的manager节点中执行以下操作：<br><img src="/images/spring-cloud/apigateway/1.png" alt="image"><br>查看eureka注册中心<br><img src="/images/spring-cloud/apigateway/2.png" alt="image"></p>
<p>通过zuul去访问商品服务中的获取用户节点，此时不带accessToken参数，测试访问接受需要授权<br><img src="/images/spring-cloud/apigateway/3.png" alt="image"><br>加上accessToken参数访问：<br><img src="/images/spring-cloud/apigateway/4.png" alt="image"><br>下面测试停止商品服务后，zuul的fallback方法回调，首先操作swarm集群中，把商品服务停止<br><img src="/images/spring-cloud/apigateway/5.png" alt="image"><br>查看eureka注册中心，确认product服务是否已经停止<br><img src="/images/spring-cloud/apigateway/6.png" alt="image"><br>再次访问商品服务，提示fallback方法返回的内容：<br><img src="/images/spring-cloud/apigateway/7.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud和docker之微服务-consumer(三)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/03/11/spirng-cloud-productservice.html</url>
      <content type="html"><![CDATA[<p>本节主要说明一下通过springcloud的一种声明式、模板化的http客户端feign来实现获取注册到eureka注册中心的用户服务的信息。并集成了hystrix(熔断器)，控制服务和服务之间的节点调用，提高服务的延迟和故障的容错能力，通过hystrix dashboard(熔断器 仪表盘)来直观的展示。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table>
<thead>
<tr>
<th>疑问</th>
<th>参考</th>
</tr>
</thead>
<tbody>
<tr>
<td>如果你对eureka注册中心不太了解？</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html">SpringCloud和docker之微服务-eureka</a></td>
</tr>
<tr>
<td>如果你对服务注册不太了解</td>
<td><a href="http://www.troylc.cc/spring-cloud/2017/03/09/spirng-cloud-userservice.html">SpringCloud和docker之微服务-provider</a>  </td>
</tr>
<tr>
<td>如果你对docker安装不了解</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>如果你对docker-swarm服务部署不太了解</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a>、<a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker-swarm集群服务部署与维护</a></td>
</tr>
</tbody>
</table>
<h2 id="效果访问说明："><a href="#效果访问说明：" class="headerlink" title="效果访问说明："></a>效果访问说明：</h2><table>
<thead>
<tr>
<th>访问URL</th>
<th>访问方式</th>
<th>说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://productservice:9515/getUsers/1" target="_blank" rel="external">http://productservice:9515/getUsers/1</a></td>
<td>FeginClient方式调用接口</td>
<td>根据用户ID获取用户信息</td>
</tr>
<tr>
<td><a href="http://productservice:9515/users-rest/1" target="_blank" rel="external">http://productservice:9515/users-rest/1</a></td>
<td>RestTemplate方式调用接口</td>
<td>根据ID获取用户信息  </td>
</tr>
</tbody>
</table>
<h2 id="Hystrix-Dashboard监控说明"><a href="#Hystrix-Dashboard监控说明" class="headerlink" title="Hystrix Dashboard监控说明"></a>Hystrix Dashboard监控说明</h2><table>
<thead>
<tr>
<th>访问URL</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://productservice:9515/hystrix" target="_blank" rel="external">http://productservice:9515/hystrix</a></td>
<td>hystrix仪表盘访问地址</td>
</tr>
<tr>
<td><a href="http://productservice:9515/hystrix.stream" target="_blank" rel="external">http://productservice:9515/hystrix.stream</a></td>
<td>实时监控接口调用的访问地址，配合仪表盘使用，更能直观展示服务的访问情况。  </td>
</tr>
</tbody>
</table>
<h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h2><ul>
<li>首先创建子工程、引用依赖包<br>创建一个consumer maven子工程microservice-consumer-productservice,并在pom.xml中引用所需依赖，如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!--添加spring cloud服务注册的依赖--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--添加spring cloud的feign依赖--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--添加spring cloud的hystrix断路器：主要是服务间调用提供更加强大的容错能力 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- 用于暴露自身信息的模块，它的主要作用是用于监控与管理 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- Spring Boot中使用Swagger2构建RESTful APIs  --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!-- hystrix-dashboard监控 --&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</div><div class="line"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>定义FeignClient、Hystrix<br>在spring boot启动类上增加@EnableFeignClients、@EnableCircuitBreaker、@EnableHystrixDashboard</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//使用@EnableCircuitBreaker注解开启断路器功能</span></div><div class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//启用HystrixDashboard功能</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实例化RestTemplate，通过<span class="doctag">@LoadBalanced</span>注解开启均衡负载能力.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> restTemplate</div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ProductServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义需要通过FeignClient访问的接口列表，如下</p>
<p>UserServiceFeign<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// name为服务名，对应spring.application.name。注意：此服务名必须已注册进Eureka服务中心</div><div class="line">@FeignClient(name = &quot;microservice-provider-userservice&quot;,fallback = UserServiceFeignFallback.class, configuration = FeignConfig.class)</div><div class="line">public interface UserServiceFeign extends IUserService&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>IUserService</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 用户业务接口</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line">public interface IUserService &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据ID查的对应的用户</div><div class="line">     *</div><div class="line">     * @param id</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @RequestMapping(value = &quot;/users/&#123;id&#125;&quot;, method = RequestMethod.GET)</div><div class="line">    ResultInfo&lt;UserBean&gt; getUserById(@PathVariable(value = &quot;id&quot;) Long id) throws Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义各接口对应的fallback方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义各接口对应的fallback方法</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFeignFallback</span> <span class="keyword">implements</span> <span class="title">UserServiceFeign</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.NULL.getState(), ReturnInfoEnum.NULL.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义以RestTemplae方式调用接口<br>UserServiceFeignRest</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义通过rest方式访问接口</div><div class="line"> * Created by troylc on 2017/3/6.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFeignRest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo&lt;UserBean&gt; <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        ResultInfo&lt;UserBean&gt; resultInfo  = restTemplate.exchange(<span class="string">"http://microservice-provider-userservice/users/&#123;id&#125;"</span>, HttpMethod.GET, <span class="keyword">null</span>, <span class="keyword">new</span> ParameterizedTypeReference&lt;ResultInfo&lt;UserBean&gt;&gt;() &#123;</div><div class="line">        &#125;, id).getBody();</div><div class="line">        <span class="keyword">return</span> resultInfo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义controller<br>controoler中增加API文档注解、设置启用Hystrix超时及时间</li>
</ul>
<p>ProductControoler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试商品controol</div><div class="line"> * Created by troylc on 2017/3/5.</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductControoler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ProductControoler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IProductService productService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserServiceFeign userServiceFeign;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserServiceFeignRest userServiceFeignRest;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注：<span class="doctag">@GetMapping</span>("/&#123;id&#125;")是spring 4.3的新注解等价于：</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span> user信息</div><div class="line">     * <span class="doctag">@RequestMapping</span>(value = "/id", method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有<span class="doctag">@PostMapping</span>等等</div><div class="line">     */</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找用户,通过spring cloud feign方式"</span>, notes = <span class="string">"根据用户的ID，查找对应的用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"1000"</span>),</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.timeout.enabled"</span>, value = <span class="string">"false"</span>)&#125;)</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUsers/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        UserBean userBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ResultInfo&lt;UserBean&gt; resultInfo = userServiceFeign.getUserById(id);</div><div class="line">            userBean = resultInfo.getData();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注：<span class="doctag">@GetMapping</span>("/&#123;id&#125;")是spring 4.3的新注解等价于：</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span> user信息</div><div class="line">     * <span class="doctag">@RequestMapping</span>(value = "/id", method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有<span class="doctag">@PostMapping</span>等等</div><div class="line">     */</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找库存端口"</span>, notes = <span class="string">"根据端口的ID，查找对应的商品信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"商品ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getCommodityBean/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getCommodityBeanById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        ProductBean productBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            productBean = productService.getCommodityById(id);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;ProductBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), productBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查找用户,通过spring RestTemplate方式"</span>, notes = <span class="string">"根据用户的ID，查找对应的用户"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>, dataType = <span class="string">"Long"</span>)</div><div class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"1000"</span>),</div><div class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.timeout.enabled"</span>, value = <span class="string">"false"</span>)&#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users-rest/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultInfo <span class="title">getUserByRest</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        UserBean userBean = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ResultInfo&lt;UserBean&gt; resultInfo = userServiceFeignRest.getUser(id);</div><div class="line">            userBean =   resultInfo.getData();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            log.error(e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultInfo&lt;&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="部署至swarm集群中-运行测试"><a href="#部署至swarm集群中-运行测试" class="headerlink" title="部署至swarm集群中-运行测试"></a>部署至swarm集群中-运行测试</h2><p>docker-compose文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      deploy:</div><div class="line">        replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">        update_config:</div><div class="line">          parallelism: 1    #每次更新复本数量</div><div class="line">          delay: 2s       #每次更新间隔</div><div class="line">        restart_policy:</div><div class="line">          condition: on-failure     #定义服务的重启条件</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">        image: tcr:5000/myhub/microservice-provider-userservice:0.0.2</div><div class="line">        deploy:</div><div class="line">          replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">          update_config:</div><div class="line">            parallelism: 1    #每次更新复本数量</div><div class="line">            delay: 2s       #每次更新间隔</div><div class="line">          restart_policy:</div><div class="line">            condition: on-failure     #定义服务的重启条件</div><div class="line">        networks:</div><div class="line">          - eureka-net</div><div class="line">        ports:</div><div class="line">          - &quot;9514:9514&quot;</div><div class="line">  productService:</div><div class="line">          image: tcr:5000/myhub/microservice-consumer-productservice:0.0.2</div><div class="line">          deploy:</div><div class="line">            replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">            update_config:</div><div class="line">              parallelism: 1    #每次更新复本数量</div><div class="line">              delay: 2s       #每次更新间隔</div><div class="line">            restart_policy:</div><div class="line">              condition: on-failure     #定义服务的重启条件</div><div class="line">          networks:</div><div class="line">            - eureka-net</div><div class="line">          ports:</div><div class="line">            - &quot;9515:9515&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>执行：<br><img src="/images/spring-cloud/productservice/1.png" alt="image"></p>
<p>在AIP接口文档界面点击获取用户接口以feign的方式，输入用户ID，<br>在AIP接口文档界面点击获取用户接口以rest的方式，输入用户ID<br><img src="/images/spring-cloud/productservice/2.png" alt="image"><br><img src="/images/spring-cloud/productservice/3.png" alt="image"><br><img src="/images/spring-cloud/productservice/4.png" alt="image"></p>
<p>打开仪表盘(<a href="http://productservice:9515/hystrix)，输入http://productservice:9515/hystrix.stream,再多点击几次就出现了监控的数据。" target="_blank" rel="external">http://productservice:9515/hystrix)，输入http://productservice:9515/hystrix.stream,再多点击几次就出现了监控的数据。</a><br><img src="/images/spring-cloud/productservice/5.png" alt="image"><br><img src="/images/spring-cloud/productservice/6.png" alt="image"></p>
<p><strong>附代码仓库地址：</strong><br>码云：<br><a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github:<br><a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud和docker之微服务-provider(二)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/03/09/spirng-cloud-userservice.html</url>
      <content type="html"><![CDATA[<p>通过上一节我们已经通过docker-compose在swarm中部署了有三个实例的高可用eureka服务注册中心,本节我们讨论一下怎么把一个已知的服务注册到eureka上，并且可以在线查找服务的API接口文档说明.<br>本节加入了spring boot中的监控管理的actuator，API接口文档模块swagger2,sping cloud的DiscoveryClient用户将服务注册到eureka注册中心 </p>
<h1 id="服务提供者和服务消费者"><a href="#服务提供者和服务消费者" class="headerlink" title="服务提供者和服务消费者"></a>服务提供者和服务消费者</h1><p>“服务提供者”和“服务消费者”的名词是借用的，在Spring Cloud中看到这样的概念。下面这张表格，简单描述了服务提供者/消费者是什么：<br>名词  | 概念<br>—|—<br>服务提供者 | 服务的被调用方（即：为其他服务提供服务的服务）<br>服务消费者 | 服务的调用方（即：依赖其他服务的服务）  </p>
<h2 id="服务提供者-microservice-provider-userService"><a href="#服务提供者-microservice-provider-userService" class="headerlink" title="服务提供者(microservice-provider-userService)"></a>服务提供者(microservice-provider-userService)</h2><p>这是一个稍微有点杂的程序。我们使用spring-data-jpa操作h2数据库,用swagger2暴露API接口文档，同时将该服务注册到注册中心Eureka中。<br>代码结构：<br><img src="/images/spring-cloud/userservice/1.png" alt="代码结构"></p>
<ol>
<li>在spring-cloud-docker-microservic父项目创建一个Maven子工程，并在pom.xml中添加如下内容：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-provider-userservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--程序入口--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">start-class</span>&gt;</span>com.troylc.cloud.UserServiceApplication<span class="tag">&lt;/<span class="name">start-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--添加spring cloud服务注册的依赖--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 数据库JPA操作--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 用于暴露自身信息的模块，它的主要作用是用于监控与管理 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Boot中使用Swagger2构建RESTful APIs  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://10.211.55.4:8372<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span><span class="comment">&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像名称--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像的基础版本--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:openjdk-8-jdk-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像启动参数--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>配置文件：application.yml  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 9514</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-provider-userservice</div><div class="line">  jpa:</div><div class="line">    generate-ddl: false</div><div class="line">    show-sql: true</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">  datasource:                           # 指定数据源</div><div class="line">    platform: h2                        # 指定数据源类型</div><div class="line">    schema: classpath:schema.sql        # 指定h2数据库的建表脚本</div><div class="line">    data: classpath:data.sql            # 指定h2数据库的insert脚本</div><div class="line"></div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    root: INFO</div><div class="line">    org.hibernate: INFO</div><div class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</div><div class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</div><div class="line">    com.troylc.cloud: ERROR</div><div class="line"></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: userService</div><div class="line">    prefer-ip-address: true</div><div class="line">    ip-address: $&#123;eureka.instance.hostname&#125; #只有当prefer-ip-address: true 时才生效</div><div class="line">    instance-id: $&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;  # 将Instance ID设置成IP:端口的形式</div><div class="line">    status-page-url-path: /usersApi       #修改info的地址为API接口页面</div><div class="line">#    home-page-url-path: /instance-info</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">    healthcheck:</div><div class="line">      enabled: true</div></pre></td></tr></table></figure>
<ol>
<li>用户建表语句：schema.sql</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">if</span> <span class="keyword">exists</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">generated</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>, username <span class="built_in">varchar</span>(<span class="number">255</span>), age <span class="built_in">int</span>, address <span class="built_in">VARCHAR</span>(<span class="number">500</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<ol>
<li>用户测试数据插库语句：data.sql  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into user (id, username, age, address) values (1,&apos;张三&apos;,12,&apos;hunan&apos;);</div><div class="line">insert into user (id, username, age, address) values (2,&apos;李四&apos;,32 ,&apos;beijing&apos;);</div><div class="line">insert into user (id, username, age, address) values (3,&apos;王五&apos;,23,&apos;xiamen&apos;);</div><div class="line">insert into user (id, username, age, address) values (4,&apos;马六&apos;,27,&apos;guangdong&apos;);</div></pre></td></tr></table></figure>
<ol>
<li>编写实体类</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.bean;</div><div class="line"></div><div class="line">import javax.persistence.*;</div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> */</div><div class="line">@Entity</div><div class="line">@Table(name=&quot;user&quot;)</div><div class="line">public class UserBean implements Serializable&#123;</div><div class="line">    /**</div><div class="line">     * 用户主键ID，自动增长</div><div class="line">     */</div><div class="line">    @Id</div><div class="line">    @GeneratedValue(strategy = GenerationType.AUTO)</div><div class="line">    private Long id;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用户姓名</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private String username;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用户名称</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private Integer age;</div><div class="line">    /**</div><div class="line">     * 用户地址</div><div class="line">     */</div><div class="line">    @Column</div><div class="line">    private String address;</div><div class="line"></div><div class="line">    public Long getId() &#123;</div><div class="line">        return this.id;</div><div class="line">    &#125;</div><div class="line">    public void setId(Long id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line">    public String getUsername() &#123;</div><div class="line">        return this.username;</div><div class="line">    &#125;</div><div class="line">    public void setUsername(String username) &#123;</div><div class="line">        this.username = username;</div><div class="line">    &#125;</div><div class="line">    public Integer getAge() &#123;</div><div class="line">        return this.age;</div><div class="line">    &#125;</div><div class="line">    public void setAge(Integer age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    public String getAddress() &#123;</div><div class="line">        return address;</div><div class="line">    &#125;</div><div class="line">    public void setAddress(String address) &#123;</div><div class="line">        this.address = address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写JPA-DAO：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.troylc.cloud.bean.UserBean;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> * 用户持久层JPA接口</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDaoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>,<span class="title">Long</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>SERVICE接口与实现<br>IUserService:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.service;</div><div class="line"><span class="keyword">import</span> com.troylc.cloud.bean.UserBean;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> * 用户业务逻辑处理层</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加用户</div><div class="line">     * <span class="doctag">@param</span> userBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> UserBean <span class="title">saveUser</span><span class="params">(UserBean userBean)</span> <span class="keyword">throws</span> Exception </span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据ID删除用户</div><div class="line">     * <span class="doctag">@param</span> Id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(Long Id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有用户的信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">getAllUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据ID查的对应的用户</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> UserBean <span class="title">getUserById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新用户信息</div><div class="line">     * <span class="doctag">@param</span> userBean</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(UserBean userBean)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UserServiceImpl:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.service.impl;</div><div class="line">import com.troylc.cloud.bean.UserBean;</div><div class="line">import com.troylc.cloud.dao.UserDaoRepository;</div><div class="line">import com.troylc.cloud.service.IUserService;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line">import org.springframework.transaction.annotation.Transactional;</div><div class="line">import javax.annotation.Resource;</div><div class="line">import java.util.List;</div><div class="line">/**</div><div class="line"> * 用户业务处理接口实现类</div><div class="line"> * Created by troylc on 2017/2/27.</div><div class="line"> */</div><div class="line">@Service</div><div class="line">public class UserServiceImpl implements IUserService&#123;</div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserServiceImpl.class);</div><div class="line">    @Resource</div><div class="line">    private UserDaoRepository userDaoRepository;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public UserBean saveUser(UserBean userBean) throws Exception &#123;</div><div class="line">        return userDaoRepository.save(userBean);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public boolean deleteUser(Long Id) throws Exception &#123;</div><div class="line">        try&#123;</div><div class="line">            userDaoRepository.delete(Id);</div><div class="line">            return true;</div><div class="line">        &#125; catch (Exception e)&#123;</div><div class="line">             log.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public List&lt;UserBean&gt; getAllUser() throws Exception &#123;</div><div class="line">        return userDaoRepository.findAll();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public UserBean getUserById(Long id) throws Exception &#123;</div><div class="line">        return userDaoRepository.findOne(id);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    @Transactional</div><div class="line">    public boolean updateUser(UserBean userBean) throws Exception &#123;</div><div class="line">        return userDaoRepository.saveAndFlush(userBean)!=null?true:false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Controller：<br>UserController：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.controller;</div><div class="line"></div><div class="line">import com.troylc.cloud.bean.UserBean;</div><div class="line">import com.troylc.cloud.service.IUserService;</div><div class="line">import com.troylc.cloud.utils.ReturnInfoEnum;</div><div class="line">import com.troylc.cloud.vbean.ResultInfo;</div><div class="line">import io.swagger.annotations.ApiImplicitParam;</div><div class="line">import io.swagger.annotations.ApiImplicitParams;</div><div class="line">import io.swagger.annotations.ApiOperation;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.cloud.client.ServiceInstance;</div><div class="line">import org.springframework.cloud.client.discovery.DiscoveryClient;</div><div class="line">import org.springframework.web.bind.annotation.*;</div><div class="line">import springfox.documentation.annotations.ApiIgnore;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Rest服务提供者，供其它服务调用</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">public class UserController &#123;</div><div class="line"></div><div class="line">    private static Logger log = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private DiscoveryClient discoveryClient;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private IUserService userServiceImpl;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取所有用户</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;获取所有用户&quot;)</div><div class="line">    @GetMapping(&quot;/users&quot;)</div><div class="line">    public ResultInfo getUserList() &#123;</div><div class="line">        List&lt;UserBean&gt; userBeans = new ArrayList&lt;&gt;();</div><div class="line">        try &#123;</div><div class="line">            userBeans = userServiceImpl.getAllUser();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;List&lt;UserBean&gt;&gt;(ReturnInfoEnum.SUCCESS.getState(),ReturnInfoEnum.SUCCESS.getStateInfo(),userBeans);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据User对象创建用户</div><div class="line">     * @param user</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;创建用户&quot;, notes = &quot;根据User对象创建用户&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细实体user&quot;, required = true, dataType = &quot;UserBean&quot;)</div><div class="line">    @PostMapping(&quot;/users&quot;)</div><div class="line">    public ResultInfo postUser(@RequestBody UserBean user) &#123;</div><div class="line">        try &#123;</div><div class="line">            userServiceImpl.saveUser(user);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 注：@GetMapping(&quot;/&#123;id&#125;&quot;)是spring 4.3的新注解等价于：</div><div class="line">     * @param id</div><div class="line">     * @return user信息</div><div class="line">     * @RequestMapping(value = &quot;/id&quot;, method = RequestMethod.GET)</div><div class="line">     * 类似的注解还有@PostMapping等等</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;查找用户&quot;, notes = &quot;根据用户的ID，查找对应的用户&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;)</div><div class="line">    @GetMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo findById(@PathVariable Long id) &#123;</div><div class="line">        UserBean userBean = null;</div><div class="line">        try &#123;</div><div class="line">            userBean = userServiceImpl.getUserById(id);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        ResultInfo resultInfo = new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo(), userBean);</div><div class="line">        return resultInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息</div><div class="line">     * @param id</div><div class="line">     * @param user</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;更新用户详细信息&quot;, notes = &quot;根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息&quot;)</div><div class="line">    @ApiImplicitParams(&#123;</div><div class="line">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;),</div><div class="line">            @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户详细实体user&quot;, required = true, dataType = &quot;User&quot;)</div><div class="line">    &#125;)</div><div class="line">    @PutMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo updateUser(@PathVariable Long id, @RequestBody UserBean user) &#123;</div><div class="line">        try &#123;</div><div class="line">            user.setId(id);</div><div class="line">            userServiceImpl.updateUser(user);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除用户</div><div class="line">     * @param id</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiOperation(value = &quot;删除用户&quot;, notes = &quot;根据url的id来指定删除对象&quot;)</div><div class="line">    @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, paramType = &quot;path&quot;, dataType = &quot;Long&quot;)</div><div class="line">    @DeleteMapping(&quot;/users/&#123;id&#125;&quot;)</div><div class="line">    public ResultInfo deleteUser(@PathVariable Long id) &#123;</div><div class="line">        try &#123;</div><div class="line">            userServiceImpl.deleteUser(id);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            log.error(e.getMessage());</div><div class="line">            return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SYSTEM_ERROR.getState(), ReturnInfoEnum.SYSTEM_ERROR.getStateInfo());</div><div class="line">        &#125;</div><div class="line">        return new ResultInfo&lt;UserBean&gt;(ReturnInfoEnum.SUCCESS.getState(), ReturnInfoEnum.SUCCESS.getStateInfo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 本地服务实例的信息</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @ApiIgnore //swagger忽略此API，在前台暴露</div><div class="line">    @GetMapping(&quot;/instance-info&quot;)</div><div class="line">    public ServiceInstance showInfo() &#123;</div><div class="line">        ServiceInstance localServiceInstance = this.discoveryClient.getLocalServiceInstance();</div><div class="line">        return localServiceInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ApiControoler：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> springfox.documentation.annotations.ApiIgnore;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户服务API转向</div><div class="line"> * Created by troylc on 2017/3/1.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiControoler</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在服务注册中心点击该服务重定向到api接口中心</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@ApiIgnore</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/usersApi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirectApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/swagger-ui.html"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Swagger2 API接口配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</div><div class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/12/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 访问地址 http://ip:prot/swagger-ui.html</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())       <span class="comment">//创建API基本信息</span></div><div class="line">                .groupName(<span class="string">"controller API"</span>)     <span class="comment">//指定分组，对应(/v2/api-docs?group=)</span></div><div class="line">                .pathMapping(<span class="string">""</span>)  <span class="comment">//base地址，最终会拼接Controller中的地址</span></div><div class="line">                .select()    <span class="comment">//控制要暴露的接口</span></div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.troylc.cloud.controller"</span>))  <span class="comment">//通过指定扫描包暴露接口</span></div><div class="line">                .paths(PathSelectors.any())       <span class="comment">//设置过滤规则暴露接口</span></div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"使用Swagger2构建用户RESTful APIs"</span>)</div><div class="line">                .description(<span class="string">"更多相关文章，请关注：http://www.troylc.cc/"</span>)</div><div class="line">                .termsOfServiceUrl(<span class="string">"http://www.troylc.cc"</span>)</div><div class="line">                .contact(<span class="string">"troylc"</span>)</div><div class="line">                .version(<span class="string">"1.0"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>编写Spring Boot启动程序，通过@EnableDiscoveryClient注解，即可将服务注册到Eureka上面去</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(UserServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>11.定义JSON返回信息枚举类和返回类型封装类<br>ReturnInfoEnum：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud.utils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义返回信息枚举</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ReturnInfoEnum &#123;</div><div class="line"></div><div class="line">    SUCCESS(<span class="number">1</span>, <span class="string">"请求操作成功"</span>),</div><div class="line">    NULL(<span class="number">0</span>, <span class="string">"没有你请求的数据"</span>),</div><div class="line">    PARAMETER_ERROR(-<span class="number">1</span>, <span class="string">"请求数据失败，参数错误"</span>),</div><div class="line">    SYSTEM_ERROR(-<span class="number">2</span>, <span class="string">"请求数据失败，系统异常"</span>),</div><div class="line">    NOT_AUTHENTICATE(-<span class="number">3</span>, <span class="string">"请示数据失败，未认证"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String stateInfo;</div><div class="line"></div><div class="line">    ReturnInfoEnum(<span class="keyword">int</span> state, String stateInfo) &#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">        <span class="keyword">this</span>.stateInfo = stateInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stateInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReturnInfoEnum <span class="title">stateOf</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (ReturnInfoEnum state : values()) &#123;</div><div class="line">            <span class="keyword">if</span> (state.getState() == index) &#123;</div><div class="line">                <span class="keyword">return</span> state;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ResultInfo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.troylc.cloud.vbean;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 所有的Rest请求的返回类型封装JSON结果</div><div class="line"> * Created by troylc on 2017/2/28.</div><div class="line"> */</div><div class="line">public class ResultInfo&lt;T&gt; implements Serializable &#123;</div><div class="line"></div><div class="line">    private int success;</div><div class="line"></div><div class="line">    private T data;</div><div class="line"></div><div class="line">    private String mesagess;</div><div class="line"></div><div class="line">    public ResultInfo(int success, String mesagess) &#123;</div><div class="line">        this.success = success;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ResultInfo(int success, String mesagess, T data) &#123;</div><div class="line">        this.success = success;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">        this.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int isSuccess() &#123;</div><div class="line">        return success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSuccess(int success) &#123;</div><div class="line">        this.success = success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public T getData() &#123;</div><div class="line">        return data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setData(T data) &#123;</div><div class="line">        this.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String getMesagess() &#123;</div><div class="line">        return mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMesagess(String mesagess) &#123;</div><div class="line">        this.mesagess = mesagess;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;ResultInfo&#123;&quot; +</div><div class="line">                &quot;success=&quot; + success +</div><div class="line">                &quot;, data=&quot; + data +</div><div class="line">                &quot;, error=&apos;&quot; + mesagess + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改编排部署文件docker-compose文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    deploy:</div><div class="line">      replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">      update_config:</div><div class="line">        parallelism: 1    #每次更新复本数量</div><div class="line">        delay: 2s       #每次更新间隔</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure     #定义服务的重启条件</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      deploy:</div><div class="line">        replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">        update_config:</div><div class="line">          parallelism: 1    #每次更新复本数量</div><div class="line">          delay: 2s       #每次更新间隔</div><div class="line">        restart_policy:</div><div class="line">          condition: on-failure     #定义服务的重启条件</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">  userService:</div><div class="line">        image: tcr:5000/myhub/microservice-provider-userservice:0.0.2</div><div class="line">        deploy:</div><div class="line">          replicas: 1   #定义 replicated 模式的服务的复本数量</div><div class="line">          update_config:</div><div class="line">            parallelism: 1    #每次更新复本数量</div><div class="line">            delay: 2s       #每次更新间隔</div><div class="line">          restart_policy:</div><div class="line">            condition: on-failure     #定义服务的重启条件</div><div class="line">        networks:</div><div class="line">          - eureka-net</div><div class="line">        ports:</div><div class="line">          - &quot;9514:9514&quot;</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<p>至此代码部署完成，其中需要注意的地方是，在加入swagger2的依赖包时，版本需为2.5.0,如果是2.6.0,注册在eureka上的用户服务的端口不会根据application.yml中配置的一样。而是会出现tomcat的默认端口8080</p>
<h2 id="打包及部署操作"><a href="#打包及部署操作" class="headerlink" title="打包及部署操作"></a>打包及部署操作</h2><p><img src="/images/spring-cloud/userservice/2.png" alt="打包"><br>将docker-compose.yml拷贝到swarm集群的master节点上，执行如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml eureka</div><div class="line">Creating network eureka_eureka-net</div><div class="line">Creating service eureka_userService</div><div class="line">Creating service eureka_eurekaService1</div><div class="line">Creating service eureka_eurekaService2</div><div class="line">Creating service eureka_eurekaService3</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps eureka</div><div class="line">ID            NAME                     IMAGE                                                   NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">izc9zknt5vay  eureka_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-master01  Running        Running 17 seconds ago         </div><div class="line">losked39x42d  eureka_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-node02    Running        Running 15 seconds ago         </div><div class="line">jaygfei03isr  eureka_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.0.1        docker-node02    Running        Running 18 seconds ago         </div><div class="line">mvv6lzvlq072  eureka_userService.1     tcr:5000/myhub/microservice-provider-userservice:0.0.2  docker-node01    Running        Running 19 seconds ago</div></pre></td></tr></table></figure></p>
<h2 id="测试用户服务注册情况"><a href="#测试用户服务注册情况" class="headerlink" title="测试用户服务注册情况"></a>测试用户服务注册情况</h2><p><img src="/images/spring-cloud/userservice/3.png" alt="eureka注册中心"><br><img src="/images/spring-cloud/userservice/4.png" alt="API接口"></p>
<p>服务提供者用户服务已经注册到eureka上，后续服务消费者对用户服务进行消费，敬请期待…….</p>
<p><strong>附代码仓库地址：</strong><br>码云：<a href="https://git.oschina.net/gittroylc/spring-cloud-docker-microservice" target="_blank" rel="external">https://git.oschina.net/gittroylc/spring-cloud-docker-microservice</a><br>github: <a href="https://github.com/troychn/spring-cloud-docker-microservice" target="_blank" rel="external">https://github.com/troychn/spring-cloud-docker-microservice</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud和docker之微服务-eureka(一)]]></title>
      <url>http://www.troylc.cc/spring-cloud/2017/03/01/spirng-cloud-eureka.html</url>
      <content type="html"><![CDATA[<p>在软件开发中关于服务的讨论呈现出火爆的局面，有人倾向于在系统设计与开发中采用微服务方式实现软件系统的松耦合、跨部门开发；一些公司已经在生产系统中采用了微服务架构，并且取得了良好的效果；下面我们通过spring cloud和docker来构建一个简单的例子，</p>
<h1 id="spring-cloud简介"><a href="#spring-cloud简介" class="headerlink" title="spring cloud简介"></a>spring cloud简介</h1><p>Spring Cloud是在Spring Boot的基础上构建的，为开发人员提供快速建立分布式系统的有关微服务搭建的一系列的工具，例如：</p>
<p>配置管理（configuration management），服务发现（service discovery），断路器（circuit breakers），智能路由（ intelligent routing），微代理（micro-proxy），控制总线（control bus），一次性令牌（ one-time tokens），全局锁（global locks），领导选举（leadership election），分布式会话（distributed sessions），集群状态（cluster state）<br><img src="/images/spring-cloud/eureka/spring-cloud.jpg" alt="spring cloud组件架构图"><br>具体参考：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">Spring Cloud 项目主页：http://projects.spring.io/spring-cloud/</a></p>
<h1 id="eureka服务发现"><a href="#eureka服务发现" class="headerlink" title="eureka服务发现"></a>eureka服务发现</h1><p>服务发现（Service Discovery）是关键原则之一。手动配置每个客户端或某种形式的约定是很难做的，并且很脆弱。Spring Cloud提供了多种服务发现的实现方式，例如：Eureka、Consul、Zookeeper。这里只讲述基于Eureka的服务发现。</p>
<h1 id="案例准备工作"><a href="#案例准备工作" class="headerlink" title="案例准备工作"></a>案例准备工作</h1><h2 id="开发工具及相关软件准备"><a href="#开发工具及相关软件准备" class="headerlink" title="开发工具及相关软件准备"></a>开发工具及相关软件准备</h2><table>
<thead>
<tr>
<th>环境</th>
<th>版本及说明</th>
<th>参考地址  </th>
</tr>
</thead>
<tbody>
<tr>
<td>docker</td>
<td>v1.13.1,Docker是一个能够把开发的应用程序自动部署到容器的开源引擎</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>doker-compose</td>
<td>v1.11,Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应</td>
<td><a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker、docker-compse最新版本安装</a></td>
</tr>
<tr>
<td>docker swarm</td>
<td>v1.13.1,Docker Engine 1.12或更高版本中内置了集群管理和编排功能。Swarm模式侧重于微服务架构。</td>
<td><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker-swarm创建与管理集群</a></td>
</tr>
<tr>
<td>docker registry</td>
<td>registry:latest,用于存储docker镜像的私有仓库</td>
<td><a href="http://www.troylc.cc/docker/2017/02/01/Docker06registry-jenkins.html">registry集成打包上传镜像</a></td>
</tr>
<tr>
<td>spring boot</td>
<td>1.5.1.RELEASE,是开箱即用，提供一系列大型项目常用的非功能性特征的快速度开发工具</td>
<td><a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">spring boot官网</a></td>
</tr>
<tr>
<td>spring cloud</td>
<td>Camden SR5,Spring Cloud 为开发者提供了在分布式系统（如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性 Token、全局锁、决策竞选、分布式会话和集群状态）操作的开发工具集</td>
<td><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">spring cloud官网</a>  </td>
</tr>
<tr>
<td>开发工具</td>
<td>jdk1.8/IntelliJ idea/maven3.3.9</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h2><p>首先创建一个父项目（spring-cloud-docker-microservice），这样可以对项目中的Maven依赖进行统一的管理。  </p>
<p>项目结构如下：<br><img src="/images/spring-cloud/eureka/1.png" alt="项目结"></p>
<p>pom.xml如下  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加spring boot父项目的依赖，spring cloud是在spring boot基础之上进行开发的，所以需要依赖它--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>myhub<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span><span class="comment">&lt;!--配置镜像仓库的属性--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">docker.repostory</span>&gt;</span>tcr:5000<span class="tag">&lt;/<span class="name">docker.repostory</span>&gt;</span><span class="comment">&lt;!--配置镜像仓库的对应的地址与端口--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加spring cloud依赖--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 配置maven install 跳过test,相当于命令：$mvn install -Dmaven.test.skip = true--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--添加利用maven插件构建docker镜像的插件依赖--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建microservice-eureka-service子项目"><a href="#创建microservice-eureka-service子项目" class="headerlink" title="创建microservice-eureka-service子项目"></a>创建microservice-eureka-service子项目</h2><ul>
<li>创建一个Maven工程（microservice-eureka-service），并在pom.xml中加入如下内容：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="comment">&lt;!--引用父项目的pom--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-docker-microservice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.troylc.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-eureka-service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>project for Spring cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--程序入口--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">start-class</span>&gt;</span>com.troylc.cloud.EurekaServiceApplication<span class="tag">&lt;/<span class="name">start-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--eurekaService必须引用的包--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置需要认证的eurekaservice所需要引用的包--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--设置在执行maven 的install时构建镜像--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--安装了docker的主机，并且打开了api remote接口设置--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://10.211.55.4:8372<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span><span class="comment">&lt;!--设置上传镜像到私有仓库，需要docker设置指定私有仓库地址--&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像名称--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.repostory&#125;/$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像的基础版本--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java:openjdk-8-jdk-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--镜像启动参数--&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>编写Spring Boot启动程序EurekaServiceApplication：通过@EnableEurekaServer申明一个注册中心<br><img src="/images/spring-cloud/eureka/2.png" alt="eurekaServiceApplication"></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.troylc.cloud;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用Eureka做服务发现.</div><div class="line"> * <span class="doctag">@author</span> troylc</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaServiceApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在spring boot的配置文件 application.yml中配置Authenticating、HA高可用及其它相关配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: microservice-eureka-services</div><div class="line">#  profiles:</div><div class="line">#    active: eurekaService1</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: true     # 开启基于HTTP basic的认证</div><div class="line">  user:</div><div class="line">    name: eadmin      # 配置登录的账号是user</div><div class="line">    password: eadmin123   # 配置登录的密码是eadmin123</div><div class="line"></div><div class="line"># 配置三个实例的eureka高可用配置，如果是在swarm集群中服务，请把swarm中我service名称部署为三个，分别为：eurekaService1,eurekaService2,eurekaService3</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService1</div><div class="line">server:</div><div class="line">  port: 9511                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService1         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125; # 将Instance ID设置成IP:端口的形式</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService2</div><div class="line">server:</div><div class="line">  port: 9512                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService2         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService1:9511/eureka/,http://eadmin:eadmin123@eurekaService3:9513/eureka/</div><div class="line">---</div><div class="line">spring:</div><div class="line">  profiles: eurekaService3</div><div class="line">server:</div><div class="line">  port: 9513                    # 指定该Eureka实例的端口</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: eurekaService3         # 指定该Eureka实例的主机名</div><div class="line">    prefer-ip-address: true</div><div class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</div><div class="line">  client:</div><div class="line">    serviceUrl:    #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</div><div class="line">      defaultZone: http://eadmin:eadmin123@eurekaService2:9512/eureka/,http://eadmin:eadmin123@eurekaService1:9511/eureka/</div></pre></td></tr></table></figure>
<ul>
<li>在父项目的根目录下创建一个docker-compose.yml文件，用于把eurekaService部署在docker swarm集群中,compose内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">      image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">      networks:</div><div class="line">        - eureka-net</div><div class="line">      ports:</div><div class="line">        - &quot;9513:9513&quot;</div><div class="line">      environment:</div><div class="line">        - spring.profiles.active=eurekaService3</div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div></pre></td></tr></table></figure>
<h2 id="通过maven插件构建docker镜像"><a href="#通过maven插件构建docker镜像" class="headerlink" title="通过maven插件构建docker镜像"></a>通过maven插件构建docker镜像</h2><p>通过idea中的maven插件构建eurekService的docker镜像到私有仓库<br><img src="/images/spring-cloud/eureka/3.png" alt="构建镜像"><br>在docker环境从私有仓库中下载上面构建的镜像<br><img src="/images/spring-cloud/eureka/4.png" alt="下载镜像"></p>
<p>参考：<br><a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移(一)</a><br><a href="http://www.troylc.cc/docker/2017/02/01/Docker06registry-jenkins.html">jenkins-registry持续集成-jenkins管理与registry集成打包上传镜像(二)</a></p>
<h2 id="在swarm环境中部署高可用的eureka服务"><a href="#在swarm环境中部署高可用的eureka服务" class="headerlink" title="在swarm环境中部署高可用的eureka服务"></a>在swarm环境中部署高可用的eureka服务</h2><p>把之前写的docker-compose.yml文件上传到拥有swarm环境下，执行以下操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">[root@docker-master01 docker-compose]# cat docker-compose.yml </div><div class="line">version: &quot;3&quot;</div><div class="line">services:</div><div class="line">  eurekaService1:      # 默认情况下，其他服务可以使用服务名称连接到该服务。因此，对于peer2的节点，它需要连接http://peer1:8761/eureka/，因此需要配置该服务的名称是peer1。</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9511:9511&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService1</div><div class="line">  eurekaService2:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9512:9512&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService2</div><div class="line">  eurekaService3:</div><div class="line">    image: tcr:5000/myhub/microservice-eureka-service:0.0.1</div><div class="line">    networks:</div><div class="line">      - eureka-net</div><div class="line">    ports:</div><div class="line">      - &quot;9513:9513&quot;</div><div class="line">    environment:</div><div class="line">      - spring.profiles.active=eurekaService3</div><div class="line"></div><div class="line">networks:</div><div class="line">  eureka-net:</div><div class="line">    driver: overlay</div><div class="line">[root@docker-master01 docker-compose]# docker stack deploy -c docker-compose.yml eureka</div><div class="line">Creating network eureka_eureka-net</div><div class="line">Creating service eureka_eurekaService2</div><div class="line">Creating service eureka_eurekaService3</div><div class="line">Creating service eureka_eurekaService1</div><div class="line">[root@docker-master01 docker-compose]# docker stack ps eureka</div><div class="line">ID            NAME                     IMAGE                                             NODE             DESIRED STATE  CURRENT STATE           ERROR  PORTS</div><div class="line">nv8xh5b4tayn  eureka_eurekaService1.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-node02    Running        Running 10 seconds ago         </div><div class="line">thuhip7pgoa2  eureka_eurekaService3.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-node01    Running        Running 12 seconds ago         </div><div class="line">l8lfb9jtdd9m  eureka_eurekaService2.1  tcr:5000/myhub/microservice-eureka-service:0.0.1  docker-master01  Running        Running 12 seconds ago         </div><div class="line">[root@docker-master01 docker-compose]#</div></pre></td></tr></table></figure>
<p>参考：<br><a href="http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html">docker1.12.3 docker-swarm创建与管理集群（一）</a><br><a href="http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html">docker1.12.3 docker-swarm集群服务部署与维护（二）</a>  </p>
<h2 id="验证eureka服务"><a href="#验证eureka服务" class="headerlink" title="验证eureka服务"></a>验证eureka服务</h2><p>在浏览器上输入部署服务1的地址,输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/5.png" alt="登录eureka"><br><img src="/images/spring-cloud/eureka/6.png" alt="eureka服务界面"><br>在浏览器上输入部署服务2的地址输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/7.png" alt="eureka服务界面"><br>在浏览器上输入部署服务3的地址,输入用户名/密码(eadmin/eadmin123)<br><img src="/images/spring-cloud/eureka/8.png" alt="eureka服务界面"> </p>
<p>至此eureka service注册中心基本上已经搭建起来了，后面会通过spring cloud 进行服务提供者的注册，消费者对服务进行消费,以下相关的一些组件，都在swarm集群中部署运行，敬请期待…….</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.itmuch.com/article/13" target="_blank" rel="external">使用Spring Cloud和Docker构建微服务 （一）：序言</a><br><a href="http://blog.didispace.com/springcloud1/" target="_blank" rel="external">Spring Cloud构建微服务架构（一）服务注册与发现</a><br><a href="http://www.itmuch.com/spring-cloud-1/" target="_blank" rel="external">Spring Cloud第一篇 Eureka简介及原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker-compose部署swarm服务(docker1.13.1)]]></title>
      <url>http://www.troylc.cc/docker-compose/2017/02/25/Docker08docker-compose01.html</url>
      <content type="html"><![CDATA[<p>在2017年发布的 Docker 1.13版本中的Docker Compose v3 规范，已经全面支持 Swarm mode 概念。而且从 1.13 开始，Docker 命令行工具支持直接使用 v3 版本的 docker-compose.yml 通过docker stack deploy **进行部署管理，这大大简化了容器编排使用的复杂性。</p>
<h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
<th>安装软件  </th>
</tr>
</thead>
<tbody>
<tr>
<td>172.193.6.222</td>
<td>cloud01</td>
<td>manager</td>
<td>centos7.2/docker1.13/docker-compose1,11</td>
</tr>
<tr>
<td>172.193.6.223</td>
<td>cloud02</td>
<td>worker</td>
<td>centos7.2/docker1.13/docker-compose1,11</td>
</tr>
<tr>
<td>172.193.6.224</td>
<td>cloud03</td>
<td>worker</td>
<td>centos7.2/docker1.13/docker-compose1,11  </td>
</tr>
</tbody>
</table>
<p>安装请参考 <a href="http://www.toutiao.com/i6385354267686863361/" target="_blank" rel="external">docker1.13.x及docker-compose1.11.x的安装与升级</a>  </p>
<h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><p>服务部署示意图请参考 <a href="http://www.toutiao.com/i6384915440631546370/" target="_blank" rel="external">swarm集群服务部署与维护</a> 如下图所示：<br><img src="http://www.troylc.cc/images/docker/swarm/2-4.png" alt="image"></p>
<h3 id="docker-compose在swarm模式中部署服务"><a href="#docker-compose在swarm模式中部署服务" class="headerlink" title="docker-compose在swarm模式中部署服务"></a>docker-compose在swarm模式中部署服务</h3><h4 id="compose文件定义："><a href="#compose文件定义：" class="headerlink" title="compose文件定义："></a>compose文件定义：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#docker-compose v3版本规范</div><div class="line">version: &quot;3.1&quot;</div><div class="line"></div><div class="line">services:</div><div class="line">  mysql:</div><div class="line">    image: &quot;test:5000/myhub/mysql:5.7-dws&quot;</div><div class="line">    #container_name: dcmysql</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    environment:</div><div class="line">      MYSQL_ROOT_PASSWORD: talent</div><div class="line">      MYSQL_DATABASE: citydb</div><div class="line">    volumes:</div><div class="line">      - /nfsdata/data/mysql:/var/lib/mysql</div><div class="line">    expose:</div><div class="line">     - &quot;3306&quot;</div><div class="line">  bootService:</div><div class="line">    image: &quot;test:5000/myhub/bootservice:2.0-dws&quot;</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      replicas: 3</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">    expose:</div><div class="line">      - &quot;8888&quot; </div><div class="line">  nginx:</div><div class="line">    image: &quot;test:5000/myhub/nginx:1.11-dws&quot;</div><div class="line">    networks:</div><div class="line">      - my-overlay-network</div><div class="line">    deploy:</div><div class="line">      replicas: 2</div><div class="line">      update_config:</div><div class="line">        parallelism: 1</div><div class="line">        delay: 2s</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure  </div><div class="line">    ports:</div><div class="line">      - &quot;172.19.6.223:80:80&quot;</div><div class="line">networks:</div><div class="line">  my-overlay-network:</div><div class="line">    driver: overlay</div><div class="line">    ipam:</div><div class="line">      config:</div><div class="line">        - subnet: &quot;10.0.7.0/24&quot;</div></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>v3 中引入了 deploy 指令，可对Swarm mode中服务部署的进行细粒度控制，包括  </p>
<ul>
<li>resources：定义  cpu_shares, cpu_quota, cpuset, mem_limit, memswap_limit 等容器资源控制。（v1/v2中相应指令不再支持）</li>
<li>mode：支持 global 和 replicated (缺省) 模式的服务；</li>
<li>replicas：定义 replicated 模式的服务的复本数量</li>
<li>placement：定义服务容器的部署放置约束条件</li>
<li>update_config：定义服务的更新方式</li>
<li>restart_policy：定义服务的重启条件 （v1/v2中restart指令不再支持）</li>
<li>service：定义服务的标签</li>
</ul>
<h4 id="部署服务的操作"><a href="#部署服务的操作" class="headerlink" title="部署服务的操作"></a>部署服务的操作</h4><p>Swarm模式允许创建一个Docker Engines集群。在1.13版本中， docker stack deploy命令可以用来部署一个Compose文件到Swarm模式。Docker Compose带给我们多容器应用，  </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker stack deploy –compose-file=docker-compose.yml dws</td>
<td>启动服务通过compose文件 stack命名为dws</td>
</tr>
<tr>
<td>docker service scale xxx=n</td>
<td>伸缩服务,需要指定服务名称和伸缩副本数  </td>
</tr>
<tr>
<td>docker stack rm</td>
<td>删除服务</td>
</tr>
</tbody>
</table>
<h4 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@tsccloud01 docker-compose]<span class="comment"># docker stack deploy --compose-file=docker-compose.yml dws</span></div><div class="line">Ignoring deprecated options:</div><div class="line"></div><div class="line">expose: Exposing ports is unnecessary - services on the same network can access each other<span class="string">'s containers on any port.</span></div><div class="line">Creating service dws_nginx</div><div class="line">Creating service dws_mysql </div><div class="line">Creating service dws_bootService</div><div class="line"></div><div class="line">[root@tsccloud01 docker-compose]# docker stack ps dws</div><div class="line">ID            NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE               ERROR  PORTS</div><div class="line">khfdjfs5wycw  dws_bootService.1  tcr:5000/myhub/bootservice:1.0-dws  tsccloud02  Running        Running about a minute ago         </div><div class="line">omo3n8ftk8g3  dws_nginx.1        tcr:5000/myhub/nginx:1.11-dws       tsccloud03  Running        Running about a minute ago         </div><div class="line">e8mmigd1tj9e  dws_mysql.1        tcr:5000/myhub/mysql:5.7-dws        tsccloud01  Running        Running about an hour ago          </div><div class="line">xzlubd2fou4f  dws_bootService.2  tcr:5000/myhub/bootservice:1.0-dws  tsccloud03  Running        Running about a minute ago         </div><div class="line">5ws9o7xwmbpd  dws_nginx.2        tcr:5000/myhub/nginx:1.11-dws       tsccloud02  Running        Running about a minute ago         </div><div class="line">5gzncbpq9626  dws_bootService.3  tcr:5000/myhub/bootservice:1.0-dws  tsccloud01  Running        Running about a minute ago</div><div class="line"></div><div class="line">[root@tsccloud01 docker-compose]# docker service ls</div><div class="line">ID            NAME             MODE        REPLICAS  IMAGE</div><div class="line">b63us2e2eksg  dws_nginx        replicated  2/2       tcr:5000/myhub/nginx:1.11-dws</div><div class="line">kqo1g3s1z0mr  dws_bootService  replicated  3/3       tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">rvlfnogtgtso  dws_mysql        replicated  1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>通过以上操作，和之前用命令在swarm集群中部署一样，</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker1.12.3 docker-swarm集群服务部署与维护（二）]]></title>
      <url>http://www.troylc.cc/docker/2017/02/19/Docker07docker-swarm02.html</url>
      <content type="html"><![CDATA[<p>在上一节中，我们已经搭建了docker swarm集群，并且完成对docker swarm集群的基本管理。<br>接下来我们讨论一下的原理以及怎么在搭建好的docker集群中部署集群服务。</p>
<h3 id="swarm服务运行的原理："><a href="#swarm服务运行的原理：" class="headerlink" title="swarm服务运行的原理："></a>swarm服务运行的原理：</h3><p>在docker swarm中部署应用程序，是通过创建service来实现，这里的service的概念通过是指在一个大的应用上下文中的一个微服务，比如在电商的购物网站中：用户管理、订单管理、库存管理，都是购物网站这个大应用中的一个一个微服务，这些服务可以是单个或者多个的在集群模式中运行。<br>service的类型可以是HTTP的应用程序、数据库、缓存服务等分布式环境中任何可执行的程序。<br><strong>service可定义的选项：</strong></p>
<ul>
<li>可以在swarm集群的外部提供访问服务的端口</li>
<li>可以通过覆盖网络(overlay)模式连接到群中的其他服务</li>
<li>可以设置CPU和内存限制和预留值</li>
<li>可以实现滚动更新策略</li>
<li>可以指定要在群中运行的镜像的副本数  </li>
</ul>
<p><strong>服务，任务和容器</strong><br>当您将服务部署到群集时，swarm管理器接受您的服务定义作为服务的所需状态。然后它在swarm中的节点上将服务调度为一个或多个副本任务。这些任务在群中的节点上彼此独立地运行。  </p>
<p><strong>下图解释服务、任务、容器：</strong> </p>
<p><img src="/images/docker/swarm/2-1.png" alt="服务、任务、容器">  </p>
<p><strong>服务的任务及调试说明：</strong>  </p>
<p><img src="/images/docker/swarm/2-2.png" alt="服务的任务及调试说明">  </p>
<p><strong>服务部署的复制模式和全局模式说明：</strong>  </p>
<p><img src="/images/docker/swarm/2-3.png" alt="服务部署的复制模式和全局模式说明"><br><strong>参考：</strong> <a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/" target="_blank" rel="external">https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/</a></p>
<h3 id="docker-swarm服务部署"><a href="#docker-swarm服务部署" class="headerlink" title="docker-swarm服务部署"></a>docker-swarm服务部署</h3><ul>
<li><strong>环境如下：</strong>  </li>
</ul>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.222</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.223</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.224</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">4sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<ul>
<li><strong>服务部署规划：</strong>   </li>
</ul>
<table>
<thead>
<tr>
<th>服务名</th>
<th>副本数</th>
<th>网络</th>
<th>部署模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>nginx</td>
<td>2</td>
<td>my-network</td>
<td>replicated</td>
<td>nginx服务依赖于bootservice服务  </td>
</tr>
<tr>
<td>bootService</td>
<td>3</td>
<td>my-network</td>
<td>replicatedl</td>
<td>bootservice服务依赖于mysql服务 </td>
</tr>
<tr>
<td>mysql</td>
<td>1</td>
<td>my-network</td>
<td>replicated</td>
<td>mysql服务  </td>
</tr>
</tbody>
</table>
<ul>
<li><strong>服务部署图：</strong>   </li>
</ul>
<p><img src="/images/docker/swarm/2-4.png" alt="服务流程图"></p>
<h3 id="服务部署实施："><a href="#服务部署实施：" class="headerlink" title="服务部署实施："></a>服务部署实施：</h3><h4 id="BUILD服务所需的容器："><a href="#BUILD服务所需的容器：" class="headerlink" title="BUILD服务所需的容器："></a>BUILD服务所需的容器：</h4><ul>
<li><strong>程序代码结构：</strong>  </li>
</ul>
<p><img src="/images/docker/swarm/2-5.png" alt="程序结构"></p>
<ul>
<li><strong>代码参考：</strong>   </li>
</ul>
<p><a href="https://github.com/troychn/springboot-docker-swarm" target="_blank" rel="external">github源代码</a><br><img src="/images/docker/swarm/2-6.png" alt="github源码"></p>
<p>把代码从github中下载下来，通过maven编译工具进行编译打包，一般都集成一些开发工具一起使用，我这里通过IDEA编译打包好的jar和dockerfile文件拷贝到docker环境下，如：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># ls</span></div><div class="line">bootService  mysql  nginx</div><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># ll</span></div><div class="line">总用量 0</div><div class="line">drwxr-xr-x. 2 root root 67 11月 30 17:42 bootService</div><div class="line">drwxr-xr-x. 2 root root 74 11月 30 17:42 mysql</div><div class="line">drwxr-xr-x. 2 root root 59 11月 30 17:42 nginx</div></pre></td></tr></table></figure>
<ul>
<li><strong>构建mysql镜像：</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev docker-swarm-service]<span class="comment"># cd mysql</span></div><div class="line">[root@dmpdev mysql]<span class="comment"># ls</span></div><div class="line">city-db.sql  Dockerfile  my.cnf</div><div class="line">[root@dmpdev mysql]<span class="comment"># docker build -t tcr:5000/myhub/mysql:5.7-dws .</span></div><div class="line">Sending build context to Docker daemon 28.67 kB</div><div class="line">Step 1 : FROM mysql</div><div class="line"> ---&gt; d9124e6c552f</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 0b95a555c8cf</div><div class="line"> ---&gt; 5ab93bf1762d</div><div class="line">Removing intermediate container 0b95a555c8cf</div><div class="line">Step 3 : COPY city-db.sql /docker-entrypoint-initdb.d/city-db.sql</div><div class="line"> ---&gt; 81385fa16444</div><div class="line">Removing intermediate container 718e7a1369c3</div><div class="line">Step 4 : COPY my.cnf /etc/mysql/my.cnf</div><div class="line"> ---&gt; 5669d98b188a</div><div class="line">Removing intermediate container 926998a0e768</div><div class="line">Step 5 : RUN <span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezone</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 9b23322b62db</div><div class="line"> ---&gt; ff6e7d0e75af</div><div class="line">Removing intermediate container 9b23322b62db</div><div class="line">Step 6 : EXPOSE 3306</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 8bb45bc9c3e6</div><div class="line"> ---&gt; 9d71c84043af</div><div class="line">Removing intermediate container 8bb45bc9c3e6</div><div class="line">Successfully built 9d71c84043af</div></pre></td></tr></table></figure>
<p>push到docker私有仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/mysql:5.7-dws</span></div><div class="line">The push refers to a repository [tcr:5000/myhub/mysql]</div><div class="line">0b63e7f5c61b: Image successfully pushed </div><div class="line">a9103bf08dd6: Image successfully pushed </div><div class="line">4a8cfaac9133: Image successfully pushed </div><div class="line">ee30b869dd90: Image successfully pushed </div><div class="line">b5d824491b78: Already exists </div><div class="line">b26238180bc8: Already exists </div><div class="line">01e91410235e: Already exists </div><div class="line">b610b16e919f: Already exists </div><div class="line">1574ff8789b1: Already exists </div><div class="line">e7048a1643a4: Already exists </div><div class="line">1bc74a039df4: Already exists </div><div class="line">6ebad06b3e49: Already exists </div><div class="line">f1621398948b: Already exists </div><div class="line">fe4c16cbf7a4: Already exists </div><div class="line">Pushing tag <span class="keyword">for</span> rev [9d71c84043af] on &#123;http://tcr:5000/v1/repositories/myhub/mysql/tags/5.7-dws&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>构建bootService镜像：</strong>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 mysql] <span class="built_in">cd</span> ../bootService/</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker build -t tcr:5000/myhub/bootservice:1.0-dws .</span></div><div class="line">Sending build context to Docker daemon 28.77 MB</div><div class="line">Step 1 : FROM java:openjdk-8-jre-alpine</div><div class="line"> ---&gt; ed933d9cbb9b</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> e020e5dc61a4</div><div class="line"> ---&gt; 1dca6a2dc31c</div><div class="line">Removing intermediate container e020e5dc61a4</div><div class="line">Step 3 : ADD springboot_controller-1.0-SNAPSHOT.jar /app.jar</div><div class="line"> ---&gt; 94d9cb5ce2a3</div><div class="line">Removing intermediate container f151c9ea203e</div><div class="line">Step 4 : EXPOSE 8888</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 1257615513df</div><div class="line"> ---&gt; a192b60e42f7</div><div class="line">Removing intermediate container 1257615513df</div><div class="line">Step 5 : ENTRYPOINT java -jar /app.jar</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 623ec299ddaa</div><div class="line"> ---&gt; 87e646e370af</div><div class="line">Removing intermediate container 623ec299ddaa</div><div class="line">Successfully built 87e646e370af</div><div class="line"></div><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/bootservice:1.0-dws</span></div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li><strong>构建nginx镜像：</strong>   </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 bootService] <span class="built_in">cd</span> ../nginx/</div><div class="line">[root@cloud03 nginx]<span class="comment"># docker build -t tcr:5000/myhub/nginx:1.11-dws .</span></div><div class="line">Sending build context to Docker daemon 7.168 kB</div><div class="line">Step 1 : FROM nginx</div><div class="line"> ---&gt; abf312888d13</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 883582f786a5</div><div class="line"> ---&gt; f234706e9ee5</div><div class="line">Removing intermediate container 883582f786a5</div><div class="line">Step 3 : COPY nginx.conf /etc/nginx/nginx.conf</div><div class="line"> ---&gt; 82053ab65cae</div><div class="line">Removing intermediate container b2eb37dd4ecc</div><div class="line">Step 4 : COPY default.conf /etc/nginx/conf.d/default.conf</div><div class="line"> ---&gt; f43184cfb2fa</div><div class="line">Removing intermediate container 0f7add1f3f67</div><div class="line">Step 5 : RUN mkdir -p /etc/nginx/logs</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 74c0fbabe4ee</div><div class="line"> ---&gt; f20f5d30e5db</div><div class="line">Removing intermediate container 74c0fbabe4ee</div><div class="line">Step 6 : RUN <span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezonedo</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 35003953a04b</div><div class="line"> ---&gt; b3bb199c7506</div><div class="line">Removing intermediate container 35003953a04b</div><div class="line">Step 7 : EXPOSE 80</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 6d7ded8bb94b</div><div class="line"> ---&gt; 7e0d4b715b92</div><div class="line">Removing intermediate container 6d7ded8bb94b</div><div class="line">Successfully built 7e0d4b715b92</div><div class="line">[root@dmpdev mysql]<span class="comment"># docker push tcr:5000/myhub/nginx:1.11-dws</span></div><div class="line">......</div></pre></td></tr></table></figure>
<h4 id="创建overlay网络："><a href="#创建overlay网络：" class="headerlink" title="创建overlay网络："></a>创建overlay网络：</h4><p>my-network,使用overlay网络连接集群中的一个或多个服务。<br>在manager节点上创建overlay网络，使用docker network create命令：<br><strong>–driver overlay</strong> 网络类型<br><strong>–subnet 10.0.9.0/24</strong> 子网地址段<br><strong>–opt encrypted</strong> 给此网络加密（<a href="https://docs.docker.com/engine/userguide/networking/overlay-security-model/" target="_blank" rel="external">具体说明请参考：https://docs.docker.com/engine/userguide/networking/overlay-security-model/</a>）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment">#  docker network create \</span></div><div class="line">&gt;   --driver overlay \</div><div class="line">&gt;   --subnet 10.0.9.0/24 \</div><div class="line">&gt;   --opt encrypted \</div><div class="line">&gt;   my-network</div><div class="line">bhna620fxpuryf2e1te6hui1t</div><div class="line">[root@cloud01 ~]<span class="comment"># docker network ls</span></div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line">8fd3e2a10dff        bridge              bridge              <span class="built_in">local</span>               </div><div class="line">987934476ba0        docker_gwbridge     bridge              <span class="built_in">local</span>               </div><div class="line">77ac8b224344        host                host                <span class="built_in">local</span>               </div><div class="line">aeyt32avj7kq        ingress             overlay             swarm               </div><div class="line">bhna620fxpur        my-network          overlay             swarm               </div><div class="line">436685dca07d        none                null                <span class="built_in">local</span>               </div><div class="line">[root@cloud01 ~]<span class="comment"># docker network inspect my-network</span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"my-network"</span>,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"bhna620fxpuryf2e1te6hui1t"</span>,</div><div class="line">        <span class="string">"Scope"</span>: <span class="string">"swarm"</span>,</div><div class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay"</span>,</div><div class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"IPAM"</span>: &#123;</div><div class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</div><div class="line">            <span class="string">"Options"</span>: null,</div><div class="line">            <span class="string">"Config"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"Subnet"</span>: <span class="string">"10.0.9.0/24"</span>,</div><div class="line">                    <span class="string">"Gateway"</span>: <span class="string">"10.0.9.1"</span></div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Containers"</span>: null,</div><div class="line">        <span class="string">"Options"</span>: &#123;</div><div class="line">            <span class="string">"com.docker.network.driver.overlay.vxlanid_list"</span>: <span class="string">"257"</span>,</div><div class="line">            <span class="string">"encrypted"</span>: <span class="string">""</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Labels"</span>: null</div><div class="line">    &#125;</div><div class="line">]</div><div class="line"></div><div class="line">```  </div><div class="line"><span class="comment">#### 创建mysql服务  </span></div><div class="line">在manager节点创建mysql服务，参数说明：  </div><div class="line">**--replicas :** 服务运行的副本个数  </div><div class="line">**--name :** 服务名称  </div><div class="line">**--network :** 服务运行时所处在的网络  </div><div class="line">**--endpoint-mode dnsrr :** 服务发现的方式dns  </div><div class="line">**--mount <span class="built_in">type</span>=<span class="built_in">bind</span> :** 服务以绑定方式挂载数据目录(挂载前宿主机目录必须先创建)  </div><div class="line">**--e :** 针对mysql服务创建时需要的启动参数  </div><div class="line">**--tcr:5000/myhub/mysql:5.7-dws** 所运行的镜像</div><div class="line"></div><div class="line">```bash</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">   --replicas 1 \</div><div class="line">   --name mysql \</div><div class="line">   --network my-network \</div><div class="line">   --endpoint-mode dnsrr \</div><div class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/var/lib/mysql,dst=/var/lib/mysql \</div><div class="line">   -e MYSQL_ROOT_PASSWORD=talent \</div><div class="line">   -e MYSQL_DATABASE=citydb \</div><div class="line">   tcr:5000/myhub/mysql:5.7-dws</div><div class="line">33wyod9syd1fcq2ip58872ce6</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME   REPLICAS  IMAGE                         COMMAND</div><div class="line">33wyod9syd1f  mysql  0/1       tcr:5000/myhub/mysql:5.7-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps mysql </span></div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">2nrar9c71olxrc7wo3ab6hxfh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud02  Running        Preparing 28 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME   REPLICAS  IMAGE                         COMMAND</div><div class="line">33wyod9syd1f  mysql  1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>查看cloud02主机上是否运行了mysql数据库服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">d168b5948e55        tcr:5000/myhub/mysql:5.7-dws   <span class="string">"docker-entrypoint.sh"</span>   24 seconds ago      Up 22 seconds       3306/tcp            mysql.1.2nrar9c71olxrc7wo3ab6hxfh</div></pre></td></tr></table></figure>
<h4 id="创建bootService服务"><a href="#创建bootService服务" class="headerlink" title="创建bootService服务"></a>创建bootService服务</h4><p>在manager节点上操作创建3个容器副本的bootService服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">   --replicas 3 \</div><div class="line">   --name bootService \</div><div class="line">   --network my-network \</div><div class="line">   --endpoint-mode dnsrr \</div><div class="line">   tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">5cy0l5cuidlgqjqczwotikvke</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">33wyod9syd1f  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">5cy0l5cuidlg  bootService  2/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME           IMAGE                               NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">b7va0y4dg01chnhu3hlvzi7o8  bootService.1  tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 7 seconds ago   </div><div class="line">8zbgh0rl9w6amhmjxj2rmu627  bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 22 seconds ago  </div><div class="line">3lgnfy11sgs4hj3375o30j5us  bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 22 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">33wyod9syd1f  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">5cy0l5cuidlg  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">37218abdd4ec        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   41 seconds ago      Up 40 seconds       8888/tcp            bootService.1.b7va0y4dg01chnhu3hlvzi7o8</div></pre></td></tr></table></figure>
<p>在cloud03上看另外两个容器：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 nginx]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">4eef20ce8f95        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   2 minutes ago       Up 2 minutes        8888/tcp            bootService.2.8zbgh0rl9w6amhmjxj2rmu627</div><div class="line">960e905306e9        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   2 minutes ago       Up 2 minutes        8888/tcp            bootService.3.3lgnfy11sgs4hj3375o30j5us</div></pre></td></tr></table></figure>
<h4 id="创建nginx服务"><a href="#创建nginx服务" class="headerlink" title="创建nginx服务"></a>创建nginx服务</h4><p>在manager节点上操作创建运行2个容器副本的nginx服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service create \</span></div><div class="line">  --name nginx \</div><div class="line">  --replicas 2 \</div><div class="line">  --publish 80:80 \</div><div class="line">  --network my-network \</div><div class="line">  tcr:5000/myhub/nginx:1.11-dws</div><div class="line">5cd0eaow2zp0ytul3muy71gcl</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        0/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps nginx</span></div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 1 seconds ago   </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 11 seconds ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<h3 id="服务的管理与测试"><a href="#服务的管理与测试" class="headerlink" title="服务的管理与测试"></a>服务的管理与测试</h3><ul>
<li><strong>访问应用测试</strong>  </li>
</ul>
<p>通过浏览器输入<a href="http://cloud01(对就服务的IP),如：" target="_blank" rel="external">http://cloud01(对就服务的IP),如：</a><br><img src="/images/docker/swarm/2-7.png" alt="应用测试">  </p>
<p>可以多次刷新一下，监控bootService服务打印出来的日志，他会帮你负载到不同的服务容器上，这里就不做说明了。</p>
<ul>
<li><strong>应用异常停止测试</strong>  </li>
</ul>
<p>找一台运行了bootService应用的机器手动停止容器，docker-swarm会根据你创建时副本的数量为标准，自动新建副本，以达到服务运行的要求，如下：<br>cloud02上停止一个bootService应用  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">c5ade28e1900        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours          8888/tcp            bootService.2.9w5fhethqmyob9l27257ijl4k</div><div class="line">01aedb0fbdcd        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours          8888/tcp            bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment"># docker stop bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</span></div><div class="line">bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE                                COMMAND                CREATED             STATUS                        PORTS               NAMES</div><div class="line">050cf1feb5b1        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   29 seconds ago      Up 28 seconds                 8888/tcp            bootService.3.dwbmcqnjwjlntujy6xzvss4qn</div><div class="line">c5ade28e1900        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Up 3 hours                    8888/tcp            bootService.2.9w5fhethqmyob9l27257ijl4k</div><div class="line">01aedb0fbdcd        tcr:5000/myhub/bootservice:1.0-dws   <span class="string">"java -jar /app.jar"</span>   3 hours ago         Exited (143) 34 seconds ago                       bootService.3.0ixrtpss8jk62iqdq0z8q4z0g</div><div class="line">[root@cloud02 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>在管理节点查看服务的状态：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE            ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 3 hours ago      </div><div class="line">9w5fhethqmyob9l27257ijl4k  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 3 hours ago      </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Ready          Preparing 3 seconds ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 3 seconds ago     <span class="string">"task: non-zero exit (143)"</span></div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE           ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 3 hours ago     </div><div class="line">9w5fhethqmyob9l27257ijl4k  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 3 hours ago     </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 16 seconds ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 22 seconds ago   <span class="string">"task: non-zero exit (143)"</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>宿主机停机扩容，更新测试</strong>：  </li>
</ul>
<p>现在如果有一台宿主机的容量，或者内存等以达到了峰值，想对这台主机进行停机扩容，或者相关的系统更新等操作，可以修改主机的集群可见性状态  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Active        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker node update --availability Drain cloud02</span></div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Drain         </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps nginx</span></div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 4 hours ago  </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 4 hours ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps mysql</span></div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">488dnyp5czuwta2velkeidxxh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud03  Running        Running 4 hours ago  </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 4 hours ago       </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 54 seconds ago    </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 58 seconds ago   </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 54 seconds ago    </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 59 seconds ago   </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed about an hour ago  <span class="string">"task: non-zero exit (143)"</span></div></pre></td></tr></table></figure>
<p>通过以上测试可以发现运行在cloud02上的容器全部停止，并且swarm集群会自动迁移cloud02上的容器到其它宿主机上。这样我们就可以在cloud02上进行硬件升级操作，等升级完后，可以进行恢复操作，如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker node update --availability Active cloud02</div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]# docker node ls</div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">f1ocfd3u8na92f2to8txdogop    cloud02  Ready   Active        </div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/3       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]# docker service ps nginx</div><div class="line">ID                         NAME     IMAGE                          NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">5aiaqlbvn36hn4q1n6vuzbfre  nginx.1  tcr:5000/myhub/nginx:1.11-dws  cloud03  Running        Running 5 hours ago  </div><div class="line">c5y5ppps3i36wpsx5jovo7f8h  nginx.2  tcr:5000/myhub/nginx:1.11-dws  cloud01  Running        Running 5 hours ago  </div><div class="line">[root@cloud01 ~]# docker service ps mysql</div><div class="line">ID                         NAME     IMAGE                         NODE        DESIRED STATE  CURRENT STATE        ERROR</div><div class="line">488dnyp5czuwta2velkeidxxh  mysql.1  tcr:5000/myhub/mysql:5.7-dws  cloud03  Running        Running 5 hours ago  </div><div class="line">[root@cloud01 ~]# docker service ps bootService</div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE             ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 5 hours ago       </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 11 minutes ago    </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 11 minutes ago   </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 11 minutes ago    </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown 11 minutes ago   </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed about an hour ago  &quot;task: non-zero exit (143)&quot;</div></pre></td></tr></table></figure>
<p>恢复回来的主机cloud02，集群并没有把之前在这台主机上运行的容器恢复，他只是会在之前创建service时，会加大在这台主机运行容器的权重，比如接下来我加大对bootService的副本的个为6个，集群应该会优先在cloud02上运行.</p>
<ul>
<li><strong>调整service的副本数：</strong>  </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker service scale bootService=6</span></div><div class="line">bootService scaled to 6</div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  3/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ps bootService</span></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE               ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 6 hours ago         </div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running about an hour ago   </div><div class="line">9w5fhethqmyob9l27257ijl4k   \_ bootService.2  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown about an hour ago  </div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running about an hour ago   </div><div class="line">dwbmcqnjwjlntujy6xzvss4qn   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Shutdown about an hour ago  </div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 2 hours ago          <span class="string">"task: non-zero exit (143)"</span></div><div class="line">df2gl62u120hix9ixmdvxmr7s  bootService.4      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 12 seconds ago      </div><div class="line">8jauwg0g07qgcjwydfil71uei  bootService.5      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 13 seconds ago      </div><div class="line">f4xwd11aof6rxxf1alovq8ulp  bootService.6      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running 12 seconds ago      </div><div class="line">[root@cloud01 ~]<span class="comment"># docker service ls</span></div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>可以看到在增加3个bootService的副本时，他把三个副本都在cloud02上运行</p>
<ul>
<li><strong>service在线滚动升级：</strong>  </li>
<li>[x] 升级之前需要修改代码程序，比如：  </li>
</ul>
<p><img src="/images/docker/swarm/2-8.png" alt="更新代码"></p>
<ul>
<li>[x] 重新build镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 bootService]<span class="comment"># docker build -t tcr:5000/myhub/bootservice:2.0-dws .</span></div><div class="line">Sending build context to Docker daemon 57.54 MB</div><div class="line">Step 1 : FROM java:openjdk-8-jre-alpine</div><div class="line"> ---&gt; ed933d9cbb9b</div><div class="line">Step 2 : MAINTAINER troylc &lt;troylc@163.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 1541be2de9a0</div><div class="line"> ---&gt; 045d03ddb174</div><div class="line">Removing intermediate container 1541be2de9a0</div><div class="line">Step 3 : ADD springboot_controller-1.0-SNAPSHOT.jar /app.jar</div><div class="line"> ---&gt; 7cdbe5b89ad9</div><div class="line">Removing intermediate container 812ee39672ec</div><div class="line">Step 4 : EXPOSE 8888</div><div class="line"> ---&gt; Running <span class="keyword">in</span> f606dddc345b</div><div class="line"> ---&gt; 5c3d29d21ffc</div><div class="line">Removing intermediate container f606dddc345b</div><div class="line">Step 5 : ENTRYPOINT java -jar /app.jar</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 21950f69009e</div><div class="line"> ---&gt; 4c051321084e</div><div class="line">Removing intermediate container 21950f69009e</div><div class="line">Successfully built 4c051321084e</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker images</span></div><div class="line">REPOSITORY                   TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">tcr:5000/myhub/bootservice   2.0-dws                4c051321084e        8 seconds ago       136.6 MB</div><div class="line">tcr:5000/myhub/nginx         1.11-dws               ac60c7d1de84        8 hours ago         181.5 MB</div><div class="line">tcr:5000/myhub/bootservice   1.0-dws                efde01242708        8 hours ago         136.6 MB</div><div class="line">tcr:5000/myhub/mysql         5.7-dws                ab71fac9c8e0        23 hours ago        383.4 MB</div><div class="line">nginx                        latest                 abf312888d13        2 days ago          181.5 MB</div><div class="line">tcr:5000/myhub/dmpmysql      latest                 a0af62341076        7 days ago          374.1 MB</div><div class="line">tcr:5000/myhub/mysql         5.7                    261ed3d3451f        7 days ago          383.4 MB</div><div class="line">java                         openjdk-8-jre-alpine   ed933d9cbb9b        13 days ago         107.8 MB</div><div class="line">[root@cloud03 bootService]<span class="comment"># docker push tcr:5000/myhub/bootservice:2.0-dws</span></div><div class="line">The push refers to a repository [tcr:5000/myhub/bootservice]</div><div class="line">0ab32fba5be5: Image successfully pushed </div><div class="line">d1052adb22b9: Already exists </div><div class="line">30125717c842: Already exists </div><div class="line">011b303988d2: Already exists </div><div class="line">Pushing tag <span class="keyword">for</span> rev [4c051321084e] on &#123;http://tcr:5000/v1/repositories/myhub/bootservice/tags/2.0-dws&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>为了跟踪查询我们bootService服务在滚动更新中的状态, 我们新开一个ssh窗口连接cloud01, 执行watch命令, 监控worker服务状态:<br>如下命令可以打开一个监控窗口, 每秒监控我们worker服务的状态变化:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># watch -n1 "docker service ps bootService | grep -v Shutdown.*Shutdown"</span></div><div class="line">Every 1.0s: docker service ps bootService | grep -v Shutdown.*Shutdown                                                                                                           Thu Dec  1 17:52:55 2016</div><div class="line"></div><div class="line">ID                         NAME               IMAGE                               NODE        DESIRED STATE  CURRENT STATE              ERROR</div><div class="line">0es1d8ia3e1u1budw422wgpyo  bootService.1      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 7 hours ago</div><div class="line">9tcl88byfznsez65av2x0hq94  bootService.2      tcr:5000/myhub/bootservice:1.0-dws  cloud03  Running        Running 2 hours ago</div><div class="line">5spkzjw760w4zbd79qiy1xc0u  bootService.3      tcr:5000/myhub/bootservice:1.0-dws  cloud01  Running        Running 2 hours ago</div><div class="line">0ixrtpss8jk62iqdq0z8q4z0g   \_ bootService.3  tcr:5000/myhub/bootservice:1.0-dws  cloud02  Shutdown       Failed 4 hours ago         <span class="string">"task: non-zero exit (143)"</span></div><div class="line">df2gl62u120hix9ixmdvxmr7s  bootService.4      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div><div class="line">8jauwg0g07qgcjwydfil71uei  bootService.5      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div><div class="line">f4xwd11aof6rxxf1alovq8ulp  bootService.6      tcr:5000/myhub/bootservice:1.0-dws  cloud02  Running        Running about an hour ago</div></pre></td></tr></table></figure>
<p>下面我们有了新bootService服务的镜像2.0-dws, 我们来滚动更新我们的6个bootService:  </p>
<p>这里只用docker service update 命令:<br><strong>–update-parallelism</strong>指定每次update的容器数量<br><strong>–update-delay</strong> 每次更新之后的等待时间.<br><strong>–image</strong>后面跟服务镜像名称  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]# docker service update bootService --update-parallelism 2 --update-delay 5s --image tcr:5000/myhub/bootservice:2.0-dws</div><div class="line">bootService</div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:2.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws        </div><div class="line">[root@cloud01 ~]#</div></pre></td></tr></table></figure>
<p>执行完后，查看上面打开的监控情况，发现他会按照你指定的更新参数，升级bootService服务。<br>打开页面验证<br><img src="/images/docker/swarm/2-9.png" alt="验证2.0版本"></p>
<ul>
<li><strong>容器服务回滚</strong>  </li>
</ul>
<p>如果我们发现, 新版本bootService有问题希望回滚怎么办呢.<br>很简单, 跟上面更新的命令一样啊, 直接只用v0.1版本的镜像就可以了.<br>上面我们演示了滚动更新, 如果你希望一次性都更新或者回滚呢, 更简单了, 不加参数就行了.</p>
<p>下面我们一次性回滚所有bootService服务到1.0版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker service update bootService --image tcr:5000/myhub/bootservice:1.0-dws</div><div class="line">bootService</div><div class="line">[root@cloud01 ~]# docker service ls</div><div class="line">ID            NAME         REPLICAS  IMAGE                               COMMAND</div><div class="line">5cd0eaow2zp0  nginx        2/2       tcr:5000/myhub/nginx:1.11-dws       </div><div class="line">5v4kajpztp35  bootService  6/6       tcr:5000/myhub/bootservice:1.0-dws  </div><div class="line">6zpecsjj6ttm  mysql        1/1       tcr:5000/myhub/mysql:5.7-dws</div></pre></td></tr></table></figure>
<p>可以看到bootService服务都回滚到1.0-dws版本了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中并发工具包-同步器（一）]]></title>
      <url>http://www.troylc.cc/java/2017/02/15/java01-thread-tools.html</url>
      <content type="html"><![CDATA[<p>传统的多线程中并没有提供高级特性，比如：信号量、线程池、执行管理器等。而这些特殊恰恰是有助于创建更加强大的并发程序。java中并发工具处于java.util.concurrent包中，其中包括的内容包括：同步器、执行器、并发集合、Fork/join框架、atomic包和locks包。<br>下面介绍一下线程开发中的工具包内容：</p>
<ul>
<li>同步器：是为每种特定的同步问题提供的解决方案；</li>
<li>执行器：用来管理线程执行，如：线程池</li>
<li>并发集合：提供了集合框架中集合的并发版本</li>
<li>Fork/join框架：提供了对并行编程的支持</li>
<li>atomic包：提供了不需要锁即可完成并发环境变量使用的原子性操作。</li>
<li>locks包：使用locks接口为并发编程提供了同步的另一种替代方案，也就相当于Synchronize关键字的替代方案。</li>
</ul>
<h1 id="同步器"><a href="#同步器" class="headerlink" title="同步器"></a>同步器</h1><p>同步器：是为每种特定的同步问题提供的解决方案；</p>
<p><strong>信号量同步器</strong> ：通过计数器控制对共享资源的访问<br>步骤：<br>semaphore(int count):创建拥有count个许可证的信号量<br>acquire()/acquire(int num):获取1/num个许可证<br>release()/release(int num):释放1/num个许可证<br>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//编写两个柜员的信号量许可证，相当于最大允许多少线程来并发。</span></div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</div><div class="line"></div><div class="line">        Person p1 = <span class="keyword">new</span> Person(semaphore, <span class="string">"A"</span>);</div><div class="line">        p1.start();</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(semaphore, <span class="string">"B"</span>);</div><div class="line">        p2.start();</div><div class="line">        Person p3 = <span class="keyword">new</span> Person(semaphore, <span class="string">"C"</span>);</div><div class="line">        p3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="comment">//定义一个信号量</span></div><div class="line">    <span class="keyword">private</span> Semaphore semaphore;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Semaphore semaphore, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//等待空闲柜台来服务</span></div><div class="line">        System.out.println(getName() + <span class="string">" is waiting ...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//获取信号量同步器的许可证来为我服务，是否能够获取得到柜台服务，</span></div><div class="line">            <span class="comment">// 是要看银行有多少个柜台，这里相当于定义的信号最同步器最大允许的同步数。</span></div><div class="line">            semaphore.acquire();</div><div class="line">            System.out.println(getName() + <span class="string">" is servicing..."</span>);</div><div class="line">            <span class="comment">//休眠一秒表示服务的时长</span></div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(getName() + <span class="string">" is done!"</span>);</div><div class="line">        <span class="comment">//服务完成后，释放信号量许可给下一个客记服务。</span></div><div class="line">        semaphore.release();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计数栓同步器</strong> :必须发生指定数量的事件后才可以继续运行<br> CountDownLatch(int count):必须发生count个数量才可以打开锁存器<br> await():等待锁存器：线程可以阻塞等待这一数量到达零<br> countDown()解发事件：每被调用一次，这一数量就减一  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"A"</span>).start();</div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"B"</span>).start();</div><div class="line">        <span class="keyword">new</span> Racer(countDownLatch, <span class="string">"C"</span>).start();</div><div class="line"></div><div class="line">        <span class="comment">//开始计数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="number">3</span> - i);</div><div class="line">            countDownLatch.countDown();</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)</div><div class="line">                System.out.println(<span class="string">"Start"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如运动员赛跑比赛，在裁判员喊一二三，开如跑的时候，一起跑。</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Racer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Racer</span><span class="params">(CountDownLatch countDownLatch, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(getName()+ <span class="string">"线程阻塞等待"</span>);</div><div class="line">            countDownLatch.await();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">                System.out.println(getName() + <span class="string">" :"</span> + i);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>循环屏障同步器：</strong>主要作用适用于只有多个线程都到达预定点时才可以继续执行<br> CyclicBarrier(int num):等待线程的数量<br> CyclicBarrier(int num,Runnable action):等待线程的数量以及所有线程到达后的操作<br> await():到达临界点后的暂停线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cyclicBarrierDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Game start"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"A"</span>).start();</div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"B"</span>).start();</div><div class="line">        <span class="keyword">new</span> Player(cyclicBarrier, <span class="string">"C"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如斗地方游戏的场景，一个人开始，等待另两个玩家开始</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(CyclicBarrier cyclicBarrier, String name)</span> </span>&#123;</div><div class="line">        setName(name);</div><div class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(getName() + <span class="string">" is waiting other players...."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cyclicBarrier.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>交换器同步器：</strong> 简化两个线程间数据的交换<br> Exchanger<v>：指定进行交换的数据类型<br> V exchange(V object):等待线程到达，交换数据<br> 如：</v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Exchanger&lt;String&gt; ex = <span class="keyword">new</span> Exchanger&lt;String&gt;();</div><div class="line">        <span class="keyword">new</span> A(ex).start();</div><div class="line">        <span class="keyword">new</span> B(ex).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; ex;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(Exchanger&lt;String&gt; ex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ex = ex;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            str = ex.exchange(<span class="string">"Hello?"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"A"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"B"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; ex;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(Exchanger&lt;String&gt; ex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ex = ex;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        String str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            str = ex.exchange(<span class="string">"Hi!"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"1"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">            str = ex.exchange(<span class="string">"2"</span>);</div><div class="line">            System.out.println(str);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Phaser同步器：</strong> 工作方式与CyclicBarrier类似，但是可以定义多个阶段<br> Phaser()/Phaser(int num):使用指定0/num个party创建phaser<br> register():注册party<br> arriveAndAwaitAdvance():到达时等待到所有party到达<br> arriveAndDeregister():到达时注销线程自己</p>
<p> 如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhaserDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Phaser phaser = <span class="keyword">new</span> Phaser(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">" starting ...."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Fuwuyuan"</span>).start();</div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Chushi"</span>).start();</div><div class="line">        <span class="keyword">new</span> Worker(phaser, <span class="string">"Shangcaiyuan"</span>).start();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">            System.out.println(<span class="string">"Order "</span> + i + <span class="string">" finished!"</span>);</div><div class="line">        &#125;</div><div class="line">        phaser.arriveAndDeregister();</div><div class="line">        System.out.println(<span class="string">"All done!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Phaser phaser;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span> <span class="params">(Phaser phaser, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setName(name);</div><div class="line">        <span class="keyword">this</span>.phaser = phaser;</div><div class="line">        phaser.register();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"current order is: "</span> + i + <span class="string">" : "</span> + getName());</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</div><div class="line">                phaser.arriveAndDeregister();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                phaser.arriveAndAwaitAdvance();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker1.12.3 docker-swarm创建与管理集群（一）]]></title>
      <url>http://www.troylc.cc/docker/2017/02/07/Docker07docker-swarm01.html</url>
      <content type="html"><![CDATA[<p>Docker Engine 1.12或更高版本中内置了集群管理和编排功能。Swarm模式侧重于微服务架构。它支持服务协调，负载平衡，服务发现，内置证书循环等。Swarm模式是Docker以简化的服务编排工具。  </p>
<h1 id="功能特点："><a href="#功能特点：" class="headerlink" title="功能特点："></a>功能特点：</h1><h2 id="a-与Docker-Engine集成的集群管理："><a href="#a-与Docker-Engine集成的集群管理：" class="headerlink" title="a.与Docker Engine集成的集群管理："></a>a.与Docker Engine集成的集群管理：</h2><p>使用Docker Engine CLI创建一组Docker引擎，您可以在其中部署应用程序服务。您不需要其他编排软件来创建或管理群集。</p>
<h2 id="b-节点分散式设计："><a href="#b-节点分散式设计：" class="headerlink" title="b.节点分散式设计："></a>b.节点分散式设计：</h2><p>Docker Engine不是在部署时处理节点角色之间的差异，而是在运行时处理角色变化。您可以使用Docker Engine部署两种类型的节点，管理节点和工作节点。这意味着您可以从单个服务器构建整个群集。</p>
<h2 id="c-声明性服务模型："><a href="#c-声明性服务模型：" class="headerlink" title="c.声明性服务模型："></a>c.声明性服务模型：</h2><p>Docker Engine使用声明性方法来定义应用程序堆栈中各种服务的所需状态。例如，您可以描述由具有消息队列服务和数据库后端的Web前端服务组成的应用程序。</p>
<h2 id="d-可扩容与缩放容器："><a href="#d-可扩容与缩放容器：" class="headerlink" title="d.可扩容与缩放容器："></a>d.可扩容与缩放容器：</h2><p>对于每个服务，您可以声明要运行的任务数。当您向上或向下缩放时，swarm管理器通过添加或删除任务来自动适应，以保持所需的任务数量来保证集群的可靠状态。</p>
<h2 id="e-容器容错状态协调："><a href="#e-容器容错状态协调：" class="headerlink" title="e.容器容错状态协调："></a>e.容器容错状态协调：</h2><p>群集管理器节点不断监视群集状态，并协调您表示的期望状态的实际状态之间的任何差异。例如，如果设置一个服务以运行容器的10个副本，并且托管其中两个副本的工作程序计算机崩溃，则管理器将创建两个新副本以替换崩溃的副本。 swarm管理器将新副本分配给正在运行和可用的worker节点上。</p>
<h2 id="f-多主机网络："><a href="#f-多主机网络：" class="headerlink" title="f.多主机网络："></a>f.多主机网络：</h2><p>您可以为服务指定覆盖网络。当swarm管理器初始化或更新应用程序时，它会自动为覆盖网络上的容器分配地址。</p>
<h2 id="g-服务发现："><a href="#g-服务发现：" class="headerlink" title="g.服务发现："></a>g.服务发现：</h2><p>Swarm管理器节点为swarm中的每个服务分配唯一的DNS名称，并负载平衡运行的容器。您可以通过嵌入在swarm中的DNS服务器查询在群中运行的每个容器。</p>
<h2 id="h-负载平衡："><a href="#h-负载平衡：" class="headerlink" title="h.负载平衡："></a>h.负载平衡：</h2><p>您可以将服务的端口公开给外部负载平衡器。在内部，swarm允许您指定如何在节点之间分发服务容器。</p>
<h2 id="m-缺省安全："><a href="#m-缺省安全：" class="headerlink" title="m.缺省安全："></a>m.缺省安全：</h2><p>群中的每个节点强制执行TLS相互验证和加密，以保护其自身与所有其他节点之间的通信。您可以选择使用自签名根证书或来自自定义根CA的证书。</p>
<h2 id="n-滚动更新："><a href="#n-滚动更新：" class="headerlink" title="n.滚动更新："></a>n.滚动更新：</h2><p>在已经运行期间，您可以增量地应用服务更新到节点。 swarm管理器允许您控制将服务部署到不同节点集之间的延迟。如果出现任何问题，您可以将任务回滚到服务的先前版本。</p>
<h1 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h1><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>172.19.6.222</td>
<td>cloud01</td>
<td>manager</td>
</tr>
<tr>
<td>172.19.6.223</td>
<td>cloud02</td>
<td>worker</td>
</tr>
<tr>
<td>172.19.6.224</td>
<td>cloud03</td>
<td>worker</td>
</tr>
</tbody>
</table>
<h1 id="创建swarm集群"><a href="#创建swarm集群" class="headerlink" title="创建swarm集群"></a>创建swarm集群</h1><h2 id="创建集群的前提工作："><a href="#创建集群的前提工作：" class="headerlink" title="创建集群的前提工作："></a>创建集群的前提工作：</h2><h3 id="开放swarm需求的端口："><a href="#开放swarm需求的端口：" class="headerlink" title="开放swarm需求的端口："></a>开放swarm需求的端口：</h3><p>在创建集群前，如果开启了防火墙，请确认三台主机的防火墙能让swarm需求的端口开放，需要打开主机之间的端口，以下端口必须可用。在某些系统上，这些端口默认为打开。<br><strong>2377</strong>：TCP端口2377用于集群管理通信<br><strong>7946</strong>：TCP和UDP端口7946用于节点之间的通信<br><strong>4789</strong>：TCP和UDP端口4789用于覆盖网络流量<br>如果您计划使用加密（–opt加密）创建覆盖网络，则还需要确保协议50（ESP）已打开。</p>
<p>可以直接禁用系统防火墙来让这些端口通信不受限制，一般测试环境我们都会禁用防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># systemctl stop firewalld（立即生效）  </span></div><div class="line">[root@localhost ~]<span class="comment"># systemctl disable firewalld（重启生效）</span></div></pre></td></tr></table></figure></p>
<h3 id="在三台主机节点上安装好docker1-12或者更高的版本："><a href="#在三台主机节点上安装好docker1-12或者更高的版本：" class="headerlink" title="在三台主机节点上安装好docker1.12或者更高的版本："></a>在三台主机节点上安装好docker1.12或者更高的版本：</h3><p>执行docker安装: curl -fsSL <a href="https://get.docker.com/" target="_blank" rel="external">https://get.docker.com/</a> | sh 查看docker最新版本的<a href="https://github.com/docker/docker/releases" target="_blank" rel="external">安装方法</a></p>
<h2 id="初始化swarm集群"><a href="#初始化swarm集群" class="headerlink" title="初始化swarm集群"></a>初始化swarm集群</h2><h3 id="manager节点操作"><a href="#manager节点操作" class="headerlink" title="manager节点操作"></a>manager节点操作</h3><p>执行docker swarm init –adverties0addr [manager节点的IP]   </p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker swarm init --advertise-addr 172.19.6.222</span></div><div class="line">Swarm initialized: current node (ap235xkm64tj0al4gdzqbpwmi) is now a manager.</div><div class="line"></div><div class="line">To <span class="keyword">add</span><span class="bash"> a worker to this swarm, run the following <span class="built_in">command</span>:</span></div><div class="line"></div><div class="line">    docker swarm join \</div><div class="line">    --token SWMTKN-<span class="number">1</span>-<span class="number">2</span>qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-b6789pdldcal2j5c4bs4uyl06 \</div><div class="line">    <span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line"></div><div class="line">To <span class="keyword">add</span><span class="bash"> a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span></div></pre></td></tr></table></figure>
<p>执行以上命令后，操作界面有对应的提示：<br>如果想要把worker节点加入到集群中执行：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker swarm join \</div><div class="line">    --token SWMTKN-1-2qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-b6789pdldcal2j5c4bs4uyl06 \</div><div class="line">    172.19.6.222:2377</div></pre></td></tr></table></figure>
<h3 id="worker节点-cloud02、cloud03上执行加入到集群："><a href="#worker节点-cloud02、cloud03上执行加入到集群：" class="headerlink" title="worker节点 cloud02、cloud03上执行加入到集群："></a>worker节点 cloud02、cloud03上执行加入到集群：</h3><p><strong>cloud02:</strong><br><figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]<span class="comment"># docker swarm join \</span></div><div class="line">&gt;     --token SWMTKN-<span class="number">1</span>-<span class="number">2</span>qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-b6789pdldcal2j5c4bs4uyl06 \</div><div class="line">&gt;     <span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure></p>
<p><strong>cloud03:</strong> </p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud03 ~]<span class="comment"># docker swarm join \</span></div><div class="line">&gt;     --token SWMTKN-<span class="number">1</span>-<span class="number">2</span>qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-b6789pdldcal2j5c4bs4uyl06 \</div><div class="line">&gt;     <span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line">This node joined a swarm as a worker.</div></pre></td></tr></table></figure>
<p>如果后续我们有新的主机被当做manager、worker节点想要加入到集群中来，但要不记得当时创建集群时的token，执行以下命令：</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker swarm join-token manager</span></div><div class="line">To <span class="keyword">add</span><span class="bash"> a manager to this swarm, run the following <span class="built_in">command</span>:</span></div><div class="line"></div><div class="line">    docker swarm join \</div><div class="line">    --token SWMTKN-<span class="number">1</span>-<span class="number">2</span>qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-bpldk53d5yaxqa4gx0rbjjg86 \</div><div class="line">    <span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line">    </div><div class="line">[root@cloud01 ~]<span class="comment"># docker swarm join-token worker</span></div><div class="line">To <span class="keyword">add</span><span class="bash"> a worker to this swarm, run the following <span class="built_in">command</span>:</span></div><div class="line"></div><div class="line">    docker swarm join \</div><div class="line">    --token SWMTKN-<span class="number">1</span>-<span class="number">2</span>qlhzljar0kw10ke623lvfy9mi9w3fgqgg8z9croosj9d7nl4n-b6789pdldcal2j5c4bs4uyl06 \</div><div class="line">    <span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div></pre></td></tr></table></figure>
<p>在另一个想要加入集群的manager、worker节点中执行,以上命令执行的结果；  </p>
<p>在manager节点上执行查看节点命令：<br>执行命令docker node ls，查看节点信息。</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>参考：<br><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/" target="_blank" rel="external">https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/</a><br><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/add-nodes/" target="_blank" rel="external">https://docs.docker.com/engine/swarm/swarm-tutorial/add-nodes/</a></p>
<h1 id="集群的基本管理"><a href="#集群的基本管理" class="headerlink" title="集群的基本管理"></a>集群的基本管理</h1><h2 id="列表节点列表"><a href="#列表节点列表" class="headerlink" title="列表节点列表"></a>列表节点列表</h2><p>执行命令docker node ls，查看节点信息。</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>说明：<br><strong>AVAILABILITY列</strong>：<br>显示调度程序是否可以将任务分配给节点：  </p>
<ul>
<li>Active 意味着调度程序可以将任务分配给节点。  </li>
<li>Pause 意味着调度程序不会将新任务分配给节点，但现有任务仍在运行。  </li>
<li>Drain 意味着调度程序不会向节点分配新任务。调度程序关闭所有现有任务并在可用节点上调度它们。  </li>
</ul>
<p><strong>MANAGER STATUS列</strong><br>显示节点是属于manager或者worker </p>
<ul>
<li><strong>没有值</strong> 表示不参与群管理的工作节点。</li>
<li><strong>Leader</strong> 意味着该节点是使得群的所有群管理和编排决策的主要管理器节点。</li>
<li><strong>Reachable</strong> 意味着节点是管理者节点正在参与Raft共识。如果领导节点不可用，则该节点有资格被选为新领导者。</li>
<li><strong>Unavailable</strong> 意味着节点是不能与其他管理器通信的管理器。如果管理器节点不可用，您应该将新的管理器节点加入群集，或者将工作器节点升级为管理器。</li>
</ul>
<h2 id="查看节点的详细信息"><a href="#查看节点的详细信息" class="headerlink" title="查看节点的详细信息"></a>查看节点的详细信息</h2><p>您可以在管理器节点上运行docker node inspect<node-id>来查看单个节点的详细信息。 输出默认为JSON格式，但您可以传递–pretty标志以以可读的yml格式打印结果。 例如：</node-id></p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node inspect self --pretty</span></div><div class="line">ID:			ap235xkm64tj0al4gdzqbpwmi</div><div class="line">Hostname:		cloud01</div><div class="line">Joined at:		<span class="number">2016</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">34</span>:<span class="number">11.095107616</span> +<span class="number">0000</span> utc</div><div class="line">Status:</div><div class="line"> State:			Ready</div><div class="line"> Availability:		Active</div><div class="line">Manager Status:</div><div class="line"> Address:		<span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line"> Raft Status:		Reachable</div><div class="line"> Leader:		Yes</div><div class="line">Platform:</div><div class="line"> Operating System:	linux</div><div class="line"> Architecture:		x86_64</div><div class="line">Resources:</div><div class="line"> CPUs:			<span class="number">4</span></div><div class="line"> Memory:		<span class="number">7.912</span> GiB</div><div class="line">Plugins:</div><div class="line">  Network:		bridge, host, null, overlay</div><div class="line">  <span class="keyword">Volume</span><span class="bash">:		<span class="built_in">local</span></span></div><div class="line">Engine Version:		<span class="number">1.12</span>.<span class="number">3</span></div><div class="line"></div><div class="line">[root@cloud01 ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>self为当前manager节点</p>
<h2 id="更新节点的可见性状态"><a href="#更新节点的可见性状态" class="headerlink" title="更新节点的可见性状态"></a>更新节点的可见性状态</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker node update --availability Drain cloud02 （修改cloud02为不可用状态）</span></div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Drain         </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">[root@cloud01 ~]<span class="comment"># docker node update --availability Active cloud02 （修改cloud02为可用状态）</span></div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>如果想把manager节点，只做为调试的节点，不参于容器的运行，可以按照上面的方式 把manager节点设置为Drain.这样所有的容器运行进，都不会在manager节点上创建或者运行容器，可以提高manager的高可用性。</p>
<h2 id="添加或删除标签元数据"><a href="#添加或删除标签元数据" class="headerlink" title="添加或删除标签元数据"></a>添加或删除标签元数据</h2><p>节点标签提供了一种灵活的节点组织方法。 您还可以在服务约束中使用节点标签。 在创建服务时应用约束，以限制调度程序为服务分配任务的节点。</p>
<p>在管理器节点上运行docker node update –label-add以将标签元数据添加到节点。 –label-add标志支持<key>或<key> = <value>对。<br>对要添加的每个节点标签传递一次–label-add标志：</value></key></key></p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node update --label-add manager --label-add manager=baz cloud01</span></div><div class="line">cloud01</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node inspect self --pretty</span></div><div class="line">ID:			ap235xkm64tj0al4gdzqbpwmi</div><div class="line">Labels:</div><div class="line"> - manager = baz</div><div class="line">Hostname:		cloud01</div><div class="line">Joined at:		<span class="number">2016</span>-<span class="number">11</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">34</span>:<span class="number">11.095107616</span> +<span class="number">0000</span> utc</div><div class="line">Status:</div><div class="line"> State:			Ready</div><div class="line"> Availability:		Active</div><div class="line">Manager Status:</div><div class="line"> Address:		<span class="number">172.19</span>.<span class="number">6.222</span>:<span class="number">2377</span></div><div class="line"> Raft Status:		Reachable</div><div class="line"> Leader:		Yes</div><div class="line">Platform:</div><div class="line"> Operating System:	linux</div><div class="line"> Architecture:		x86_64</div><div class="line">Resources:</div><div class="line"> CPUs:			<span class="number">4</span></div><div class="line"> Memory:		<span class="number">7.912</span> GiB</div><div class="line">Plugins:</div><div class="line">  Network:		bridge, host, null, overlay</div><div class="line">  <span class="keyword">Volume</span><span class="bash">:		<span class="built_in">local</span></span></div><div class="line">Engine Version:		<span class="number">1.12</span>.<span class="number">3</span></div></pre></td></tr></table></figure>
<p>使用docker节点更新为节点设置的标签仅适用于群集内的节点实体。不要将它们与dockerd的docker守护程序标签混淆。</p>
<h2 id="升级或降级节点"><a href="#升级或降级节点" class="headerlink" title="升级或降级节点"></a>升级或降级节点</h2><p>您可以将工作程序节点提升为manager角色。这在管理器节点不可用或者您希望使管理器脱机以进行维护时很有用。 类似地，您可以将管理器节点降级为worker角色。<br>无论您升级或降级节点，您应该始终在群中维护奇数个管理器节点。<br>要升级一个节点或一组节点，请从管理器节点运行docker node promote：  </p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node promote cloud02 cloud03</span></div><div class="line">Node cloud02 promoted to a manager in the swarm.</div><div class="line">Node cloud03 promoted to a manager in the swarm.</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        Reachable</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        Reachable</div></pre></td></tr></table></figure>
<p>要降级一个节点或一组节点，请从管理器节点运行docker node demote：</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]<span class="comment"># docker node demote cloud02 cloud03</span></div><div class="line">Manager cloud02 demoted in the swarm.</div><div class="line">Manager cloud03 demoted in the swarm.</div><div class="line">[root@cloud01 ~]<span class="comment"># docker node ls</span></div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line"><span class="number">4</span>sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<h2 id="退出docker-swarm集群"><a href="#退出docker-swarm集群" class="headerlink" title="退出docker swarm集群"></a>退出docker swarm集群</h2><p>首页查看各节点的状态，在manager节点上  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker node ls</div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">4sy84tap36r6vglmt4y0f3kyb    cloud02  Ready   Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>在worker节点上运行如下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud02 ~]# docker swarm leave</div><div class="line">Node left the swarm.</div><div class="line">[root@cloud02 ~]#</div></pre></td></tr></table></figure>
<p>然后在manager节点上查看状态：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# docker node ls</div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">4sy84tap36r6vglmt4y0f3kyb    cloud02  Down    Active        </div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>如果想把manager节点上已经退出集群的节点信息删除，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active        </div><div class="line">[root@cloud01 ~]# docker node rm cloud02</div><div class="line">cloud02</div><div class="line">[root@cloud01 ~]# docker node ls</div><div class="line">ID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS</div><div class="line">ap235xkm64tj0al4gdzqbpwmi *  cloud01  Ready   Active        Leader</div><div class="line">don6u2knphk92ugdvfgdymu2t    cloud03  Ready   Active</div></pre></td></tr></table></figure>
<p>参考：<br><a href="https://docs.docker.com/engine/swarm/manage-nodes/" target="_blank" rel="external">https://docs.docker.com/engine/swarm/manage-nodes/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins-registry持续集成-jenkins管理与registry集成打包上传镜像(二)]]></title>
      <url>http://www.troylc.cc/docker/2017/02/01/Docker06registry-jenkins.html</url>
      <content type="html"><![CDATA[<p>通过上一篇 <a href="http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html">jenkins-registry持续集成-jenkins-registry安装与数据迁移(一)</a>，已经把jenkins和registry的环境准备好了。接下来可以通过jenkins来操作怎么做到从版本库中的代码下载-&gt;编译-&gt;打包docker镜像-&gt;上传到docker-registry私有仓库，然后就可以在其它有docker的环境中直接pull打包好的docker镜像。</p>
<h3 id="初始化jenkins及安装插件"><a href="#初始化jenkins及安装插件" class="headerlink" title="初始化jenkins及安装插件"></a>初始化jenkins及安装插件</h3><p>启动完jenkins后通过浏览器输入地址<a href="http://部署jenkins主机IP:端口" target="_blank" rel="external">http://部署jenkins主机IP:端口</a><br><img src="/images/docker/jenkins/jenkins2-1.png" alt="jenkins初始化界面2-1"><br>根据提示从输入administrator password 或者可以通过启动日志查看这个password 如：<br><img src="/images/docker/jenkins/jenkins2-2.png" alt="jenkins初始化界面2-2"><br>选择安装插件方式，这里我是默认第一个<br><img src="/images/docker/jenkins/jenkins2-3.png" alt="jenkins初始化界面2-3"><br>进入插件安装界面，连网等待插件安装<br><img src="/images/docker/jenkins/jenkins2-4.png" alt="jenkins初始化界面2-4"><br>安装完插件后，进入创建管理员界面<br><img src="/images/docker/jenkins/jenkins2-5.png" alt="jenkins初始化界面2-5"><br>输入完管理员账号后，点击continue as admin 进入管理界面点击系统管理-插件管理中安装docker构建插件和角色管理插件<br><img src="/images/docker/jenkins/jenkins2-6.png" alt="jenkins初始化界面2-6"><br>安装docker构建插件，在可选插件中查找docker build step plugin<br><img src="/images/docker/jenkins/jenkins2-7.png" alt="jenkins初始化界面2-7"><br>安装角色管理插件，在可选插件中查找Role-based Authorization Strategy<br><img src="/images/docker/jenkins/jenkins2-8.png" alt="jenkins初始化界面2-8"> </p>
<p>如果在初始化过程中，有些jenkins推荐的插件安装失败，也可以在可选插件中查找再次安装，选择好要安装的插件后，可以选择直接安装和下载后重启安装，我这里下载后重启安装，重启安装完后，之前出现的安装失败的提示就没有了。</p>
<h3 id="配置jenkins相关权限及属性"><a href="#配置jenkins相关权限及属性" class="headerlink" title="配置jenkins相关权限及属性"></a>配置jenkins相关权限及属性</h3><h4 id="配置maven安装路径和docker-remote-API接口地址"><a href="#配置maven安装路径和docker-remote-API接口地址" class="headerlink" title="配置maven安装路径和docker remote API接口地址"></a>配置maven安装路径和docker remote API接口地址</h4><p>点击系统管理-&gt;Global Tool Configuration-&gt;找到maven点击新增按钮<br><img src="/images/docker/jenkins/jenkins2-9.png" alt="配置jenkins相关权限及属性2-9"><br>点击系统管理-&gt;系统配置-&gt;找到docker builder-&gt;在Docker URL栏中输入docker远程访问的地址，如：<br><img src="/images/docker/jenkins/jenkins2-10.png" alt="配置jenkins相关权限及属性2-10"><br>设置docker主机可以被远程访问，<a href="http://www.troylc.cc/docker/2016/07/31/docker-02.html">请参考：docker系列(二)使用Docker-Remote-API</a></p>
<h4 id="配置用户角色及权限"><a href="#配置用户角色及权限" class="headerlink" title="配置用户角色及权限"></a>配置用户角色及权限</h4><ol>
<li><p>选择系统管理-&gt;Configuration Global Security-&gt;进入选择启用安全：<br>TCP port for JNLP agents -&gt;禁用，访问控制-安全域-&gt;jenkins专有用户数据库，访问控制-授权策略-&gt;Role-Based Strategy 如：<br><img src="/images/docker/jenkins/jenkins2-11.png" alt="配置jenkins相关权限及属性2-11">   </p>
</li>
<li><p>选择系统管理-&gt;Manage and Assign Roles-&gt;Manage Roles：  </p>
</li>
</ol>
<ul>
<li>添加Global Roles(admin、member、ops、others)，<br>设置全局角色（全局角色可以对jenkins系统进行设置与项目的操作）<br>admin:对整个jenkins都可以进行操作<br>ops:可以对所有的job进行管理<br>other/member:只有读的权限   </li>
<li>添加project Roles(dmp-manager、dmp-view、tsc-manager、tsc-view)并且给添加的角色分配如下权限<br><img src="/images/docker/jenkins/jenkins2-12.png" alt="配置jenkins相关权限及属性2-12"><br><strong>- 注意</strong>：在添加project Roles时，如果想让不同的用户看到不同的job,必须设置Pattern,如上dmp_manager角色就只能查看以dmp开头的job,Pattern规则必须是“dmp.<em>”，注意是以“.</em>”结尾的匹配规则，tsc亦是如此。</li>
</ul>
<ol>
<li><p>选择系统管理-&gt;管理用户:新建几个管理员用户如：dmpadmin、tscadmin<br><img src="/images/docker/jenkins/jenkins2-13.png" alt="配置jenkins相关权限及属性2-13"> </p>
</li>
<li><p>选择系统管理-&gt;Manage and Assign Roles-&gt;Assign Relos:把第三步的用户加到user/group中并授于对应的角色权限 如：<br><img src="/images/docker/jenkins/jenkins2-14.png" alt="配置jenkins相关权限及属性2-14"> </p>
</li>
</ol>
<h3 id="创建-编译-打包-上传docker镜像任务"><a href="#创建-编译-打包-上传docker镜像任务" class="headerlink" title="创建-编译-打包-上传docker镜像任务"></a>创建-编译-打包-上传docker镜像任务</h3><p>进入主界面-&gt;新建-&gt;输入job名称-&gt;选择构建一个maven项目-&gt;点击OK-&gt;进入项目配置如下图：<br><img src="/images/docker/jenkins/jenkins2-15.png" alt="jenkins创建-编译-打包-上传2-15"><br>点击保存-&gt;选择立即构建-&gt;jenkins进入构建流量-&gt;build histroy中的时间，可以查看构建过程及错误信息，如果构建一次不成功可以通过日志查看错误原因，来调整job的配置内容。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jianshu.com/p/7e148bcfb96e" target="_blank" rel="external">Jenkins使用教程之用户权限管理（包含插件的安装）</a><br><a href="http://shaofan.org/docker-jenkins/" target="_blank" rel="external">Docker学习笔记：Java、Maven、Jenkins Docker插件持续集成简单部署</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CENTOS7上配置Docker存储驱动devicemapper]]></title>
      <url>http://www.troylc.cc/docker/2017/01/15/Docker06devicemapper.html</url>
      <content type="html"><![CDATA[<p>devicemapper驱动将每一个Docker镜像和容器存储在它自身的具有精简置备(thin-provisioned)、写时拷贝(copy-on-write)和快照功能(snapshotting)的虚拟设备上。由于Device Mapper技术是在块(block)层面而非文件层面，所以Docker Engine的devicemapper存储驱动使用的是块设备来存储数据而非文件系统。  </p>
<h1 id="devicemapper的模式"><a href="#devicemapper的模式" class="headerlink" title="devicemapper的模式"></a>devicemapper的模式</h1><p>devicemapper是RHEL下Docker Engine的默认存储驱动，它有两种配置模式:loop-lvm和direct-lvm。</p>
<h2 id="loop-lvm是默认的模式"><a href="#loop-lvm是默认的模式" class="headerlink" title="loop-lvm是默认的模式"></a>loop-lvm是默认的模式</h2><p>它使用OS层面离散的文件来构建精简池(thin pool)。该模式主要是设计出来让Docker能够简单的被”开箱即用(out-of-the-box)”而无需额外的配置。但如果是在生产环境的部署Docker，官方明文不推荐使用该模式。我们使用docker info命令可以看到以下警告:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@tsccloud01 ~]<span class="comment"># docker info</span></div><div class="line">Containers: 22</div><div class="line"> Running: 5</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 17</div><div class="line">Images: 6</div><div class="line">Server Version: 1.12.3</div><div class="line">Storage Driver: devicemapper</div><div class="line"> Pool Name: docker-253:0-202359283-pool</div><div class="line"> Pool Blocksize: 65.54 kB</div><div class="line"> Base Device Size: 10.74 GB</div><div class="line"> Backing Filesystem: xfs</div><div class="line"> Data file: /dev/loop0</div><div class="line"> Metadata file: /dev/loop1</div><div class="line"> Data Space Used: 1.528 GB</div><div class="line"> Data Space Total: 107.4 GB</div><div class="line"> Data Space Available: 50.38 GB</div><div class="line"> Metadata Space Used: 4.149 MB</div><div class="line"> Metadata Space Total: 2.147 GB</div><div class="line"> Metadata Space Available: 2.143 GB</div><div class="line"> Thin Pool Minimum Free Space: 10.74 GB</div><div class="line"> Udev Sync Supported: <span class="literal">true</span></div><div class="line"> Deferred Removal Enabled: <span class="literal">false</span></div><div class="line"> Deferred Deletion Enabled: <span class="literal">false</span></div><div class="line"> Deferred Deleted Device Count: 0</div><div class="line"> Data loop file: /var/lib/docker/devicemapper/devicemapper/data</div><div class="line"> WARNING: Usage of loopback devices is strongly discouraged <span class="keyword">for</span> production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.</div><div class="line"> Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata</div><div class="line"> Library Version: 1.02.107-RHEL7 (2016-06-09)</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div></pre></td></tr></table></figure>
<h2 id="配置direct-lvm模式"><a href="#配置direct-lvm模式" class="headerlink" title="配置direct-lvm模式"></a>配置direct-lvm模式</h2><p>direct-lvm是Docker推荐的生产环境的推荐模式，他使用块设备来构建精简池来存放镜像和容器的数据。</p>
<p>在操作之前，如果是之间已经运行了docker，请先备份相关的docker容器与镜像，官方建议是如果 是生产环境，在安装完docker后就直接配置direct-lvm模式，本文使用规划分配的一个逻辑卷sda5来配置，推荐使用外部共享存储的设备但不局限于此种方式，可根据自己的环境决定。</p>
<p>查看宿主机上的物理盘的分区情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># lsblk</span></div><div class="line">NAME                           MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</div><div class="line">sda                              8:0    0   2.7T  0 disk </div><div class="line">├─sda1                           8:1    0     1M  0 part </div><div class="line">├─sda2                           8:2    0     3G  0 part /boot</div><div class="line">├─sda3                           8:3    0   948G  0 part </div><div class="line">│ ├─centos-root                253:0    0   300G  0 lvm  /</div><div class="line">│ ├─centos-swap                253:1    0    48G  0 lvm  [SWAP]</div><div class="line">│ └─centos-home                253:2    0   600G  0 lvm  /home</div><div class="line">├─sda4                           8:4    0 838.1G  0 part /nfs-data</div><div class="line">└─sda5                           8:5    0  1004G  0 part </div><div class="line">sr0                             11:0    1  1024M  0 rom  </div><div class="line">loop0                            7:0    0   100G  0 loop </div><div class="line">└─docker-253:0-1074356357-pool 253:3    0   100G  0 dm   </div><div class="line">loop1                            7:1    0     2G  0 loop </div><div class="line">└─docker-253:0-1074356357-pool 253:3    0   100G  0 dm</div></pre></td></tr></table></figure></p>
<h3 id="创建物理卷-dev-sda5"><a href="#创建物理卷-dev-sda5" class="headerlink" title="创建物理卷/dev/sda5"></a>创建物理卷/dev/sda5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># pvcreate /dev/sda5</span></div><div class="line">WARNING: ext4 signature detected on /dev/sda5 at offset 1080. Wipe it? [y/n]: y</div><div class="line">  Wiping ext4 signature on /dev/sda5.</div><div class="line">  Physical volume <span class="string">"/dev/sda5"</span> successfully created</div></pre></td></tr></table></figure>
<h3 id="创建docker-LVM卷组"><a href="#创建docker-LVM卷组" class="headerlink" title="创建docker LVM卷组"></a>创建docker LVM卷组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vgcreate docker /dev/sda5</span></div><div class="line">  Volume group <span class="string">"docker"</span> successfully created</div></pre></td></tr></table></figure>
<h3 id="创建thinpool"><a href="#创建thinpool" class="headerlink" title="创建thinpool"></a>创建thinpool</h3><p>数据LV大小为VG的95%,元数据LV大小为VG的1%,剩余的空间用来自动扩展</p>
<ul>
<li>创建pool</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># lvcreate --wipesignatures y -n thinpool docker -l 95%VG</span></div><div class="line">  Logical volume <span class="string">"thinpool"</span> created.</div><div class="line">[root@localhost ~]<span class="comment"># lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG</span></div><div class="line">  Logical volume <span class="string">"thinpoolmeta"</span> created.</div></pre></td></tr></table></figure>
<ul>
<li>将pool转换为thinpool</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># lvconvert -y --zero n -c 512K --thinpool docker/thinpool --poolmetadata docker/thinpoolmeta</span></div><div class="line">  WARNING: Converting logical volume docker/thinpool and docker/thinpoolmeta to pool<span class="string">'s data and metadata volumes.</span></div><div class="line">  THIS WILL DESTROY CONTENT OF LOGICAL VOLUME (filesystem etc.)</div><div class="line">  Converted docker/thinpool to thin pool.</div></pre></td></tr></table></figure>
<h3 id="配置thinpool"><a href="#配置thinpool" class="headerlink" title="配置thinpool"></a>配置thinpool</h3><ul>
<li>配置池的自动扩展</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/lvm/profile/docker-thinpool.profile</span></div><div class="line">activation &#123;</div><div class="line">    thin_pool_autoextend_threshold=80</div><div class="line">    thin_pool_autoextend_percent=20</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>应用配置变更</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># lvchange --metadataprofile docker-thinpool docker/thinpool</span></div><div class="line">  Logical volume <span class="string">"thinpool"</span> changed.</div></pre></td></tr></table></figure>
<ul>
<li>状态监控检查</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># lvs -o+seg_monitor</span></div><div class="line">  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert Monitor  </div><div class="line">  home     centos -wi-ao---- 600.00g                                                              </div><div class="line">  root     centos -wi-ao---- 300.00g                                                              </div><div class="line">  swap     centos -wi-ao----  48.00g                                                              </div><div class="line">  thinpool docker twi<span class="_">-a</span>-t--- 953.73g             0.00   0.01                             monitored</div></pre></td></tr></table></figure>
<h3 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h3><ul>
<li>清除graphdriver</li>
</ul>
<p>之前已提醒数据备份，因为在这里清除graphdriver会将image,container和volume所有数据都删除。如果不删除，则会遇到以下的错误导致docker服务起不来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># mkdir /var/lib/docker.bk</span></div><div class="line">[root@localhost ~]<span class="comment"># mv /var/lib/docker/* /var/lib/docker.bk</span></div><div class="line">mv: 无法将<span class="string">"/var/lib/docker/devicemapper"</span> 移动至<span class="string">"/var/lib/docker.bk/devicemapper"</span>: 设备或资源忙</div><div class="line">[root@localhost ~]<span class="comment"># systemctl stop docker</span></div><div class="line">[root@localhost ~]<span class="comment"># mv /var/lib/docker/* /var/lib/docker.bk</span></div><div class="line">[root@localhost ~]<span class="comment"># rm -rf /var/lib/docker/*</span></div></pre></td></tr></table></figure>
<ul>
<li>修改服务配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># systemctl status docker</span></div><div class="line">● docker.service - Docker Application Container Engine</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</div><div class="line">   Active: inactive (dead) since 一 2017-01-09 21:50:21 CST; 32s ago</div><div class="line">     Docs: https://docs.docker.com</div><div class="line">  Process: 9401 ExecStart=/usr/bin/dockerd (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 9401 (code=exited, status=0/SUCCESS)</div><div class="line"></div><div class="line">1月 09 21:47:59 localhost dockerd[9401]: time=<span class="string">"2017-01-09T21:47:59.307356931+08:00"</span> level=info msg=<span class="string">"Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used t...rred IP address"</span></div><div class="line">1月 09 21:47:59 localhost dockerd[9401]: time=<span class="string">"2017-01-09T21:47:59.387442387+08:00"</span> level=info msg=<span class="string">"Loading containers: done."</span></div><div class="line">1月 09 21:47:59 localhost dockerd[9401]: time=<span class="string">"2017-01-09T21:47:59.387855556+08:00"</span> level=info msg=<span class="string">"Daemon has completed initialization"</span></div><div class="line">1月 09 21:47:59 localhost dockerd[9401]: time=<span class="string">"2017-01-09T21:47:59.387889962+08:00"</span> level=info msg=<span class="string">"Docker daemon"</span> commit=7392c3b graphdriver=devicemapper version=1.12.5</div><div class="line">1月 09 21:47:59 bogon dockerd[9401]: time=<span class="string">"2017-01-09T21:47:59.398837780+08:00"</span> level=info msg=<span class="string">"API listen on /var/run/docker.sock"</span></div><div class="line">1月 09 21:47:59 bogon systemd[1]: Started Docker Application Container Engine.</div><div class="line">1月 09 21:50:20 bogon systemd[1]: Stopping Docker Application Container Engine...</div><div class="line">1月 09 21:50:20 bogon dockerd[9401]: time=<span class="string">"2017-01-09T21:50:20.470035651+08:00"</span> level=info msg=<span class="string">"Processing signal 'terminated'"</span></div><div class="line">1月 09 21:50:20 bogon dockerd[9401]: time=<span class="string">"2017-01-09T21:50:20.50479833+08:00"</span> level=info msg=<span class="string">"stopping containerd after receiving terminated"</span></div><div class="line">1月 09 21:50:21 bogon systemd[1]: Stopped Docker Application Container Engine.</div><div class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</div><div class="line">[root@localhost ~]<span class="comment"># vim /usr/lib/systemd/system/docker.service</span></div><div class="line"></div><div class="line">[Unit]</div><div class="line">Description=Docker Application Container Engine</div><div class="line">Documentation=https://docs.docker.com</div><div class="line">After=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></div><div class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></div><div class="line"><span class="comment"># for containers run by docker</span></div><div class="line">ExecStart=/usr/bin/dockerd --insecure-registry=tcr:5000 --storage-driver=devicemapper --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool --storage-opt=dm.use_deferred_removal=<span class="literal">true</span> --storage-opt=d</div><div class="line">m.use_deferred_deletion=trueExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></div><div class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></div><div class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></div><div class="line">LimitNOFILE=infinity</div><div class="line">LimitNPROC=infinity</div><div class="line">LimitCORE=infinity</div><div class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></div><div class="line"><span class="comment"># Only systemd 226 and above support this version.</span></div><div class="line"><span class="comment">#TasksMax=infinity</span></div><div class="line">TimeoutStartSec=0</div><div class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></div><div class="line">Delegate=yes</div><div class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></div><div class="line">KillMode=process</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<ul>
<li>重启docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># systemctl daemon-reload</span></div><div class="line">[root@localhost ~]<span class="comment"># systemctl restart docker</span></div><div class="line">[root@localhost ~]<span class="comment"># lsblk</span></div><div class="line">NAME                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</div><div class="line">sda                         8:0    0   2.7T  0 disk </div><div class="line">├─sda1                      8:1    0     1M  0 part </div><div class="line">├─sda2                      8:2    0     3G  0 part /boot</div><div class="line">├─sda3                      8:3    0   948G  0 part </div><div class="line">│ ├─centos-root           253:0    0   300G  0 lvm  /</div><div class="line">│ ├─centos-swap           253:1    0    48G  0 lvm  [SWAP]</div><div class="line">│ └─centos-home           253:2    0   600G  0 lvm  /home</div><div class="line">├─sda4                      8:4    0 838.1G  0 part /nfs-data</div><div class="line">└─sda5                      8:5    0  1004G  0 part </div><div class="line">  ├─docker-thinpool_tmeta 253:4    0    10G  0 lvm  </div><div class="line">  │ └─docker-thinpool     253:6    0 953.7G  0 lvm  </div><div class="line">  └─docker-thinpool_tdata 253:5    0 953.7G  0 lvm  </div><div class="line">    └─docker-thinpool     253:6    0 953.7G  0 lvm  </div><div class="line">sr0                        11:0    1  1024M  0 rom  </div><div class="line">[root@localhost ~]<span class="comment"># docker info</span></div><div class="line">Containers: 0</div><div class="line"> Running: 0</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 0</div><div class="line">Images: 0</div><div class="line">Server Version: 1.12.5</div><div class="line">Storage Driver: devicemapper</div><div class="line"> Pool Name: docker-thinpool</div><div class="line"> Pool Blocksize: 524.3 kB</div><div class="line"> Base Device Size: 10.74 GB</div><div class="line"> Backing Filesystem: xfs</div><div class="line"> Data file: </div><div class="line"> Metadata file: </div><div class="line"> Data Space Used: 19.92 MB</div><div class="line"> Data Space Total: 1.024 TB</div><div class="line"> Data Space Available: 1.024 TB</div><div class="line"> Metadata Space Used: 1.188 MB</div><div class="line"> Metadata Space Total: 10.78 GB</div><div class="line"> Metadata Space Available: 10.78 GB</div><div class="line"> Thin Pool Minimum Free Space: 102.4 GB</div><div class="line"> Udev Sync Supported: <span class="literal">true</span></div><div class="line"> Deferred Removal Enabled: <span class="literal">true</span></div><div class="line"> Deferred Deletion Enabled: <span class="literal">true</span></div><div class="line"> Deferred Deleted Device Count: 0</div><div class="line"> Library Version: 1.02.107-RHEL7 (2015-10-14)</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div><div class="line">Plugins:</div><div class="line"> Volume: <span class="built_in">local</span></div><div class="line"> Network: null host bridge overlay</div><div class="line">Swarm: inactive</div><div class="line">Runtimes: runc</div><div class="line">Default Runtime: runc</div><div class="line">Security Options: seccomp</div><div class="line">Kernel Version: 3.10.0-327.el7.x86_64</div><div class="line">Operating System: CentOS Linux 7 (Core)</div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">CPUs: 4</div><div class="line">Total Memory: 7.591 GiB</div><div class="line">Name: bogon</div><div class="line">ID: ISYY:44CF:DXHU:PAFM:JULI:TMZ7:326S:A7EH:MZAB:3RIL:UIVK:FXJG</div><div class="line">Docker Root Dir: /var/lib/docker</div><div class="line">Debug Mode (client): <span class="literal">false</span></div><div class="line">Debug Mode (server): <span class="literal">false</span></div><div class="line">Registry: https://index.docker.io/v1/</div><div class="line">WARNING: bridge-nf-call-iptables is disabled</div><div class="line">WARNING: bridge-nf-call-ip6tables is disabled</div><div class="line">Experimental: <span class="literal">true</span></div><div class="line">Insecure Registries:</div><div class="line"> 127.0.0.0/8</div></pre></td></tr></table></figure>
<ul>
<li>查看direct-lvm是本配置成功</li>
</ul>
<p>用docker命令pull下载一个镜像，你会发现thinpool的Data%会增加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@docker-master ~]<span class="comment"># lvs</span></div><div class="line">  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</div><div class="line">  home     centos -wi-ao----   1.00t                                                    </div><div class="line">  root     centos -wi-ao---- 300.00g                                                    </div><div class="line">  swap     centos -wi-ao----  48.00g                                                    </div><div class="line">  thinpool docker twi-aot---   1.32t             0.23   0.02</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>linux命令创建PV/VG/LV：<a href="http://man.linuxde.net/pvcreate" title="linux命令创建PV/VG/LV" target="_blank" rel="external">http://man.linuxde.net/pvcreate</a><br>docker devicemapper存储驱动官方说明: <a href="https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/" title="docker devicemapper存储驱动官方说明" target="_blank" rel="external">(https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins-registry持续集成-jenkins-registry安装与数据迁移(一)]]></title>
      <url>http://www.troylc.cc/docker/2017/01/08/Docker05registry-jenkins.html</url>
      <content type="html"><![CDATA[<p>最近项目中也是一直在用jenkins做持续集成，正好更新jenkins为最新版本及迁移原来的老环境。顺手把它记录下来，和大家一起分享（本文同样适用新入手jenkins的同学）。 </p>
<h3 id="持续集成原理"><a href="#持续集成原理" class="headerlink" title="持续集成原理"></a>持续集成原理</h3><p>持续集成, 简称CI（continuous integration）.</p>
<ul>
<li>CI作为敏捷开发重要的一步，其目的在于让产品快速迭代的同时，尽可能保持高质量.</li>
<li>CI一种可以增加项目可见性，降低项目失败风险的开发实践。其每一次代码更新，都要通过自动化测试来检测代码和功能的正确性，只有通过自动测试的代码才能进行后续的交付和部署.</li>
<li>CI 是团队成员间（产研测）更好地协调工作，更好的适应敏捷迭代开发，自动完成减少人工干预，保证每个时间点上团队成员提交的代码都能成功集成的，可以很好的用于对各种WEB、APP项目的打包.  </li>
</ul>
<p>Jenkins<br><a href="https://jenkins.io/index.html" target="_blank" rel="external">Jenkins</a>是一个用Java编写的开源的持续集成工具，提供了软件开发的持续集成服务，可监控并触发持续重复的工作，具有开源，支持多平台和插件扩展，安装简单，界面化管理等特点。</p>
<p>附网上jenkins持续交付流程图<br><img src="/images/docker/jenkins/jenkins1-1.png" alt="jenkins持续集成"><br>持续集成，持续交付各个阶段所使用的一些典型工具的使用，以及在各个阶段中的相关团队的相关活动，以下图为典型的DevOps相关的活动<br><img src="/images/docker/jenkins/jenkins1-2.png" alt="jenkins持续集成2"></p>
<h3 id="docker环境安装"><a href="#docker环境安装" class="headerlink" title="docker环境安装"></a>docker环境安装</h3><p>参考：<a href="http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html">docker系列-docker、docker-compse最新版本安装及版本升级</a></p>
<h3 id="jenkins和registry环境安装"><a href="#jenkins和registry环境安装" class="headerlink" title="jenkins和registry环境安装"></a>jenkins和registry环境安装</h3><p>首页在有联网条件下的docker环境中下载jenkins最新版本的docker镜像</p>
<h4 id="下载jenkins镜像和registry镜像"><a href="#下载jenkins镜像和registry镜像" class="headerlink" title="下载jenkins镜像和registry镜像"></a>下载jenkins镜像和registry镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]# docker pull jenkins:2.32.1-alpine</div><div class="line">2.32.1-alpine: Pulling from library/jenkins</div><div class="line">b7f33cc0b48e: Pull complete </div><div class="line">43a564ae36a3: Pull complete </div><div class="line">b294f0e7874b: Downloading [=========================================&gt;         ] 41.12 MB/49.36 MB</div><div class="line">63c7a703a76a: Downloading [===========&gt;                                       ] 5.144 MB/23.26 MB</div><div class="line">1948a77ff7cc: Download complete </div><div class="line">ceb220f57d17: Downloading [=========================&gt;                         ] 35.11 MB/69.93 MB</div><div class="line">d0fbbc51c7ae: Waiting </div><div class="line">6eee39234906: Waiting </div><div class="line">6eee39234906: Pulling fs layer </div><div class="line">[root@registry-jenkins ~]# docker pull registry</div><div class="line">latest: Pulling from library/registry</div><div class="line">b7f33cc0b48e: Pull complete </div><div class="line">43a564ae36a3: Pull complete </div><div class="line">b294f0e7874b: Downloading [=========================================&gt;         ] 41.12 MB/49.36 MB</div><div class="line">63c7a703a76a: Downloading [===========&gt;                                       ] 5.144 MB/23.26 MB</div><div class="line">1948a77ff7cc: Download complete </div><div class="line">6eee39234906: Pulling fs layer </div><div class="line"></div><div class="line">[root@registry-jenkins ~]# docker images</div><div class="line">REPOSITORY                   TAG                    IMAGE ID            CREATED             SIZE</div><div class="line">jenkins                      2.32.1-alpine          0c0c0a437b20        10 days ago         263.7 MB</div><div class="line">registry                     latest                 182810e6ba8c        10 days ago         37.6 MB</div><div class="line">nginx                        latest                 abf312888d13        5 weeks ago         181.5 MB</div><div class="line">mysql                        latest                 d9124e6c552f        6 weeks ago         383.4 MB</div><div class="line">tomcat                       8.0.39-jre8-alpine     fbb6a04c1245        7 weeks ago         135.4 MB</div><div class="line">java                         openjdk-8-jdk-alpine   d991edd81416        7 weeks ago         145 MB</div><div class="line">tomcat                       8.5.5-jre8-alpine      af393862df5a        4 months ago        135 MB</div><div class="line">redis                        latest                 4f5f397d4b7c        10 months ago       177.5 MB</div><div class="line">toptomcat                    latest                 ce8c4307d74c        14 months ago       395.5 MB</div><div class="line">topsecnginx                  latest                 bd299f0f0516        14 months ago       223.4 MB</div></pre></td></tr></table></figure>
<h4 id="镜像加速器安装"><a href="#镜像加速器安装" class="headerlink" title="镜像加速器安装"></a>镜像加速器安装</h4><p>==注意：==  </p>
<p>一般由于docker hub是国外的网站，下载镜像非常慢，各位可以用国内的加载器，这里我推荐两种加载器：</p>
<ul>
<li>daocloud加载器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://69693d08.m.daocloud.io</div></pre></td></tr></table></figure>
<p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/default/docker 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，具体地址为 <a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">https://www.daocloud.io/mirror#accelerator-doc</a>其他版本可能有细微不同。更多详情请<a href="http://guide.daocloud.io/dcs/daocloud-9153151.html" target="_blank" rel="external">访问文档</a>。</p>
<ul>
<li>阿里云加载器  </li>
</ul>
<p>阿里云加载器是你用阿里云账号登录后，在产品与服务中有一个加速器，点击加速器出现如下内容：<br>他会给没一个账号弄一个专属的加载器：我的是 专属加速器地址： <a href="https://1i186hp0.mirror.aliyuncs.com" target="_blank" rel="external">https://1i186hp0.mirror.aliyuncs.com</a></p>
<p>安装或升级Docker</p>
<p>您可以通过阿里云的镜像仓库下载： mirrors.aliyun.com/help/docker-engine</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div></pre></td></tr></table></figure>
<p>配置Docker加速器</p>
<p>您可以使用如下的脚本将mirror的配置添加到docker daemon的启动参数中。<br><strong>系统要求 CentOS 7 以上，Docker 1.9 以上。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</div><div class="line">sudo sed -i &quot;s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=https://1i186hp0.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<h4 id="通过docker-compose运行jenkins和regsitry"><a href="#通过docker-compose运行jenkins和regsitry" class="headerlink" title="通过docker-compose运行jenkins和regsitry"></a>通过docker-compose运行jenkins和regsitry</h4><h5 id="docker-compose文件内容："><a href="#docker-compose文件内容：" class="headerlink" title="docker-compose文件内容："></a>docker-compose文件内容：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@registry-jenkins ~]<span class="comment"># vim docker-compose.yml</span></div><div class="line"><span class="comment">#docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins</span></div><div class="line">jenkins:</div><div class="line">  image: jenkins:2.32.1-alpine</div><div class="line">  container_name: jenkins</div><div class="line">  ports:</div><div class="line">    - <span class="string">"8080:8080"</span></div><div class="line">    - <span class="string">"50000:50000"</span></div><div class="line">  volumes:</div><div class="line">    - /opt/data/jenkins_home:/var/jenkins_home</div><div class="line">  extra_hosts: </div><div class="line">    - <span class="string">"repo.topsec.com:172.19.6.42"</span></div><div class="line">  user: root</div><div class="line">  restart: always</div><div class="line"><span class="comment">#docker run -d --restart=always -p 5000:5000 -v /opt/devdata/registry:/var/lib/registry --name devregistry registry</span></div><div class="line">registry:</div><div class="line">  image: registry</div><div class="line">  container_name: devregistry</div><div class="line">  ports:</div><div class="line">    - <span class="string">"5000:5000"</span></div><div class="line">  volumes:</div><div class="line">    - /opt/devdata/registry:/var/lib/registry</div><div class="line">  restart: always</div><div class="line">  </div><div class="line">[root@registry-jenkins ~]<span class="comment"># docker-compose up -d</span></div><div class="line">[root@registry-jenkins devdata]<span class="comment"># docker-compose ps</span></div><div class="line">   Name                  Command               State                        Ports                       </div><div class="line">-------------------------------------------------------------------------------------------------------</div><div class="line">devregistry   /entrypoint.sh /etc/docker ...   Up      0.0.0.0:5000-&gt;5000/tcp                           </div><div class="line">jenkins       /bin/tini -- /usr/<span class="built_in">local</span>/bi ...   Up      0.0.0.0:50000-&gt;50000/tcp, 0.0.0.0:8080-&gt;8080/tcp</div></pre></td></tr></table></figure>
<h5 id="迁移jenkins和registry数据"><a href="#迁移jenkins和registry数据" class="headerlink" title="迁移jenkins和registry数据"></a>迁移jenkins和registry数据</h5><p>如果是之前有运行了老版本的jenkins持续集成的内容，docker环境会有一个volumes的映射目录，只有从老的jenkins映射的目录，打包，拷贝到新的指定目录，然后在docker-compose.yml文件中在volumes中指定你拷贝的新的目录就行。后面的操作和上面一样。</p>
<p>registry和jenkns类似，都有一个挂载的目录存储着镜像内容，只有将该文件下的内容拷贝到新的环境目录，然后在docker-compose文件指定目录位置就行。如上 docker-compose.yml文件中的内容</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.dockerinfo.net/?s=registry" target="_blank" rel="external">docker registry v2 认证服务器</a><br><a href="http://www.dockerinfo.net/2457.html" target="_blank" rel="external">从零开始搭建Jenkins+Docker自动化集成环境</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker系列-docker、docker-compse最新版本安装及版本升级]]></title>
      <url>http://www.troylc.cc/docker/2017/01/05/docker04ininstall.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直由于工作的原因，在2016年下半年几乎停止了更新自己的博客，新年依始，勿忘初心，重新更新了自己的博客空间主题，虽有不足，总算是顺利完成了更新。 希望2017更进一步。<br>以下为docker1.12.x和docker-compose1.9的安装</p>
<h4 id="环境信息"><a href="#环境信息" class="headerlink" title="- 环境信息"></a>- <strong>环境信息</strong></h4><table>
<thead>
<tr>
<th>操作系统</th>
<th>软件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>centos7.2</td>
<td>docker engine 1.12</td>
<td>Docker是一个能够把开发的应用程序自动部署到容器的开源引擎</td>
</tr>
<tr>
<td>centos7.2</td>
<td>docker-compose 1.9</td>
<td>是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用</td>
</tr>
</tbody>
</table>
<h4 id="系统环境安装"><a href="#系统环境安装" class="headerlink" title="- 系统环境安装"></a>- <strong>系统环境安装</strong></h4><p>升级这台主机的内核到最新版本。为安装最新的docker版本<br>升级内核(在连网的环境下)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]<span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></div><div class="line">[root@dmpdev ~]<span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></div><div class="line">[root@dmpdev ~]<span class="comment"># yum --enablerepo=elrepo-kernel install kernel-ml</span></div></pre></td></tr></table></figure>
<p>也可以通过此<a href="http://pkgs.org/download/kernel-devel网站手工下载安装" target="_blank" rel="external">http://pkgs.org/download/kernel-devel网站手工下载安装</a><br>重要：目前内核还是默认的版本，如果在这一步完成后你就直接reboot了，重启后使用的内核版本还是默认的3.10，不会使用新的4.X以上，想修改启动的顺序，需要进行下一步<br>查看默认启动顺序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# awk -F\&apos; &apos;$1==&quot;menuentry &quot; &#123;print $2&#125;&apos; /etc/grub2.cfg</div></pre></td></tr></table></figure>
<p>默认启动的顺序是从0开始，但我们新内核是从头插入（目前位置在0，而3.10的是在1），所以需要选择0，如果想生效最新的内核，需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# grub2-set-default 0   我这里是1</div></pre></td></tr></table></figure>
<h4 id="docker环境安装"><a href="#docker环境安装" class="headerlink" title="- docker环境安装"></a>- <strong>docker环境安装</strong></h4><h5 id="1-确认旧的docker相关的组件并删除"><a href="#1-确认旧的docker相关的组件并删除" class="headerlink" title="1. 确认旧的docker相关的组件并删除"></a>1. 确认旧的docker相关的组件并删除</h5><p>如果你的机器上有用centos简易安装方式yum install docker安装的各种docker组件。安装1.12之前先把它们删掉吧，不然后面有可能还是会提示你删除的。（适合想对docker进行升级的情况，先删除，再安装最新的，放心删除docker engine,他不会删除你本地的镜像和容器，一但是重新安装好后，原来的镜像容器同样可以用，这点已经实验了，大家放心删除）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# rpm -qa |grep docker</div><div class="line">docker-selinux-1.10.3-44.el7.centos.x86_64</div><div class="line">docker-common-1.10.3-44.el7.centos.x86_64</div><div class="line">docker-forward-journald-1.10.3-44.el7.centos.x86_64</div><div class="line">docker-1.10.3-44.el7.centos.x86_64</div><div class="line">[root@dmpdev ~]# yum -y remove docker-selinux-1.10.3-44.el7.centos.x86_64</div><div class="line">[root@dmpdev ~]# yum -y remove docker-common-1.10.3-44.el7.centos.x86_64</div><div class="line">[root@dmpdev ~]# yum -y remove docker-forward-journald-1.10.3-44.el7.centos.x86_64</div><div class="line">[root@dmpdev ~]# yum -y remove docker-1.10.3-44.el7.centos.x86_64</div></pre></td></tr></table></figure>
<h5 id="2-安装docker-1-12-x版本"><a href="#2-安装docker-1-12-x版本" class="headerlink" title="2. 安装docker 1.12.x版本"></a>2. 安装docker 1.12.x版本</h5><h6 id="设定docker的Yum源来安装"><a href="#设定docker的Yum源来安装" class="headerlink" title="- 设定docker的Yum源来安装"></a>- 设定docker的Yum源来安装</h6><p>docker缺省的Yum库使用的是main，基本上是稳定的版本。而不是最新版本的docker。在centos上安装只需要设定为experimental。将其baseurl设定为<a href="https://yum.dockerproject.org/repo/experimental/centos/7/即可。以后升到1.99估计也可以用同样的花招抢先试用吧。以下为设定方式：" target="_blank" rel="external">https://yum.dockerproject.org/repo/experimental/centos/7/即可。以后升到1.99估计也可以用同样的花招抢先试用吧。以下为设定方式：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# cat &gt; /etc/yum.repos.d/docker.repo &lt;&lt;-EOF</div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/experimental/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div><div class="line"></div><div class="line">[root@dmpdev ~]# yum -y install docker-engine</div><div class="line">省略安装内容.......</div><div class="line">已安装:</div><div class="line">  docker-engine.x86_64 0:1.12.1-1.el7.centos                                                                                                    </div><div class="line">作为依赖被安装:</div><div class="line">  audit-libs-python.x86_64 0:2.4.1-5.el7    checkpolicy.x86_64 0:2.1.12-6.el7    docker-engine-selinux.noarch 0:1.12.1-1.el7.centos libcgroup.x86_64 0:0.41-8.el7  libseccomp.x86_64 0:2.2.1-1.el7   </div><div class="line">  libsemanage-python.x86_64 0:2.1.10-18.el7 libtool-ltdl.x86_64 0:2.4.2-21.el7_2 policycoreutils-python.x86_64 0:2.2.5-20.el7       python-IPy.noarch 0:0.75-6.el7 setools-libs.x86_64 0:3.3.7-46.el7</div><div class="line">[root@dmpdev ~]# systemctl start docker 启动 docker</div><div class="line">[root@dmpdev ~]# systemctl enable docker 设置开机启动</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</div></pre></td></tr></table></figure>
<h6 id="通过CURL或者WGET运行bash命令来安装："><a href="#通过CURL或者WGET运行bash命令来安装：" class="headerlink" title="- 通过CURL或者WGET运行bash命令来安装："></a>- 通过CURL或者WGET运行bash命令来安装：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# curl -fsSL https://get.docker.com/ | sh 或者 wget -qO- https://get.docker.com/ |sh</div><div class="line">[root@dmpdev ~]# systemctl restart docker</div><div class="line">[root@dmpdev ~]# docker version</div><div class="line">[root@dmpdev ~]# docker version</div><div class="line">Client:</div><div class="line"> Version:      1.12.3</div><div class="line"> API version:  1.24</div><div class="line"> Go version:   go1.6.3</div><div class="line"> Git commit:   6b644ec</div><div class="line"> Built:        </div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.12.3</div><div class="line"> API version:  1.24</div><div class="line"> Go version:   go1.6.3</div><div class="line"> Git commit:   6b644ec</div><div class="line"> Built:        </div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> [root@dmpdev ~]# systemctl start docker 启动 docker</div><div class="line">[root@dmpdev ~]# systemctl enable docker 设置开机启动</div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</div></pre></td></tr></table></figure>
<h4 id="docker-compose环境安装"><a href="#docker-compose环境安装" class="headerlink" title="- docker-compose环境安装"></a>- docker-compose环境安装</h4><p>Docker Compose是一个一次部署多个容器的简单但是非常必要的工具，</p>
<h5 id="PIP安装"><a href="#PIP安装" class="headerlink" title="- PIP安装"></a>- PIP安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# yum install python-pip -y</div><div class="line">[root@dmpdev ~]# pip install docker-compose</div><div class="line">[root@dmpdev ~]# docker-compose -version</div><div class="line">docker-compose version 1.9.0, build 2585387</div></pre></td></tr></table></figure>
<h5 id="curl下载二进制可执行文件的方式-推荐"><a href="#curl下载二进制可执行文件的方式-推荐" class="headerlink" title="- curl下载二进制可执行文件的方式(推荐)"></a>- curl下载二进制可执行文件的方式(推荐)</h5><p>安装Docker-compose   <a href="https://github.com/docker/compose/releases" target="_blank" rel="external">https://github.com/docker/compose/releases</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev ~]# curl -L &quot;https://github.com/docker/compose/releases/download/1.9.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</div><div class="line">[root@dmpdev ~]# chmod +x /usr/local/bin/docker-compose</div><div class="line">[root@dmpdev ~]# docker-compose -version</div><div class="line">docker-compose version 1.9.0, build 2585387</div></pre></td></tr></table></figure>
<h5 id="手工下载二进制方式-离线安装"><a href="#手工下载二进制方式-离线安装" class="headerlink" title="- 手工下载二进制方式(离线安装)"></a>- 手工下载二进制方式(离线安装)</h5><p>安装docker-compose<br>自己找一台能上网的机器，进入github网站的docker-compose代码仓库的releases，找到latest版本，手工下载 具体地址：<a href="https://github.com/docker/compose/releases/download/1.9.0/docker-compose-Darwin-x86_64" target="_blank" rel="external">https://github.com/docker/compose/releases/download/1.9.0/docker-compose-Darwin-x86_64</a>  </p>
<p>把下载的进制文件(docker-compose-Darwin-x86_64)通过工具拷贝到有docker环境的主机的/usr/local/bin/下，修改名称为docker-compose</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@dmpdev bin] mv docker-compose-Darwin-x86_64 docker-compose</div><div class="line">[root@dmpdev bin]# chmod +x /usr/local/bin/docker-compose</div><div class="line">[root@dmpdev bin]# docker-compose -version</div><div class="line">docker-compose version 1.9.0, build 2585387</div></pre></td></tr></table></figure>
<p>至此docker与docker-compose环境就已经安装完成。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker系列(三)Docker的图形化管理工具Shipyard]]></title>
      <url>http://www.troylc.cc/docker/2016/08/07/docker-03.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>启动两个虚机，都部署Docker Engine，然后再其中一台上安装shipyard ，管理两个Docker Engine，其中一个Engine 贴标签为dev ,一个为online，表明开发环境或线上环境<br>采用shipyard发布两个MySQL 实例，分别名字为MySQL-dev与MySQL-Online，在不同的Docker上，截图说明操作过程</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>1.两台Vmware虚拟机(网络模式为nat)：<br>(dev)192.168.253.129(centos7)<br>(online)192.168.253.134(centos7)<br>2.升级这两台（192.168.253.134、192.168.253.129）主机的内核到最新版本。为安装最新的docker版本<br>升级内核(在连网的环境下)<br>[root@localhost bin]# rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org" target="_blank" rel="external">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>[root@localhost bin]# rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm" target="_blank" rel="external">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a><br>[root@localhost bin]# yum –enablerepo=elrepo-kernel install kernel-ml<br>也可以通过此<a href="http://pkgs.org/download/kernel-devel网站手工下载安装" target="_blank" rel="external">http://pkgs.org/download/kernel-devel网站手工下载安装</a><br>重要：目前内核还是默认的版本，如果在这一步完成后你就直接reboot了，重启后使用的内核版本还是默认的3.10，不会使用新的4.3，想修改启动的顺序，需要进行下一步<br>查看默认启动顺序<br>[root@localhost bin]# awk -F\’ ‘$1==”menuentry “ {print $2}’ /etc/grub2.cfg<br>默认启动的顺序是从0开始，但我们新内核是从头插入（目前位置在0，而3.10的是在1），所以需要选择0，如果想生效最新的内核，需要<br>[root@localhost bin]# grub2-set-default 0   我这里是1<br><img src="/images/docker/3-1.png" alt="nh"><br>3.修改两台主机的主机名（这一步重要，如果不修改，后续在创建容器互联时两主机间的容器不能通信）：<br>在192.168.253.129修改主机名并重启<br>[root@localhost bin]# hostnamectl set-hostname dev<br>[root@localhost bin]# reboot<br>在192.168.253.134修改主机名并重启<br>[root@localhost bin]# hostnamectl set-hostname online<br>[root@localhost bin]# reboot </p>
<h4 id="安装shipyard，通过官方的脚本安装"><a href="#安装shipyard，通过官方的脚本安装" class="headerlink" title="安装shipyard，通过官方的脚本安装"></a>安装shipyard，通过官方的脚本安装</h4><p>1.首次部署脚本</p>
<p>[root@dev ~]# curl -sSL <a href="https://dockerclub.net/deploy" target="_blank" rel="external">https://dockerclub.net/deploy</a> | bash -s<br>ACTION: 可以使用的指令 (deploy, upgrade, node, remove)<br>DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)<br>IMAGE: 镜像，默认使用shipyard的镜像<br>PREFIX: 容器名字的前缀<br>SHIPYARD_ARGS: 容器的常用参数<br>TLS_CERT_PATH: TLS证书路径<br>PORT: 主程序监听端口 (默认端口: 8080)<br>PROXY_PORT: 代理端口 (默认: 2375) </p>
<p>运行这条命令会下载依赖的镜像，国内环境估计无法下载，我用的是阿里云的加载器。至于怎么添加，登录阿里云上去看就知道了。提供下地址：<a href="http://console.d.aliyun.com/index2.html/?spm=0.0.0.0.Xx1dX0#/docker/booster" target="_blank" rel="external">http://console.d.aliyun.com/index2.html/?spm=0.0.0.0.Xx1dX0#/docker/booster</a><br>上面命令效果如下：<br><img src="/images/docker/3-2.png" alt="nh"><br>我这肯定是已经下载过了依赖的镜像，所以没有提示下载镜像操作。</p>
<p>2.增加一个部署节点<br>shipyard节点部署脚本将自动的安装key/value存储系统（etcd系统）。增加一个节点到swarm集群，你可以使用以下的节点部署脚本<br>[root@online ~]  curl -sSL <a href="https://dockerclub.net/deploy" target="_blank" rel="external">https://dockerclub.net/deploy</a> | ACTION=node  DISCOVERY=etcd://192.168.253.129:4001 bash -s<br>注意：192.168.253.129这个ip地址你需要修改为你的首次初始化shipyard系统的主机地址<br><img src="/images/docker/3-3.png" alt="nh"><br>3.删除shipyard系统（运行上面两步，就可以对shipyard使用）<br>[root@online ~]$  curl -sSL <a href="https://dockerclub.net/deploy" target="_blank" rel="external">https://dockerclub.net/deploy</a> | ACTION=remove bash -s</p>
<h4 id="shipyard使用"><a href="#shipyard使用" class="headerlink" title="shipyard使用"></a>shipyard使用</h4><p>在浏览器中验证：<br>输入：<a href="http://localhost:8080/#/login（我这是做了vmware的虚拟IP映射，所以是localhost，admin/shipyard）" target="_blank" rel="external">http://localhost:8080/#/login（我这是做了vmware的虚拟IP映射，所以是localhost，admin/shipyard）</a><br>节点信息：<br><img src="/images/docker/3-4.png" alt="nh"><br>创建容器：<br><img src="/images/docker/3-5.png" alt="nh"><br><img src="/images/docker/3-6.png" alt="nh"><br>两个容器的运行结果，用官方的安装是一个swarm集群环境，好像一不能指定具体在那一个节点上运行。<br><img src="/images/docker/3-7.png" alt="nh"></p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker系列(二)使用Docker-Remote-API]]></title>
      <url>http://www.troylc.cc/docker/2016/07/31/docker-02.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Docker Remote API是一个取代远程命令行界面（rcli）的REST API。我们将使用命令行工具curl来处理url相关操作。curl可以发送请求、获取以及发送数据、检索信息。是docker自带的一个rest api 管理docker所有的操作都有对应的http rest API可供操作。下面简单说一下API的操作</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table>
<thead>
<tr>
<th>主机</th>
<th>安装软件</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.253.129</td>
<td>安装docker，打开docker的API访问端口，主机</td>
</tr>
<tr>
<td>192.168.253.131</td>
<td>安装docker,远程通过API访问docker主机的客户端</td>
</tr>
</tbody>
</table>
<h4 id="配置-192-168-253-129-启动Remote-API"><a href="#配置-192-168-253-129-启动Remote-API" class="headerlink" title="配置(192.168.253.129)启动Remote API"></a>配置(192.168.253.129)启动Remote API</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /usr/lib/systemd/system/docker.service</span></div><div class="line">[Unit]</div><div class="line">Description=Docker Application Container Engine</div><div class="line">Documentation=http://docs.docker.com</div><div class="line">After=network.target</div><div class="line">Wants=docker-storage-setup.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-network</div><div class="line">Environment=GOTRACEBACK=crash</div><div class="line">ExecStart=/usr/bin/docker daemon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock \</div><div class="line">          <span class="variable">$OPTIONS</span> \</div><div class="line">          <span class="variable">$DOCKER_STORAGE_OPTIONS</span> \</div><div class="line">          <span class="variable">$DOCKER_NETWORK_OPTIONS</span> \</div><div class="line">          <span class="variable">$ADD_REGISTRY</span> \</div><div class="line">          <span class="variable">$BLOCK_REGISTRY</span> \</div><div class="line">          <span class="variable">$INSECURE_REGISTRY</span></div><div class="line">LimitNOFILE=1048576</div><div class="line">LimitNPROC=1048576</div><div class="line">LimitCORE=infinity</div><div class="line">MountFlags=slave</div><div class="line">TimeoutStartSec=1min</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>说明：<br>上面那句话，在不同的版本，设置有可能不一样，<br>重启docker<br>[root@localhost ~]# systemctl daemon-reload<br>[root@localhost ~]# systemctl restart docker</p>
<p>在本机(192.168.253.129)测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># docker -H 192.168.253.129:2375 images</span></div><div class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">myhub/mysql                             latest              d298157e388e        2 days ago          359.9 MB</div><div class="line">troylc/maven                            latest              0d244f5623e3        4 days ago          831.8 MB</div><div class="line">jenkins                                 latest              988e2e1b7418        9 days ago          707.8 MB</div><div class="line">registry                                latest              a8706c2bfd21        10 days ago         422.8 MB</div><div class="line">maven                                   latest              e6a340bb7d58        2 weeks ago         651.9 MB</div><div class="line">kubetomcat                              latest              d7b68af6b003        4 weeks ago         395.6 MB</div><div class="line">kubenginx                               latest              3820887c73d5        4 weeks ago         223.4 MB</div><div class="line">dmptomcat                               latest              82775047bc5e        6 weeks ago         395.5 MB</div><div class="line">toptomcat                               latest              06666482da5f        6 weeks ago         395.5 MB</div><div class="line">daocloud.io/daocloud/daocloud-toolset   latest              4a115833bcba        6 weeks ago         145.8 MB</div><div class="line">topsecssh                               latest              ac2ba2efcaf2        6 weeks ago         302.5 MB</div><div class="line">topsecnginx                             latest              0694365f1f87        6 weeks ago         223.4 MB</div><div class="line">tomcat                                  latest              e4b99e523705        7 weeks ago         347.8 MB</div><div class="line">mysql                                   latest              196db1908492        7 weeks ago         359.8 MB</div><div class="line">nginx                                   latest              5135500ec6a1        7 weeks ago         132.7 MB</div><div class="line">redis                                   latest              05babbd460f7        8 weeks ago         109.1 MB</div><div class="line">ubuntu                                  latest              a5a467fddcb8        8 weeks ago         187.9 MB</div><div class="line">centos                                  latest              ce20c473cd8a        9 weeks ago         172.3 MB</div><div class="line">gcr.io/google_containers/pause          0.8.0               2c40b0526b63        8 months ago        241.7 kB</div></pre></td></tr></table></figure></p>
<p>在docker客户端机(192.168.253.130)上访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># docker -H 192.168.253.129:2375 images</span></div><div class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">myhub/mysql                             latest              d298157e388e        2 days ago          359.9 MB</div><div class="line">troylc/maven                            latest              0d244f5623e3        4 days ago          831.8 MB</div><div class="line">jenkins                                 latest              988e2e1b7418        9 days ago          707.8 MB</div><div class="line">registry                                latest              a8706c2bfd21        10 days ago         422.8 MB</div><div class="line">maven                                   latest              e6a340bb7d58        2 weeks ago         651.9 MB</div><div class="line">kubetomcat                              latest              d7b68af6b003        4 weeks ago         395.6 MB</div><div class="line">kubenginx                               latest              3820887c73d5        4 weeks ago         223.4 MB</div><div class="line">dmptomcat                               latest              82775047bc5e        6 weeks ago         395.5 MB</div><div class="line">toptomcat                               latest              06666482da5f        6 weeks ago         395.5 MB</div><div class="line">daocloud.io/daocloud/daocloud-toolset   latest              4a115833bcba        6 weeks ago         145.8 MB</div><div class="line">topsecssh                               latest              ac2ba2efcaf2        6 weeks ago         302.5 MB</div><div class="line">topsecnginx                             latest              0694365f1f87        6 weeks ago         223.4 MB</div><div class="line">tomcat                                  latest              e4b99e523705        7 weeks ago         347.8 MB</div><div class="line">mysql                                   latest              196db1908492        7 weeks ago         359.8 MB</div><div class="line">nginx                                   latest              5135500ec6a1        7 weeks ago         132.7 MB</div><div class="line">redis                                   latest              05babbd460f7        8 weeks ago         109.1 MB</div><div class="line">ubuntu                                  latest              a5a467fddcb8        8 weeks ago         187.9 MB</div><div class="line">centos                                  latest              ce20c473cd8a        9 weeks ago         172.3 MB</div><div class="line">gcr.io/google_containers/pause          0.8.0               2c40b0526b63        8 months ago        241.7 kB</div><div class="line"></div><div class="line"></div><div class="line">[root@localhost ~]<span class="comment"># docker -H 192.168.253.129:2375 run -d -p 80:80 -p 443:443 -p 5005:22 -v /home/nfs/data:/home/nfs/data --name dmpnginx nginxa</span></div><div class="line">997f216e969a72146b52f916ec20b2c4b892c4ea86acaa329cfd7028d974389</div><div class="line">[root@localhost ~]<span class="comment"># docker -H 192.168.253.129:2375 run -d -p 6379:6379 --name dmpredis redis</span></div><div class="line">f74477908b1767a35f8666b164c60399943bc08964423fea967a364fe79f3fea</div><div class="line">[root@localhost ~]<span class="comment"># docker -H 192.168.253.129:2375 ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED                  STATUS              PORTS           </div><div class="line">                                                 NAMESf74477908b17        redis               <span class="string">"/entrypoint.sh redis"</span>   Less than a second ago   Up 8 seconds        0.0.0.0:6379-&gt;63</div><div class="line">79/tcp                                           dmpredisa997f216e969        nginx               <span class="string">"nginx -g 'daemon off"</span>   Less than a second ago   Up 32 seconds       0.0.0.0:80-&gt;80/t</div><div class="line">cp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:5005-&gt;22/tcp   dmpnginx</div></pre></td></tr></table></figure></p>
<p>docker宿主机上的操作，都可以通过（docker -H 192.168.253.129:2375 命令）的方式在其它docker客户机上操作。</p>
<h4 id="使用远程API构建镜像，运行容器，停止容器，删除容器等。"><a href="#使用远程API构建镜像，运行容器，停止容器，删除容器等。" class="headerlink" title="使用远程API构建镜像，运行容器，停止容器，删除容器等。"></a>使用远程API构建镜像，运行容器，停止容器，删除容器等。</h4><h5 id="使用info接入点-类似在宿主机上输入docker-info"><a href="#使用info接入点-类似在宿主机上输入docker-info" class="headerlink" title="使用info接入点(类似在宿主机上输入docker info)"></a>使用info接入点(类似在宿主机上输入docker info)</h5><p>curl <a href="http://192.168.253.129:2375/info" target="_blank" rel="external">http://192.168.253.129:2375/info</a><br><img src="/images/docker/clipboard.png" alt="dockerinfo"></p>
<h5 id="通过API获取远程docker主机上的镜像列表（类似于输入docker-images"><a href="#通过API获取远程docker主机上的镜像列表（类似于输入docker-images" class="headerlink" title="通过API获取远程docker主机上的镜像列表（类似于输入docker images)"></a>通过API获取远程docker主机上的镜像列表（类似于输入docker images)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># curl http://192.168.253.129:2375/images/json | python -mjson.tool</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100  5504    0  5504    0     0  43744      0 --:--:-- --:--:-- --:--:-- 44032</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Created"</span>: 1450623232,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"03b5e135264764e8b51a2f13f174e541ec3b8952d64762495e369cbb6ca9bdad"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"ParentId"</span>: <span class="string">"711aef0427ed0b2f77486a8c884294319b5aaca96c698d288a56d71148e6c0b4"</span>,</div><div class="line">        <span class="string">"RepoDigests"</span>: [],</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"myhub/education:latest"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Size"</span>: 0,</div><div class="line">        <span class="string">"VirtualSize"</span>: 506413396</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Created"</span>: 1450376000,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"d298157e388ed0e6edd000a1234b3f84abbc1463a8f0ece6f2c539034a1e2573"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"ParentId"</span>: <span class="string">"ac704f6f8363d123001de9dd604e4cb1b476d012f0a809c4bf86e0cd60631753"</span>,</div><div class="line">        <span class="string">"RepoDigests"</span>: [],</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"myhub/mysql:latest"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Size"</span>: 0,</div><div class="line">        <span class="string">"VirtualSize"</span>: 359871512</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Created"</span>: 1450215230,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"0d244f5623e3dc64d7f6428069c5dea3cd77299068b3ed2cb3d4eb56fd6f21b4"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"ParentId"</span>: <span class="string">"7605008fbf7d7470810df0c41f6422db254181f4f2eb2f02827f3fb62c9f79b3"</span>,</div><div class="line">        <span class="string">"RepoDigests"</span>: [],</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"troylc/maven:latest"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Size"</span>: 87225781,</div><div class="line">        <span class="string">"VirtualSize"</span>: 831831039</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Created"</span>: 1449771164,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"988e2e1b74182c986873eb4b5ebce2f9dcc8f9ec156e41ec881aaa1074c7d489"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"ParentId"</span>: <span class="string">"d67b67d804fff392fd88e2ba601b6e3cafc117a89c8783f1bf0780b58bc19713"</span>,</div><div class="line">        <span class="string">"RepoDigests"</span>: [],</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"jenkins:latest"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Size"</span>: 861,</div><div class="line">        <span class="string">"VirtualSize"</span>: 707786365</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="获取指定的镜像："><a href="#获取指定的镜像：" class="headerlink" title="获取指定的镜像："></a>获取指定的镜像：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># curl http://192.168.253.129:2375/images/2c40b0526b6358710fd09e7b8c022429268cc61703b4777e528ac9d469a07ca1/json | python -mjson.tool  </span></div><div class="line"><span class="comment">#2c40b0526b6358710fd09e7b8c022429268cc61703b4777e528ac9d469a07ca1为镜像的ID号，可以通过上面的（curl http://192.168.253.129:2375/images/json | python -mjson.tool）查询获得。</span></div><div class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100  1661  100  1661    0     0  83337      0 --:--:-- --:--:-- --:--:-- 87421</div><div class="line">&#123;</div><div class="line">    <span class="string">"Architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">    <span class="string">"Author"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Comment"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Config"</span>: &#123;</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: null,</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: [</div><div class="line">            <span class="string">"/pause"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"ExposedPorts"</span>: null,</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"d0eb442be084"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"56ba5533a2dbf18b017ed12d99c6c83485f7146ed0eb3a2e9966c27fc5a5dd7b"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"MacAddress"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"NetworkDisabled"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"PublishService"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"VolumeDriver"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: null,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Container"</span>: <span class="string">"c63e747118f6582698545c10277ce8412088258b62601908ed5f0f2accfeb2b3"</span>,</div><div class="line">    <span class="string">"ContainerConfig"</span>: &#123;</div><div class="line">        <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Cmd"</span>: [</div><div class="line">            <span class="string">"/bin/sh"</span>,</div><div class="line">            <span class="string">"-c"</span>,</div><div class="line">            <span class="string">"#(nop) ENTRYPOINT [/pause]"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Entrypoint"</span>: [</div><div class="line">            <span class="string">"/pause"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Env"</span>: [</div><div class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"ExposedPorts"</span>: null,</div><div class="line">        <span class="string">"Hostname"</span>: <span class="string">"d0eb442be084"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"56ba5533a2dbf18b017ed12d99c6c83485f7146ed0eb3a2e9966c27fc5a5dd7b"</span>,</div><div class="line">        <span class="string">"Labels"</span>: null,</div><div class="line">        <span class="string">"MacAddress"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"NetworkDisabled"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"OnBuild"</span>: [],</div><div class="line">        <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"PublishService"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"VolumeDriver"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Volumes"</span>: null,</div><div class="line">        <span class="string">"WorkingDir"</span>: <span class="string">""</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Created"</span>: <span class="string">"2015-03-31T22:05:45.140369385Z"</span>,</div><div class="line">    <span class="string">"DockerVersion"</span>: <span class="string">"1.3.3"</span>,</div><div class="line">    <span class="string">"GraphDriver"</span>: &#123;</div><div class="line">        <span class="string">"Data"</span>: &#123;</div><div class="line">            <span class="string">"DeviceId"</span>: <span class="string">"763"</span>,</div><div class="line">            <span class="string">"DeviceName"</span>: <span class="string">"docker-253:0-34749673-2c40b0526b6358710fd09e7b8c022429268cc61703b4777e528ac9d469a07ca1"</span>,</div><div class="line">            <span class="string">"DeviceSize"</span>: <span class="string">"107374182400"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Name"</span>: <span class="string">"devicemapper"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"Id"</span>: <span class="string">"2c40b0526b6358710fd09e7b8c022429268cc61703b4777e528ac9d469a07ca1"</span>,</div><div class="line">    <span class="string">"Os"</span>: <span class="string">"linux"</span>,</div><div class="line">    <span class="string">"Parent"</span>: <span class="string">"56ba5533a2dbf18b017ed12d99c6c83485f7146ed0eb3a2e9966c27fc5a5dd7b"</span>,</div><div class="line">    <span class="string">"Size"</span>: 0,</div><div class="line">    <span class="string">"VirtualSize"</span>: 241656</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="通过API搜索镜像（类似于docker-search-查询的是docker-hub上的镜像）"><a href="#通过API搜索镜像（类似于docker-search-查询的是docker-hub上的镜像）" class="headerlink" title="通过API搜索镜像（类似于docker search:查询的是docker hub上的镜像）"></a>通过API搜索镜像（类似于docker search:查询的是docker hub上的镜像）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment">#  curl "http://192.168.253.129:2375/images/search?term=tomcat" | python -mjson.tool</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100  5130    0  5130    0     0   2513      0 --:--:--  0:00:02 --:--:--  2513</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"description"</span>: <span class="string">"Apache Tomcat is an open source implementation of the Java Servlet and JavaServer Pages technologies"</span>,</div><div class="line">        <span class="string">"index_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"is_automated"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"is_official"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"is_trusted"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"tomcat"</span>,</div><div class="line">        <span class="string">"registry_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"star_count"</span>: 390</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"description"</span>: <span class="string">"Tomcat 7.0.57, 8080, \"admin/admin\""</span>,</div><div class="line">        <span class="string">"index_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"is_automated"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"is_official"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"is_trusted"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"consol/tomcat-7.0"</span>,</div><div class="line">        <span class="string">"registry_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"star_count"</span>: 14</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"description"</span>: <span class="string">"Tomcat 8.0.15, 8080, \"admin/admin\""</span>,</div><div class="line">        <span class="string">"index_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"is_automated"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"is_official"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"is_trusted"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"consol/tomcat-8.0"</span>,</div><div class="line">        <span class="string">"registry_name"</span>: <span class="string">"docker.io"</span>,</div><div class="line">        <span class="string">"star_count"</span>: 12</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="列出正在运行的容器（docker-ps-和docker-ps-a"><a href="#列出正在运行的容器（docker-ps-和docker-ps-a" class="headerlink" title="列出正在运行的容器（docker ps 和docker ps -a)"></a>列出正在运行的容器（docker ps 和docker ps -a)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment">#</span></div><div class="line">curl -s <span class="string">"http://192.168.253.129:2375/containers/json"</span>| python -mjson.tool(docker ps)</div><div class="line">curl http://192.168.253.129:2375/containers/json?all=1 | python -mjson.tool(docker ps -a)</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Command"</span>: <span class="string">"nginx"</span>,</div><div class="line">        <span class="string">"Created"</span>: 1436573284,</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"e5cac80914cbd41f390b0892324d71505e50ac35485b89374030ec3e65ae470c"</span>,</div><div class="line">        <span class="string">"Image"</span>: <span class="string">"pengji/nginx:latest"</span>,</div><div class="line">        <span class="string">"Labels"</span>: &#123;&#125;,</div><div class="line">        <span class="string">"Names"</span>: [</div><div class="line">            <span class="string">"/website"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Ports"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"IP"</span>: <span class="string">"0.0.0.0"</span>,</div><div class="line">                <span class="string">"PrivatePort"</span>: 80,</div><div class="line">                <span class="string">"PublicPort"</span>: 32768,</div><div class="line">                <span class="string">"Type"</span>: <span class="string">"tcp"</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="string">"Status"</span>: <span class="string">"Up 57 seconds"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h5 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h5><p>创建容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment">#  curl -X POST -H "Content-Type: application/json""http://192.168.253.129:2375/containers/create"-d '&#123;"Image":"pengji/nginx","Hostname":"remote_nginx"&#125;'</span></div><div class="line">&#123;<span class="string">"Id"</span>:<span class="string">"91784daaf79e87652142f9293dd82ef5716968db5b251ec761566759c0c529c6"</span>,<span class="string">"Warnings"</span>:null&#125;</div></pre></td></tr></table></figure></p>
<p>启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment">#  curl -X POST -H "Content-Type: application/json""http://192.168.253.129:2375/containers/91784daaf79e87652142f9293dd82ef5716968db5b251ec761566759c0c529c6/start"-d '&#123;"PublishAllPorts":true&#125;'</span></div><div class="line">Usage of loopback devices is strongly discouraged forproduction use. Either use `--storage-opt dm.thinpooldev` or use `--storage-opt dm.no_warn_on_loop_devices=<span class="literal">true</span>` to suppress this warning.</div></pre></td></tr></table></figure></p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux系列(二)-linux相关系统进程查看及管理]]></title>
      <url>http://www.troylc.cc/linux/2016/07/23/linux-02.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接上一篇linux文章，最近一直在学习linux相关的知识，之前也有看过相关对linux系统进程的文章，但一直没有总结和归纳。趁再次学习，把相关的知识记录下来。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>基于linux系统的相关进程管理命令有：ps、top、kill、</p>
<h4 id="ps命令："><a href="#ps命令：" class="headerlink" title="ps命令："></a>ps命令：</h4><ul>
<li><strong>ps aux 查看系统中所有进程，使用BSD操作系统格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@iZ23kbqqy35Z ~]<span class="comment"># ps aux</span></div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.0  19284  1508 ?        Ss    2015   0:01 /sbin/init</div><div class="line">root         2  0.0  0.0      0     0 ?        S     2015   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S     2015   4:23 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S&lt;    2015   0:00 [kworker/0:0H]</div><div class="line">root         7  0.0  0.0      0     0 ?        S     2015   0:01 [migration/0]</div><div class="line">root         8  0.0  0.0      0     0 ?        S     2015   0:00 [rcu_bh]</div><div class="line">root         9  0.0  0.0      0     0 ?        S     2015  25:32 [rcu_sched]</div><div class="line">root        10  0.0  0.0      0     0 ?        S     2015   1:59 [watchdog/0]</div><div class="line">root        11  0.0  0.0      0     0 ?        S     2015   1:42 [watchdog/1]</div><div class="line">root        12  0.0  0.0      0     0 ?        S     2015   0:01 [migration/1]</div><div class="line">root        13  0.0  0.0      0     0 ?        S     2015   3:36 [ksoftirqd/1]</div><div class="line">root        15  0.0  0.0      0     0 ?        S&lt;    2015   0:00 [kworker/1:0H]</div><div class="line">root        16  0.0  0.0      0     0 ?        S     2015   1:43 [watchdog/2]</div><div class="line">root        17  0.0  0.0      0     0 ?        S     2015   0:01 [migration/2]</div><div class="line">root        18  0.0  0.0      0     0 ?        S     2015   1:50 [ksoftirqd/2]</div><div class="line">......</div></pre></td></tr></table></figure>
<p><strong>ps命令的输出格式说明：</strong></p>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意</th>
</tr>
</thead>
<tbody>
<tr>
<td> USER</td>
<td>该进程是由那个用户产生的；</td>
</tr>
<tr>
<td> PID</td>
<td>进程的ID号</td>
</tr>
<tr>
<td> %CPU</td>
<td>该进程占用的CPU资源的百分比，占用越高，进程越耗费资源</td>
</tr>
<tr>
<td> %MEM</td>
<td>该进程占用物理内存的百分比，占用越高，进程越耗费资源</td>
</tr>
<tr>
<td> VSZ</td>
<td>该进程占用虚拟内存的大小，单位KB</td>
</tr>
<tr>
<td> RSS</td>
<td>该进程占用实际物理内存的大小，单位KB</td>
</tr>
<tr>
<td> TTY</td>
<td>该进程是在那个终端中运行的，其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。 pts/0-255代表虚拟终端</td>
</tr>
<tr>
<td> STAT</td>
<td>进程状态，常见的状态有：R：运行、S：睡眠、T：停止状态、s:包含子进程、+：位于后台</td>
</tr>
<tr>
<td> START</td>
<td>该进程的启动时间</td>
</tr>
<tr>
<td> TIME</td>
<td>该进程占用CPU的运算时间，注意不是系统时间</td>
</tr>
<tr>
<td> COMMAND</td>
<td>产生此进程的命令名</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>ps -le 查看系统中所有进程，使用linux标准命令格式</strong></li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td> a</td>
<td>显示一个终端的所有进程，除了会话引线</td>
</tr>
<tr>
<td> u</td>
<td>显示进程的归属用户及内存的使用情况</td>
</tr>
<tr>
<td> x</td>
<td>显示没有控制终端的进程</td>
</tr>
<tr>
<td>-l</td>
<td>长格式显示，显示更加详细的信息</td>
</tr>
<tr>
<td>-e</td>
<td>显示所有进程，和-A作用一致</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@iZ23kbqqy35Z ~]<span class="comment"># ps -le</span></div><div class="line">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</div><div class="line">4 S     0     1     0  0  80   0 -  4821 poll_s ?        00:00:01 init</div><div class="line">1 S     0     2     0  0  80   0 -     0 kthrea ?        00:00:00 kthreadd</div><div class="line">1 S     0     3     2  0  80   0 -     0 smpboo ?        00:04:23 ksoftirqd/0</div><div class="line">1 S     0     5     2  0  60 -20 -     0 worker ?        00:00:00 kworker/0:0H</div><div class="line">1 S     0     7     2  0 -40   - -     0 smpboo ?        00:00:01 migration/0</div><div class="line">1 S     0     8     2  0  80   0 -     0 rcu_gp ?        00:00:00 rcu_bh</div><div class="line">1 S     0     9     2  0  80   0 -     0 rcu_gp ?        00:25:32 rcu_sched</div><div class="line">5 S     0    10     2  0 -40   - -     0 smpboo ?        00:01:59 watchdog/0</div><div class="line">5 S     0    11     2  0 -40   - -     0 smpboo ?        00:01:42 watchdog/1</div><div class="line">1 S     0    12     2  0 -40   - -     0 smpboo ?        00:00:01 migration/1</div><div class="line">1 S     0    13     2  0  80   0 -     0 smpboo ?        00:03:36 ksoftirqd/1</div><div class="line">1 S     0    15     2  0  60 -20 -     0 worker ?        00:00:00 kworker/1:0H</div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li><strong>查看进程树：pstree[选项]</strong></li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>显示进程的PID</td>
</tr>
<tr>
<td>-u</td>
<td>显示进程的所属用户</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@iZ23kbqqy35Z ~]<span class="comment"># pstree -p</span></div><div class="line">init(1)─┬─AliHids(9903)─┬─&#123;AliHids&#125;(9904)</div><div class="line">        │               ├─&#123;AliHids&#125;(9905)</div><div class="line">        │               ├─&#123;AliHids&#125;(9907)</div><div class="line">        │               ├─&#123;AliHids&#125;(9908)</div><div class="line">        │               ├─&#123;AliHids&#125;(9909)</div><div class="line">        │               ├─&#123;AliHids&#125;(9911)</div><div class="line">        │               ├─&#123;AliHids&#125;(9912)</div><div class="line">        │               └─&#123;AliHids&#125;(9915)</div><div class="line">        ├─AliYunDun(20201)─┬─&#123;AliYunDun&#125;(20202)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20203)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20204)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20205)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20206)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20207)</div><div class="line">        │                  ├─&#123;AliYunDun&#125;(20208)</div><div class="line">        │                  └─&#123;AliYunDun&#125;(20209)</div><div class="line">        ├─AliYunDunUpdate(19913)─┬─&#123;AliYunDunUpdat&#125;(19914)</div><div class="line">        │                        ├─&#123;AliYunDunUpdat&#125;(19915)</div><div class="line">        │                        └─&#123;AliYunDunUpdat&#125;(19921)</div><div class="line">        ├─crond(2028)</div><div class="line">        ├─gshelld(2075)─┬─&#123;gshelld&#125;(2082)</div></pre></td></tr></table></figure>
<h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><ul>
<li><strong>top [选项]</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@iZ23kbqqy35Z ~]<span class="comment"># top</span></div><div class="line">top - 18:30:57 up 255 days,  7:28,  1 user,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:  87 total,   1 running,  86 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s):  0.0%us,  0.2%sy,  0.0%ni, 99.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.2%st</div><div class="line">Mem:    377672k total,   322332k used,    55340k free,    32592k buffers</div><div class="line">Swap:   397308k total,    67192k used,   330116k free,    71900k cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                          </div><div class="line"> 6902 root      20   0 4372m 338m  12m S  0.3  4.4 135:51.36 java                                                                                                                              </div><div class="line"> 9903 root      20   0  881m  10m 6988 S  0.3  0.1 256:33.01 AliHids                                                                                                                           </div><div class="line">20201 root      20   0 63696 5596 3896 S  0.3  0.1  10:07.02 AliYunDun                                                                                                                         </div><div class="line">23664 root      20   0 15084 1136  848 R  0.3  0.0   0:00.01 top                                                                                                                               </div><div class="line">    1 root      20   0 19284 1508 1228 S  0.0  0.0   0:01.45 init                                                                                                                              </div><div class="line">    2 root      20   0     0    0    0 S  0.0  0.0   0:00.02 kthreadd                                                                                                                          </div><div class="line">    3 root      20   0     0    0    0 S  0.0  0.0   4:23.54 ksoftirqd/0                                                                                                                       </div><div class="line">    5 root       0 -20     0    0    0 S  0.0  0.0   0:00.00 kworker/0:0H                                                                                                                      </div><div class="line">    7 root      RT   0     0    0    0 S  0.0  0.0   0:01.79 migration/0                                                                                                                       </div><div class="line">    8 root      20   0     0    0    0 S  0.0  0.0   0:00.00 rcu_bh                                                                                                                            </div><div class="line">    9 root      20   0     0    0    0 S  0.0  0.0  25:32.77 rcu_sched                                                                                                                         </div><div class="line">   10 root      RT   0     0    0    0 S  0.0  0.0   1:59.69 watchdog/0                                                                                                                        </div><div class="line">   11 root      RT   0     0    0    0 S  0.0  0.0   1:42.38 watchdog/1                                                                                                                        </div><div class="line">   12 root      RT   0     0    0    0 S  0.0  0.0   0:01.76 migration/1</div></pre></td></tr></table></figure>
<ul>
<li><strong>第一行：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td> 18: 30 :57</td>
<td>系统当前时间 </td>
</tr>
<tr>
<td> up 255 days,  7:28</td>
<td>系统开机到现在经过了多少时间 </td>
</tr>
<tr>
<td>1 users</td>
<td>当前2用户在线 </td>
</tr>
<tr>
<td>load average: 0.00, 0.01, 0.05</td>
<td>系统1分钟、5分钟、15分钟的CPU负载信息</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>第二行：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>Tasks</td>
<td>任务; </td>
</tr>
<tr>
<td>87 total</td>
<td>很好理解，就是当前有87个任务，也就是87个进程。 </td>
</tr>
<tr>
<td>1 running</td>
<td>1个进程正在运行 </td>
</tr>
<tr>
<td>86 sleeping</td>
<td>86个进程睡眠 </td>
</tr>
<tr>
<td>0 stopped</td>
<td>停止的进程数 </td>
</tr>
<tr>
<td>0 zombie</td>
<td>僵死的进程数</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>第三行：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>Cpu(s)</td>
<td>表示这一行显示CPU总体信息 </td>
</tr>
<tr>
<td>0.0%us</td>
<td>用户态进程占用CPU时间百分比，不包含renice值为负的任务占用的CPU的时间。 </td>
</tr>
<tr>
<td>0.7%sy</td>
<td>内核占用CPU时间百分比 </td>
</tr>
<tr>
<td>0.0%ni</td>
<td>改变过优先级的进程占用CPU的百分比 </td>
</tr>
<tr>
<td>99.3%id</td>
<td>空闲CPU时间百分比 </td>
</tr>
<tr>
<td>0.0%wa</td>
<td>等待I/O的CPU时间百分比 </td>
</tr>
<tr>
<td>0.0%hi</td>
<td>CPU硬中断时间百分比 </td>
</tr>
<tr>
<td>0.0%si</td>
<td>CPU软中断时间百分比 </td>
</tr>
</tbody>
</table>
<p>注：这里显示数据是所有cpu的平均值，如果想看每一个cpu的处理情况，按1即可；折叠，再次按1；</p>
<ul>
<li><strong>第四行：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>Men</td>
<td>内存的意思 </td>
</tr>
<tr>
<td>8175320kk total</td>
<td>物理内存总量 </td>
</tr>
<tr>
<td>8058868k used</td>
<td>使用的物理内存量 </td>
</tr>
<tr>
<td>116452k free</td>
<td>空闲的物理内存量 </td>
</tr>
<tr>
<td>283084k buffers</td>
<td>用作内核缓存的物理内存量</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>第五行：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>Swap</td>
<td>交换空间 </td>
</tr>
<tr>
<td>6881272k total</td>
<td>交换区总量 </td>
</tr>
<tr>
<td>4010444k used</td>
<td>使用的交换区量 </td>
</tr>
<tr>
<td>2870828k free</td>
<td>空闲的交换区量 </td>
</tr>
<tr>
<td>4336992k cached</td>
<td>缓冲交换区总量</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>第六行：进程信息</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td>进程的ID </td>
</tr>
<tr>
<td>USER</td>
<td>进程所有者 </td>
</tr>
<tr>
<td>PR</td>
<td>进程的优先级别，越小越优先被执行 </td>
</tr>
<tr>
<td>NInice</td>
<td>值 </td>
</tr>
<tr>
<td>VIRT</td>
<td>进程占用的虚拟内存 </td>
</tr>
<tr>
<td>RES</td>
<td>进程占用的物理内存 </td>
</tr>
<tr>
<td>SHR</td>
<td>进程使用的共享内存 </td>
</tr>
<tr>
<td>S</td>
<td>进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数 </td>
</tr>
<tr>
<td>%CPU</td>
<td>进程占用CPU的使用率 </td>
</tr>
<tr>
<td>%MEM</td>
<td>进程使用的物理内存和总内存的百分比 </td>
</tr>
<tr>
<td>TIME+</td>
<td>该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。 </td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程启动命令名称</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>top命令交互操作指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>格式</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>q</td>
<td>退出top命令</td>
</tr>
<tr>
<td><space></space></td>
<td>立即刷新</td>
</tr>
<tr>
<td>s</td>
<td>设置刷新时间间隔</td>
</tr>
<tr>
<td>c</td>
<td>显示命令完全模式</td>
</tr>
<tr>
<td>t:</td>
<td>显示或隐藏进程和CPU状态信息</td>
</tr>
<tr>
<td>m</td>
<td>显示或隐藏内存状态信息</td>
</tr>
<tr>
<td>l</td>
<td>显示或隐藏uptime信息</td>
</tr>
<tr>
<td>f</td>
<td>增加或减少进程显示标志</td>
</tr>
<tr>
<td>S</td>
<td>累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+</td>
</tr>
<tr>
<td>P</td>
<td>按%CPU使用率排行</td>
</tr>
<tr>
<td>T</td>
<td>按MITE+排行</td>
</tr>
<tr>
<td>M</td>
<td>按%MEM排行</td>
</tr>
<tr>
<td>u</td>
<td>指定显示用户进程</td>
</tr>
<tr>
<td>r</td>
<td>修改进程renice值</td>
</tr>
<tr>
<td>k</td>
<td>kill进程</td>
</tr>
<tr>
<td>i</td>
<td>只显示正在运行的进程</td>
</tr>
<tr>
<td>W</td>
<td>保存对top的设置到文件~/.toprc，下次启动将自动调用toprc文件的设置。</td>
</tr>
<tr>
<td>h</td>
<td>帮助命令。</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
</tbody>
</table>
<p><strong>注：</strong>强调一下，使用频率最高的是P、T、M，因为通常使用top，我们就想看看是哪些进程最耗cpu资源、占用的内存最多；<br>注：通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列<br>如果只需要查看内存：可用free命令。只查看uptime信息（第一行），可用uptime命令；</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://jingyan.baidu.com/article/4d58d5412917cb9dd4e9c0ed.html" title="没创新" target="_blank" rel="external">linux怎样使用top命令查看系统状态</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker系列(一)docker基础命令与dockerfile文件创建镜像]]></title>
      <url>http://www.troylc.cc/docker/2016/07/17/docker-01.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期烦心事太多，包括工作、生活上的。归根结底还是自己不够强大，对于博客还没有坚持一个星期两篇博文，那就先坚持一个星期一篇吧，从简单开始，从放下开始，尽量让自己每时每个，坚持一些向上的的东西。对于这篇文章，docker目前一直在用，所以总结了一些关于docker基础性的东西。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="docker基础命令和含义"><a href="#docker基础命令和含义" class="headerlink" title="docker基础命令和含义"></a>docker基础命令和含义</h4><ol>
<li>docker version<br>显示 Docker 版本信息。</li>
<li>docker info<br>显示 Docker 系统信息，包括镜像和容器数。</li>
<li>docker search<br>从 Docker Hub 中搜索符合条件的镜像。</li>
<li>docker pull<br>从 Docker Hub 中拉取或者更新指定镜像。</li>
<li>docker login<br>按步骤输入在 Docker Hub 注册的用户名、密码和邮箱即可完成登录。</li>
<li>docker logout<br>运行后从指定服务器登出，默认为官方服务器。</li>
<li>docker images<br>列出本地所有镜像。其中 [name] 对镜像名称进行关键词查询。</li>
<li>docker ps<br>列出所有运行中容器。</li>
<li>docker rmi<br>从本地移除一个或多个指定的镜像。</li>
<li>docker rm<br>移除一个或多个指定的容器</li>
<li>docker history<br>查看指定镜像的创建历史。</li>
<li>docker create|start|stop|restart|pause|unpause<br>创建、启动、停止、重启、暂停和恢复一个或多个指定容器。</li>
<li>docker kill<br>杀死一个或多个指定容器进程。</li>
<li>docker events<br>从服务器拉取个人动态，可选择时间区间。</li>
<li>docker save<br>docker save &gt; “debian.tar”<br>将指定镜像保存成 tar 归档文件， docker load 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</li>
<li>docker load<br>docker load &lt; debian.tar<br>从 tar 镜像归档中载入镜像， docker save 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</li>
<li>docker export<br>docker export <container><br>将指定的容器保存成 tar 归档文件， docker import 的逆操作。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</container></li>
<li>docker import<br>docker import url|-  “o”&gt;[repository[:tag “o”&gt;]]<br>从归档文件（支持远程文件）创建一个镜像， export 的逆操作，可为导入镜像打上标签。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</li>
<li>docker top<br>docker top <running_container>  “o”&gt;[ps options]<br>查看一个正在运行容器进程，支持 ps 命令参数。</running_container></li>
<li>docker inspect<br>docker instpect nginx:latest<br>检查镜像或者容器的参数，默认返回 JSON 格式。</li>
<li>docker pause<br>暂停某一容器的所有进程。</li>
<li>docker unpause<br>docker unpause <container><br>恢复某一容器的所有进程。</container></li>
<li>docker tag<br>docker tag [options “o”&gt;] <image>[:tag “o”&gt;] [repository/ “o”&gt;][username/]name “o”&gt;[:tag]<br>标记本地镜像，将其归入某一仓库。</image></li>
<li>docker push<br>docker push laozhu/nginx:latest<br>将镜像推送至远程仓库，默认为 Docker Hub 。</li>
<li>docker logs<br>docker logs [options “o”&gt;] <container><br>docker logs -f -t –tail= “s2”&gt;”10” insane_babbage<br>获取容器运行时的输出日志。</container></li>
<li>docker run<br>docker run [options “o”&gt;] <image> [ “nb”&gt;command]  “o”&gt;[arg…]<br>启动一个容器，在其中运行指定命令。见下面详细说明。</image></li>
</ol>
<h4 id="docker-run命令的中的参数以及含义"><a href="#docker-run命令的中的参数以及含义" class="headerlink" title="docker run命令的中的参数以及含义"></a>docker run命令的中的参数以及含义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [options <span class="string">"o"</span>&gt;] &lt;image&gt; [ <span class="string">"nb"</span>&gt;<span class="built_in">command</span>]  <span class="string">"o"</span>&gt;[arg...]</div></pre></td></tr></table></figure>
<p>启动一个容器，在其中运行指定命令。<br>-a stdin 指定标准输入输出内容类型，可选 STDIN/<br>STDOUT / STDERR 三项；<br>-d 后台运行容器，并返回容器ID；<br>-i 以交互模式运行容器，通常与 -t 同时使用；<br>-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>–name=”nginx-lb” 为容器指定一个名称；<br>–dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致；<br>–dns-search example.com 指定容器DNS搜索域名，默认和宿主一致；<br>-h “mars” 指定容器的hostname；<br>-e username=”ritchie” 设置环境变量；<br>–env-file=[] 从指定文件读入环境变量；<br>–cpuset=”0-2” or –cpuset=”0,1,2”绑定容器到指定CPU运行；<br>-c 可以调整container的cpu优先级。默认情况下，所有的container享有相同的cpu优先级和cpu调度周期。但你可以通过Docker来通知内核给予某个或某几个container更多的cpu计算周期。<br>　　默认情况下，使用-c或者–cpu-shares 参数值为0，可以赋予当前活动container 1024个cpu共享周期。这个0值可以针对活动的container进行修改来调整不同的cpu循环周期。<br>　　比如，我们使用-c或者–cpu-shares =0启动了C0，C1，C2三个container，使用-c/–cpu-shares=512启动了C3.这时，C0，C1，C2可以100%的使用CPU资源(1024)，但C3只能使用50%的CPU资源(512)。如果这个host的OS是时序调度类型的，每个CPU时间片是100微秒，那么C0，C1，C2将完全使用掉这100微秒，而C3只能使用50微秒。<br>-m 可以很方便的调整container所使用的内存资源。如果host支持swap内存，那么使用-m可以设定比host物理内存还大的值。<br>–net=”bridge” 指定容器的网络连接类型，支持 bridge /host / none container:<name|id> 四种类型；<br>–expose=[] 可以让container接受外部传入的数据。container内监听的port不需要和外部host的port相同。比如说在container内部，一个HTTP服务监听在80端口，对应外部host的port就可能是49880.<br>　　操作人员可以使用–expose，让新的container访问到这个container。具体有三个方式：<br>　　1. 使用-p来启动container。<br>　　2. 使用-P来启动container。<br>　　3. 使用–link来启动container。<br>-p 如果使用-p或者-P，那么container会开发部分端口到host，只要对方可以连接到host，就可以连接到container内部。当使用-P时，docker会在host中随机从49153 和65535之间查找一个未被占用的端口绑定到container。你可以使用docker port来查找这个随机绑定端口。<br>–link=[] 当你使用–link方式时，作为客户端的container可以通过私有网络形式访问到这个container。同时Docker会在客户端的container中设定一些环境变量来记录绑定的IP和PORT。<br>-v=[]: docker可以支持把一个宿主机上的目录挂载到镜像里。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</div></pre></td></tr></table></figure></name|id></p>
<p>通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。<br>现在镜像内就可以共享宿主机里的文件了。<br>默认挂载的路径权限为读写。如果指定为只读可以用：ro<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -v /home/dock/Downloads:/usr/Downloads:ro ubuntu64 /bin/bash</div></pre></td></tr></table></figure></p>
<p>docker还提供了一种高级的用法。叫数据卷。<br>数据卷：“其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的”。感觉像是由一个容器定义的一个数据挂载信息。其他的容器启动可以直接挂载数据卷容器中定义的挂载信息。<br>看示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -v /home/dock/Downloads:/usr/Downloads  --name dataVol ubuntu64 /bin/bash</div></pre></td></tr></table></figure></p>
<p>创建一个普通的容器。用–name给他指定了一个名（不指定的话会生成一个随机的名子）。<br>再创建一个新的容器，来使用这个数据卷。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --volumes-from dataVol ubuntu64 /bin/bash</div></pre></td></tr></table></figure></p>
<p>–volumes-from用来指定要从哪个数据卷来挂载数据。<br>-u: USERcontainer中默认的用户是root。但是开发人员创建新的用户之后，这些新用户也是可以使用的。开发人员可以通过Dockerfile的USER设定默认的用户，操作人员可以通过”-u”来覆盖这些参数。<br>-w: WORKDIR<br>container中默认的工作目录是根目录(/)。开发人员可以通过Dockerfile的WORKDIR来设定默认工作目录，操作人员可以通过”-w”来覆盖默认的工作目录。</p>
<h4 id="通过Dockerfile构建镜像"><a href="#通过Dockerfile构建镜像" class="headerlink" title="通过Dockerfile构建镜像"></a>通过Dockerfile构建镜像</h4><h5 id="Dockerfiles基础说明"><a href="#Dockerfiles基础说明" class="headerlink" title="Dockerfiles基础说明"></a>Dockerfiles基础说明</h5><p>Dockerfiles是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。它们简化了从头到尾的流程并极大的简化了 部署工作。Dockerfile从FROM命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。</p>
<h5 id="Dockerfile指令介绍："><a href="#Dockerfile指令介绍：" class="headerlink" title="Dockerfile指令介绍："></a>Dockerfile指令介绍：</h5><p><strong>FROM</strong><br>  语法：FROM <image>[:<tag>]<br>  解释：设置要制作的镜像基于哪个镜像，FROM指令必须是整个Dockerfile的第一个指令，如果指定的镜像不存在默认会自动从Docker Hub上下载。<br><strong>MAINTAINER</strong><br>  语法：MAINTAINER <name><br>  解释：MAINTAINER指令允许你给将要制作的镜像设置作者信息<br><strong>RUN</strong><br>  语法：①RUN <command>        #将会调用/bin/sh -c <command><br>  RUN [“executable”, “param1”, “param2”]    #将会调用exec执行，以避免有些时候shell方式执行时的传递参数问题，而且有些基础镜像可能不包含/bin/sh<br>  解释：RUN指令会在一个新的容器中执行任何命令，然后把执行后的改变提交到当前镜像，提交后的镜像会被用于Dockerfile中定义的下一步操作，RUN中定义的命令会按顺序执行并提交，这正是Docker廉价的提交和可以基于镜像的任何一个历史点创建容器的好处，就像版本控制工具一样。<br><strong>CMD</strong><br>  语法：①CMD [“executable”, “param1”, “param2”]    #将会调用exec执行，首选方式<br>  CMD [“param1”, “param2”]        #当使用ENTRYPOINT指令时，为该指令传递默认参数<br>  CMD <command> [ <param1>|<param2> ]        #将会调用/bin/sh -c执行<br>  解释：CMD指令中指定的命令会在镜像运行时执行，在Dockerfile中只能存在一个，如果使用了多个CMD指令，则只有最后一个CMD指令有效。当出现ENTRYPOINT指令时，CMD中定义的内容会作为ENTRYPOINT指令的默认参数，也就是说可以使用CMD指令给ENTRYPOINT传递参数。<br>  注意：RUN和CMD都是执行命令，他们的差异在于RUN中定义的命令会在执行docker build命令创建镜像时执行，而CMD中定义的命令会在执行docker run命令运行镜像时执行，另外使用第一种语法也就是调用exec执行时，命令必须为绝对路径。<br><strong>EXPOSE</strong><br>  语法：EXPOSE <port> [ …]<br>  解释：EXPOSE指令用来告诉Docker这个容器在运行时会监听哪些端口，Docker在连接不同的容器(使用–link参数)时使用这些信息。<br><strong>ENV</strong><br>  语法：ENV <key> <value><br>  解释：ENV指令用于设置环境变量，在Dockerfile中这些设置的环境变量也会影响到RUN指令，当运行生成的镜像时这些环境变量依然有效，如果需要在运行时更改这些环境变量可以在运行docker run时添加–env <key>=<value>参数来修改。<br>  注意：最好不要定义那些可能和系统预定义的环境变量冲突的名字，否则可能会产生意想不到的结果。<br><strong>ADD</strong><br>  语法：ADD <src> <dest><br>  解释：ADD指令用于从指定路径拷贝一个文件或目录到容器的指定路径中，<src>是一个文件或目录的路径，也可以是一个url，路径是相对于该Dockerfile文件所在位置的相对路径，<dest>是目标容器的一个绝对路径，例如/home/yooke/Docker/Dockerfile这个文件中定义的，那么ADD /data.txt /db/指令将会尝试拷贝文件从/home/yooke/Docker/data.txt到将要生成的容器的/db/data.txt，且文件或目录的属组和属主分别为uid和gid为0的用户和组，如果是通过url方式获取的文件，则权限是600。<br>  注意：①如果执行docker build – &lt; somefile即通过标准输入来创建时，ADD指令只支持url方式，另外如果url需要认证，则可以通过RUN wget …或RUN curl …来完成，ADD指令不支持认证。<br>  <src>路径必须与Dockerfile在同级目录或子目录中，例如不能使用ADD ../somepath，因为在执行docker build时首先做的就是把Dockerfile所在目录包含子目录发送给docker的守护进程。<br>  如果<src>是一个url且<dest>不是以”/“结尾，则会下载文件并重命名为<dest>。<br>  如果<src>是一个url且<dest>以“/”结尾，则会下载文件到<dest>/<filename>，url必须是一个正常的路径形式，“<a href="http://example.com”像这样的url是不能正常工作的。" target="_blank" rel="external">http://example.com”像这样的url是不能正常工作的。</a><br>  如果<src>是一个本地的压缩包且<dest>是以“/”结尾的目录，则会调用“tar -x”命令解压缩，如果<dest>有同名文件则覆盖，但<src>是一个url时不会执行解压缩。<br><strong>COPY</strong><br>  语法：COPY <src> <dest><br>  解释：用法与ADD相同，不过<src>不支持使用url，所以在使用docker build – &lt; somefile时该指令不能使用。<br><strong>ENTRYPOINT</strong><br>  语法：ENTRYPOINT [“executable”, “param1”, “param2”]        #将会调用exec执行，首选方式<br>  ENTRYPOINT command param1 param2             #将会调用/bin/sh -c执行<br>  解释：ENTRYPOINT指令中指定的命令会在镜像运行时执行，在Dockerfile中只能存在一个，如果使用了多个ENTRYPOINT指令，则只有最后一个指令有效。ENTRYPOINT指令中指定的命令(exec执行的方式)可以通过docker run来传递参数，例如docker run <images> -l启动的容器将会把-l参数传递给ENTRYPOINT指令定义的命令并会覆盖CMD指令中定义的默认参数(如果有的话)，但不会覆盖该指令定义的参数，例如ENTRYPOINT [“ls”,”-a”]，CMD [“/etc”],当通过docker run <image>启动容器时该容器会运行ls -a /etc命令，当使用docker run <image> -l启动时该容器会运行ls -a -l命令，-l参数会覆盖CMD指令中定义的/etc参数。<br>  注意：<br>   ①当使用ENTRYPOINT指令时生成的镜像运行时只会执行该指令指定的命令。<br>   ②当出现ENTRYPOINT指令时CMD指令只可能(当ENTRYPOINT指令使用exec方式执行时)被当做ENTRYPOINT指令的参数使用，其他情况则会被忽略。<br><strong>VOLUME</strong><br>  语法：VOLUME [“samepath”]<br>  解释：VOLUME指令用来设置一个挂载点，可以用来让其他容器挂载以实现数据共享或对容器数据的备份、恢复或迁移，具体用法请参考其他文章。<br><strong>USER</strong><br>  语法：USER [username|uid]<br>  解释：USER指令用于设置用户或uid来运行生成的镜像和执行RUN指令。<br><strong>WORKDIR</strong><br>  语法：WORKDIR /path/to/workdir<br>  解释：WORKDIR指令用于设置Dockerfile中的RUN、CMD和ENTRYPOINT指令执行命令的工作目录(默认为/目录)，该指令在Dockerfile文件中可以出现多次，如果使用相对路径则为相对于WORKDIR上一次的值，例如WORKDIR /data，WORKDIR logs，RUN pwd最终输出的当前目录是/data/logs。<br><strong>ONBUILD</strong><br>  语法：ONBUILD [INSTRUCTION]<br>  解释：ONBUILD指令用来设置一些触发的指令，用于在当该镜像被作为基础镜像来创建其他镜像时(也就是Dockerfile中的FROM为当前镜像时)执行一些操作，ONBUILD中定义的指令会在用于生成其他镜像的Dockerfile文件的FROM指令之后被执行，上述介绍的任何一个指令都可以用于ONBUILD指令，可以用来执行一些因为环境而变化的操作，使镜像更加通用。<br>  注意：<br>   ①ONBUILD中定义的指令在当前镜像的build中不会被执行。<br>   ②可以通过查看docker inspeat <image>命令执行结果的OnBuild键来查看某个镜像ONBUILD指令定义的内容。<br>   ③ONBUILD中定义的指令会当做引用该镜像的Dockerfile文件的FROM指令的一部分来执行，执行顺序会按ONBUILD定义的先后顺序执行，如果ONBUILD中定义的任何一个指令运行失败，则会使FROM指令中断并导致整个build失败，当所有的ONBUILD中定义的指令成功完成后，会按正常顺序继续执行build。<br>   ④ONBUILD中定义的指令不会继承到当前引用的镜像中，也就是当引用ONBUILD的镜像创建完成后将会清除所有引用的ONBUILD指令。<br>   ⑤ONBUILD指令不允许嵌套，例如ONBUILD ONBUILD ADD . /data是不允许的。<br>   ⑥ONBUILD指令不会执行其定义的FROM或MAINTAINER指令。</image></image></image></images></src></dest></src></src></dest></dest></src></filename></dest></dest></src></dest></dest></src></src></dest></src></dest></src></value></key></value></key></port></param2></param1></name></tag></image></p>
<h4 id="dockerfile案例"><a href="#dockerfile案例" class="headerlink" title="dockerfile案例"></a>dockerfile案例</h4><h5 id="示例一：创建一个MongoDB的镜像"><a href="#示例一：创建一个MongoDB的镜像" class="headerlink" title="示例一：创建一个MongoDB的镜像"></a>示例一：创建一个MongoDB的镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment"># Dockerfile to build MongoDB container images</span></div><div class="line"><span class="comment"># Based on Ubuntu</span></div><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment"># Set the base image to Ubuntu</span></div><div class="line">FROM ubuntu</div><div class="line"><span class="comment"># File Author / Maintainer</span></div><div class="line">MAINTAINER Example McAuthor</div><div class="line"><span class="comment"># Update the repository sources list</span></div><div class="line">RUN apt-get update</div><div class="line"><span class="comment">################## BEGIN INSTALLATION ######################</span></div><div class="line"><span class="comment"># Install MongoDB Following the Instructions at MongoDB Docs</span></div><div class="line"><span class="comment"># Ref: http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/</span></div><div class="line"><span class="comment"># Add the package verification key</span></div><div class="line">RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class="line"><span class="comment"># Add MongoDB to the repository sources list</span></div><div class="line">RUN <span class="built_in">echo</span> <span class="string">'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen'</span> | tee /etc/apt/sources.list.d/mongodb.list</div><div class="line"><span class="comment"># Update the repository sources list once more</span></div><div class="line">RUN apt-get update</div><div class="line"><span class="comment"># Install MongoDB package (.deb)</span></div><div class="line">RUN apt-get install -y mongodb-10gen</div><div class="line"><span class="comment"># Create the default data directory</span></div><div class="line">RUN mkdir -p /data/db</div><div class="line"><span class="comment">##################### INSTALLATION END #####################</span></div><div class="line"><span class="comment"># Expose the default port</span></div><div class="line">EXPOSE 27017</div><div class="line"><span class="comment"># Default port to execute the entrypoint (MongoDB)</span></div><div class="line">CMD [<span class="string">"--port 27017"</span>]</div><div class="line"><span class="comment"># Set default container command</span></div><div class="line">ENTRYPOINT usr/bin/mongod</div></pre></td></tr></table></figure>
<p>使用上述的Dockerfile，我们已经可以开始构建MongoDB镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker build -t my_mongodb .</div></pre></td></tr></table></figure></p>
<h5 id="示例二：创建一个JAVA-Tomcat的镜像"><a href="#示例二：创建一个JAVA-Tomcat的镜像" class="headerlink" title="示例二：创建一个JAVA Tomcat的镜像"></a>示例二：创建一个JAVA Tomcat的镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># VERSION 0.0.1</span></div><div class="line"><span class="comment"># 默认ubuntu server长期支持版本，当前是12.04</span></div><div class="line">FROM ubuntu</div><div class="line"><span class="comment"># 签名啦</span></div><div class="line">MAINTAINER yongboy <span class="string">"yongboy@gmail.com"</span></div><div class="line"></div><div class="line"><span class="comment"># 更新源，安装ssh server</span></div><div class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu precise main universe"</span>&gt; /etc/apt/sources.list</div><div class="line">RUN apt-get update</div><div class="line"></div><div class="line">RUN apt-get install -y openssh-server</div><div class="line">RUN mkdir -p /var/run/sshd</div><div class="line"></div><div class="line"><span class="comment"># 设置root ssh远程登录密码为123456</span></div><div class="line">RUN <span class="built_in">echo</span> <span class="string">"root:123456"</span> | chpasswd </div><div class="line"></div><div class="line"><span class="comment"># install vim</span></div><div class="line">RUN apt-get -y remove vim-common</div><div class="line">RUN apt-get -y install vim</div><div class="line">  </div><div class="line"><span class="comment"># Install curl  </span></div><div class="line">RUN apt-get -y install curl</div><div class="line">RUN </div><div class="line">rm -rf /var/lib/apt/lists/*  </div><div class="line"><span class="comment"># Install JDK 7  </span></div><div class="line">RUN <span class="built_in">cd</span> /tmp &amp;&amp;  curl -L <span class="string">'http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz'</span> -H <span class="string">'Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile'</span> | tar -xz  </div><div class="line">RUN mkdir -p /usr/lib/jvm  </div><div class="line">RUN mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/  </div><div class="line">  </div><div class="line"><span class="comment"># Set Oracle JDK 7 as default Java  </span></div><div class="line">RUN update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300    </div><div class="line">RUN update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300 </div><div class="line">  </div><div class="line">ENV JAVA_HOME /usr/lib/jvm/java-7-oracle/  </div><div class="line">  </div><div class="line"><span class="comment"># Install tomcat7  </span></div><div class="line">RUN <span class="built_in">cd</span> /tmp &amp;&amp; curl -L <span class="string">'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz'</span> | tar -xz  </div><div class="line">RUN mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/  </div><div class="line">  </div><div class="line">ENV CATALINA_HOME /opt/tomcat7  </div><div class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin  </div><div class="line">  </div><div class="line">ADD tomcat7.sh /etc/init.d/tomcat7  </div><div class="line">RUN chmod 755 /etc/init.d/tomcat7  </div><div class="line"></div><div class="line"><span class="comment"># 容器需要开放SSH 22端口</span></div><div class="line">EXPOSE 22</div><div class="line"></div><div class="line"><span class="comment"># 容器需要开放Tomcat 8080端口</span></div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line"><span class="comment"># 设置Tomcat7初始化运行，SSH终端服务器作为后台运行</span></div><div class="line">ENTRYPOINT service tomcat7 start &amp;&amp; /usr/sbin/sshd -D &amp;&amp; tail -f /opt/tomcat7/logs/catalina.out</div></pre></td></tr></table></figure>
<p><strong>需要注意：</strong><br>ENTRYPOINT，表示镜像在初始化时需要执行的命令，不可被重写覆盖，需谨记<br>CMD，表示镜像运行默认参数，可被重写覆盖<br>ENTRYPOINT/CMD都只能在文件中存在一次，并且最后一个生效 多个存在，只有最后一个生效，其它无效！<br>需要初始化运行多个命令，彼此之间可以使用 &amp;&amp; 隔开，但最后一个须要为无限运行的命令，需切记！<br>ENTRYPOINT/CMD，一般两者可以配合使用，比如：<br>ENTRYPOINT [“/usr/sbin/sshd”]<br>CMD [“-D”]<br>在Docker　daemon模式下，无论你是使用ENTRYPOINT，还是CMD，最后的命令，一定要是当前进程需要一直运行的，才能够防容器退出。<br>以下无效方式：<br> ENTRYPOINT service tomcat7 start #运行几秒钟之后，容器就会退出<br> CMD service tomcat7 start #运行几秒钟之后，容器就会退出<br>这样有效：<br>ENTRYPOINT service tomcat7 start &amp;&amp; tail -f /var/lib/tomcat7/logs/catalina.out<br>或者<br>CMD service tomcat7 start &amp;&amp; tail -f /var/lib/tomcat7/logs/catalina.out<br>这样也有效：<br> ENTRYPOINT [“/usr/sbin/sshd”]<br> CMD [“-D”]<br>具体请参考官方文档：Dockerfiles for Images<br>构建镜像</p>
<p>脚本写好了，需要转换成镜像：<br>docker build -t yongboy/java7 .<br>-t： 为构建的镜像制定一个标签，便于记忆/索引等<br>. ： 指定Dockerfile文件在当前目录下<br>网速不太好，会等待很长时间。很多操作可能需要科学上网，逼得我只能一直挂着VPN，方能畅通无阻。<br>构建镜像完成之后，看看运行效果：<br>docker run -d -p 22 -p 8080:8080 yongboy/java7<br>在运行命令中，还得需要显式指定 -p 22 -p 8080:8080，否则在Docker 0.8.1版本中不会主动映射到宿主机上。据悉在Docker 0.4.8版本时，就不担心这个问题。 或者，您要有好的方式，不妨告知于我，谢谢。<br>在Dockerfile中，若没有使用ENTRYPOINT/CMD指令，若运行多个命令，可以这样做：<br>docker run -d -p 22 -p 8080 yongboy/java7 /bin/sh -c “service tomcat7 start &amp;&amp; /usr/sbin/sshd -D”<br>提交/保存镜像</p>
<p>创建好的镜像，可以保存到索引仓库中，便于下次使用（当然，我们直接共享Dockerfile，是最简单的事情，:)) ），但毕竟镜像可以做到开箱即用。<br><a href="https://index.docker.io/" target="_blank" rel="external">https://index.docker.io/</a> 注册一个账号，例如yongboy<br>构建镜像<br>docker build -t yongboy/java7 .<br>上面已经构建OK的话，可省略此步。<br>登陆<br>docker login<br>提交到Docker索引仓库<br>docker push yongboy/java7<br>现在可以起来喝杯热水，出去溜达会，也不一定能够上传完毕，那叫一个慢啊！<br>上传OK的话，可以得到类似地址：<a href="https://index.docker.io/u/yongboy/java7/" target="_blank" rel="external">https://index.docker.io/u/yongboy/java7/</a><br>如何使用镜像<br>docker pull yongboy/java7<br>剩下的步骤，就很简单了。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://wenku.baidu.com/link?url=wP5bW_rRwEDM71Uum8liLgL_aLTBV1JX2tjEijExkRqs-mvcSJdyhmtGoAhfU9v45LU0k0ltyzzCEk67KYxpatINlftgntGl5zRbdEgfJAO" title="命令" target="_blank" rel="external">docker命令语句</a><br><a href="http://my.oschina.net/2xixi/blog/516951" title="dockerfile详解" target="_blank" rel="external">dockerfile详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux系列(一)-linux下的mysql定时备份-nfs异地存储]]></title>
      <url>http://www.troylc.cc/linux/2016/07/10/linux-01.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近一直忙着工作方面的事，没时间来总结和更新博客，本来想法是想一周，至少两篇关于技术方面的博文，原来一起想写java方面的文章，一直没有总结好。后面的文章，都是有经过自己新手实践过。希望能和大家一起坚持下来。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>基于docker容器的mysql定时备份-nfs异地存储，正好是最近工作中实践过，所以拿来分享一下，</p>
<h4 id="首先nfs网络文件系统搭建："><a href="#首先nfs网络文件系统搭建：" class="headerlink" title="首先nfs网络文件系统搭建："></a>首先nfs网络文件系统搭建：</h4><p><strong>安装：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install nfs-utils rpcbind</div></pre></td></tr></table></figure></p>
<p>一般系统安装后，都会安装这个必备的软件的，设置开机启动:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@master-zookeeper ~]<span class="comment">#systemctl enable nfs 或者 systemctl enable nfs-server.service</span></div><div class="line">[root@master-zookeeper ~]<span class="comment">#systemctl enable rpcbind</span></div></pre></td></tr></table></figure></p>
<h5 id="一、环境介绍："><a href="#一、环境介绍：" class="headerlink" title="一、环境介绍："></a>一、环境介绍：</h5><ul>
<li>三台台Vmware虚拟机(网络模式为nat)：<br>服务器：(service)192.168.159.71(centos7)<br>客户端：(client1)192.168.159.72(centos7)<br>客户端：(client2)192.168.159.73(centos7)</li>
<li>升级这三台（192.168.159.71/72/73）主机的内核到最新版本。为安装最新的docker版本<br>升级内核(在连网的环境下)<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></div><div class="line">[root@localhost bin]<span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></div><div class="line">[root@localhost bin]<span class="comment"># yum --enablerepo=elrepo-kernel install kernel-ml</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>也可以通过此<a href="http://pkgs.org/download/kernel-devel网站手工下载安装" target="_blank" rel="external">http://pkgs.org/download/kernel-devel网站手工下载安装</a><br>重要：目前内核还是默认的版本，如果在这一步完成后你就直接reboot了，重启后使用的内核版本还是默认的3.10，不会使用新的4.3，想修改启动的顺序，需要进行下一步</p>
<ul>
<li>查看默认启动顺序<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># awk -F\' '$1=="menuentry " &#123;print $2&#125;' /etc/grub2.cfg</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>默认启动的顺序是从0开始，但我们新内核是从头插入（目前位置在0，而3.10的是在1），所以需要选择0，如果想生效最新的内核，需要<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># grub2-set-default 0   我这里是1</span></div></pre></td></tr></table></figure></p>
<h5 id="二、服务器端配置（192-168-159-71）："><a href="#二、服务器端配置（192-168-159-71）：" class="headerlink" title="二、服务器端配置（192.168.159.71）："></a>二、服务器端配置（192.168.159.71）：</h5><ul>
<li><p>创建共享目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@master-zookeeper ~]<span class="comment"># mkdir –p /nfs-data/dmp/db-bak/ /nfs-data/dmp/data/ /nfs-data/dmp/frequency/</span></div></pre></td></tr></table></figure>
</li>
<li><p>NFS文件配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@master-zookeeper ~]<span class="comment"># vim /etc/exports</span></div><div class="line">/nfs-data/dmp/db-bak/ 192.168.159.*(rw,no_root_squash,sync,no_subtree_check)</div><div class="line">/nfs-data/dmp/data/ 192.168.159.*(rw,no_root_squash,sync,no_subtree_check)</div><div class="line">/nfs-data/dmp/frequency/ 192.168.159.*(rw,no_root_squash,sync,no_subtree_check)</div><div class="line">:wq(保存)</div></pre></td></tr></table></figure>
</li>
<li><p>使配置生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@master-zookeeper ~]<span class="comment"># exportfs -r</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@master-zookeeper ~]<span class="comment"># systemctl start rpcbind</span></div><div class="line">[root@master-zookeeper ~]<span class="comment"># systemctl start nfs-server.service</span></div><div class="line">如果已经启动则重启：</div><div class="line">[root@master-zookeeper ~]<span class="comment"># systemctl restart rpcbind</span></div><div class="line">[root@master-zookeeper ~]<span class="comment"># systemctl restart nfs-server.service</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="三、客户端挂载（192-168-159-72、192-168-159-73）："><a href="#三、客户端挂载（192-168-159-72、192-168-159-73）：" class="headerlink" title="三、客户端挂载（192.168.159.72、192.168.159.73）："></a>三、客户端挂载（192.168.159.72、192.168.159.73）：</h5><ul>
<li><p>创建需要挂载的目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># mkdir –p /nfs-data/dmp/db-bak/ /nfs-data/dmp/data/ /nfs-data/dmp/frequency/</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试挂载（两台客户端上执行以下命令）： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@node02 ~]<span class="comment"># showmount -e 192.168.159.71</span></div><div class="line">Export list <span class="keyword">for</span> 192.168.159.71:</div><div class="line">/nfs-data/dmp/frequency 192.168.159.*</div><div class="line">/nfs-data/dmp/data      192.168.159.*</div><div class="line">/nfs-data/dmp/db-bak    192.168.159.*</div></pre></td></tr></table></figure>
</li>
<li><p>挂载服务器上的三个目录：<br>客户端在挂载的时候遇到的一个问题如下，可能是网络不太稳定，NFS默认是用UDP协议，换成TCP协议即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node02 ~]<span class="comment">#  mount -t nfs 192.168.159.71:/nfs-data/dmp/db-bak /nfs-data/dmp/db-bak -o proto=tcp -o nolock</span></div><div class="line">[root@node02 ~]<span class="comment"># mount -t nfs 192.168.159.71:/nfs-data/dmp/data /nfs-data/dmp/data -o proto=tcp -o nolock</span></div><div class="line">[root@node02 ~]<span class="comment"># mount -t nfs 192.168.159.71:/nfs-data/dmp/frequency /nfs-data/dmp/frequency -o proto=tcp -o nolock</span></div><div class="line">[root@node02 ~]<span class="comment"># mount</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>两台客户端执行完以上命令后，在159.72上看挂载情况：<br>如果信息如上显示则应该是挂载成功!</p>
<h5 id="四、NFS加到启动项，让开机自动mount"><a href="#四、NFS加到启动项，让开机自动mount" class="headerlink" title="四、NFS加到启动项，让开机自动mount"></a>四、NFS加到启动项，让开机自动mount</h5><p>在两台客户端（192.168.159.72、192.168.159.73）上执行以下操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@node02 ~]<span class="comment"># vim /etc/fstab</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># /etc/fstab</span></div><div class="line"><span class="comment"># Created by anaconda on Fri Mar  4 23:01:47 2016</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></div><div class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></div><div class="line"><span class="comment">#</span></div><div class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</div><div class="line">UUID=c1781921-85a8-4237-875c-8e4ebecf0e14 /boot                   xfs     defaults        0 0</div><div class="line">/dev/mapper/centos-home /home                   xfs     defaults        0 0</div><div class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</div><div class="line">/dev/sda4 /nfs-data xfs nosuid,nodev,nofail,x-gvfs-show 0 0</div><div class="line">192.168.159.71:/nfs-data/dmp/db-bak/ /nfs-data/dmp/db-bak/ nfs auto,noatime,nolock,<span class="built_in">bg</span>,nfsvers=4,intr,tcp,actimeo=1800 0 0</div><div class="line">192.168.159.71:/nfs-data/dmp/data/ /nfs-data/dmp/data/ nfs auto,noatime,nolock,<span class="built_in">bg</span>,nfsvers=4,intr,tcp,actimeo=1800 0 0</div><div class="line">192.168.159.71:/nfs-data/dmp/frequency/ /nfs-data/dmp/frequency/ nfs auto,noatime,nolock,<span class="built_in">bg</span>,nfsvers=4,intr,tcp,actimeo=1800 0 0</div><div class="line">:wq(保存)</div></pre></td></tr></table></figure></p>
<p>上述的fstab中的配置：<br><strong>192.168.159.71:/nfs-data/dmp/db-bak/ /nfs-data/dmp/db-bak/ nfs auto,noatime,nolock,bg,nfsvers=4,intr,tcp,actimeo=1800 0 0</strong><br>的含义是：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含意  </th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.159.71:/nfs-data/dmp/db-bak/</td>
<td>是目标NFS服务器的IP（或域名）和NFS共享的路径</td>
</tr>
<tr>
<td>/nfs-data/dmp/db-bak/</td>
<td>是NFS客户端要mount挂载的路径（一般挂载到/mnt下面某个路径，此处只是测试，就随便挂了）</td>
</tr>
<tr>
<td>nfs</td>
<td>表示挂载的文件系统类型时NFS </td>
</tr>
<tr>
<td>auto</td>
<td>自动挂载；</td>
</tr>
<tr>
<td>noatime</td>
<td>不要添加access time==上次访问文件时间</td>
</tr>
<tr>
<td>nolock</td>
<td>禁止文件加锁。有时候访问旧的NFS服务器需要此参数。</td>
</tr>
<tr>
<td>bg</td>
<td>挂载作为后台服务去运行，如果第一次挂载失败了。默认是off的。</td>
</tr>
<tr>
<td>nfsvers=4</td>
<td>指定NFS协议的版本。</td>
</tr>
<tr>
<td>intr</td>
<td>允许NFS请求被中断，如果服务器挂了或连不上</td>
</tr>
<tr>
<td>tcp</td>
<td>指定NFS（不适用默认的UDP而改用）TCP</td>
</tr>
<tr>
<td>actimeo=1800</td>
<td>acregmin==acregmax==acdirmin====acdirmax，都设置为1800s=30分钟，即文件缓存时间为30分钟</td>
</tr>
<tr>
<td>0</td>
<td>不需要NFS的CacheFS</td>
</tr>
<tr>
<td>0</td>
<td>不需要NFS的CacheFS</td>
</tr>
</tbody>
</table>
<p>本次测试通过以上测试，重启后，可以自动挂载</p>
<h4 id="对Mysql进行定时备份"><a href="#对Mysql进行定时备份" class="headerlink" title="对Mysql进行定时备份"></a>对Mysql进行定时备份</h4><h5 id="利用linux的定时器crontab对mysql进行定时备份"><a href="#利用linux的定时器crontab对mysql进行定时备份" class="headerlink" title="利用linux的定时器crontab对mysql进行定时备份"></a>利用linux的定时器crontab对mysql进行定时备份</h5><ul>
<li>crontab -e 是新建或者修改 -l是查看定时器<br> 通过NFS创建一个db-bak文件，做为异地备份传输（可存储在71、72、73这三台机器的/nfs-data/dmp/db-bak）。具体怎么操作，参考上面nfs网络文件系统搭建章节</li>
<li><p>在db-bak文件下创建一下备份的shell脚本，内容如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@node2 frequency]<span class="comment"># cat backupDmp.sh </span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#按时间生成变量strName作为文件名</span></div><div class="line">strName=`date +%Y-%m-%d-%H-%M-%S`</div><div class="line"><span class="comment">#在运行在docker环境的mysql中执行备份命令 </span></div><div class="line">docker <span class="built_in">exec</span> dmpmysql mysqldump -u root -p123456 device&gt;/nfs-data/dmp/db-bak/<span class="variable">$strName</span>-device.sql</div><div class="line">[root@node2 frequency]<span class="comment"># chmod +x backupDmp.sh  (修改执行权限)</span></div></pre></td></tr></table></figure>
</li>
<li><p>在执行以上脚本前，需要mysql容器把/nfs-data/dmp/db-bak/挂到到容器里。所以如果是已经启动的容器，请重新挂载该目录。(参考docker容器挂载目录)</p>
</li>
<li>加入到linux的crontab任务调度中<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@node2 frequency]<span class="comment"># crontab -e</span></div><div class="line"><span class="comment">#每隔两天，在2.30分钟执行一次</span></div><div class="line">30 2 */2 * * /nfs-data/dmp/db-bak/backupDmp.sh</div><div class="line"><span class="comment">#每三分钟执行一次</span></div><div class="line"><span class="comment">#*/3 * * * * /nfs-data/dmp/db-bak/backupDmp.sh</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行以上步骤后，数据备份会每隔两自动备份，并通过NFS异地备份到别的机器上</p>
<h4 id="Mysql定时删除上月备份"><a href="#Mysql定时删除上月备份" class="headerlink" title="Mysql定时删除上月备份"></a>Mysql定时删除上月备份</h4><ul>
<li><p>在db-bak文件下创建一下备份的shell脚本，内容如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@node2 frequency]<span class="comment"># vim backupDeleteDmp-Input.sh </span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#获取当前时间的上一个月的月份数据为daleteTime作为文件名</span></div><div class="line">deleteTime=`date -d <span class="string">"last month"</span> +%Y-%m`</div><div class="line"><span class="comment">#执行删除上月备份的数据</span></div><div class="line">rm -rf <span class="variable">$deleteTime</span>*.sql</div><div class="line">[root@node2 frequency]<span class="comment"># chmod +x backupDeleteDmp-Input.sh  (修改执行权限)</span></div></pre></td></tr></table></figure>
</li>
<li><p>加入到linux的crontab任务调度中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node2 frequency]<span class="comment"># crontab -e</span></div><div class="line"><span class="comment">#每隔月16号，在2.30分钟执行删除上月备份数据</span></div><div class="line">30 2 16 * * /nfs-data/dmp/db-bak/backupDeleteDmp-Input.sh</div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行以上步骤后，数据备份会每个月16号会自动删除上月的备份，并通过NFS异地删除别的机器上的备份</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(七)-hexo-利用git多PC间同步博客]]></title>
      <url>http://www.troylc.cc/hexo/2016/06/29/Hexo-7.html</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>如果是两PC，比如单位和家，同时都想更新blog。而由于hexo没有动态的后台，而且全部文件都在本地生成，所以如果在A电脑上发表了A1文章后，在B电脑上又写了篇B1文章，在B电脑上上传后你会发现只有B1文章而A1文章没了（因为B电脑上没有A1文章的md文件），所以多台电脑同时用来写文章的时候，需要解决文章同步问题。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>下面介绍的是如何利用第三方代码托管平台进行同步，以github为例：</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>在A电脑和B电脑上都安装git以及ssh密钥配置与连接，如果不会，可参考<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html#%E5%AE%89%E8%A3%85Git" title="GIT安装">GIT安装</a>和<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html#%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5" title="配置SSH密钥">配置SSH密钥</a></p>
<h4 id="同步最新的blog到github"><a href="#同步最新的blog到github" class="headerlink" title="同步最新的blog到github"></a>同步最新的blog到github</h4><p>建议先将拥有最新blog相关的文件的电脑上的文件上传到github上，否则在另一台电脑上下载时会有版本冲突，解决也比较麻烦。一般建议blog静态文件和blog源码文件分库存放，在PC上建立git ssh密钥连接和建立新库respo在此略过-参考：<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html#%E6%B3%A8%E5%86%8CGithub%E8%B4%A6%E6%88%B7%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93" title="注册Github账户创建代码库">注册Github账户创建代码库</a></p>
<ul>
<li><p>编辑.gitignore文件：.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化是创建的，可以直接编辑，建议.gitignore文件包括以下内容：<br>public内的文件可以根据source文件夹内容自动生成的，不需要备份。其他日志、压缩、数据库等文件也都是调试等使用，也不需要备份。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.<span class="built_in">log</span></div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure>
</li>
<li><p>初始化仓库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git init    </div><div class="line">git remote add origin &lt;server&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>server</strong>是仓库的在线目录地址，可以从github上直接复制过来，origin是本地分支，remote add会将本地仓库映射到托管服务器的github仓库上。</p>
<ul>
<li>添加本地文件到仓库并同步到git上：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add . <span class="comment">#添加blog目录下所有文件，注意有个'.'(.gitignore里面声明的文件不在此内)    </span></div><div class="line">git commit -m <span class="string">"hexo source first add"</span> <span class="comment">#添加更新说明    </span></div><div class="line">git push -u origin master  <span class="comment">#将本地origin分支推送更新到github上的master分支</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，github库上已完成最新blog的同步上传。</p>
<h4 id="将github库的内容同步到另一台电脑"><a href="#将github库的内容同步到另一台电脑" class="headerlink" title="将github库的内容同步到另一台电脑"></a>将github库的内容同步到另一台电脑</h4><p>之前已经将最新的blog源码内容同步到了github仓库上，现在另一台电脑准备同步源码内容。注意，在同步前也要先建好<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html#hexo%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85" title="hexo环境安装">hexo的环境</a>，不然把blog同步到本地后，无法运行hexo服务。在建好的环境的主目录(F:\Blog\hexo)运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init  <span class="comment">#将目录添加到版本控制系统中    </span></div><div class="line">git remote add origin &lt;server&gt;  <span class="comment">#同上    </span></div><div class="line">git fetch --all  <span class="comment">#将git上所有文件拉取到本地    </span></div><div class="line">git reset --hard origin/master  <span class="comment">#强制将本地内容指向刚刚同步git云端内容</span></div></pre></td></tr></table></figure></p>
<p><strong>reset</strong>对所拉取的文件不做任何处理，不用<strong>pull</strong>是因为本地尚有许多文件，使用pull会有一些版本冲突，解决起来也麻烦，而本地的文件都是初始化生成的文件，较github库里面的blog文件而言基本无用，所以可以直接丢弃覆盖。<br>至此在另一台电脑上也同步了最新的blog文件。</p>
<h4 id="实现博客在多电脑之间同步"><a href="#实现博客在多电脑之间同步" class="headerlink" title="实现博客在多电脑之间同步"></a>实现博客在多电脑之间同步</h4><p>假设上面的操作做完后，你相当于在公司电脑和家里电脑上，都拥有了最新blog文件，现在需要在不同的电脑间，更新同步blog，以实现多电脑之间blog同步：<br>比如我在这家里的电脑上创建了一篇新的文章C1，编写了一些内容，还没有编写完，如果想在单位电脑上<br>上继续在C1的基础上写，我们必需先在家里电脑上把C1上传到github上，运行以下命令，提交文章：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .   <span class="comment">#将所有更新的本地文件添加到版本控制系统中</span></div><div class="line">git status  <span class="comment">#查看本地文件的状态。然后对更改添加说明更推送到git托管库上</span></div><div class="line">git commit -m <span class="string">'更新信息说明'</span></div><div class="line">git push  <span class="comment">#把本地blog文件同步到github对应的库上。</span></div></pre></td></tr></table></figure></p>
<p>至此，家里电脑的blog最新的更新同步完成。<br>如果在公司电脑上再次对C1进行编辑，需先运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull <span class="comment">#下载同步github上的文件到本地。</span></div></pre></td></tr></table></figure></p>
<p>然后就可以在本地找到C1这篇文章了，至此多台电脑间同步博客内容就已经完成了</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://rainnie.me/2016/03/13/利用git-解决hexo博客多PC-间同步问题/" target="_blank" rel="external">利用git解决hexo博客多PC间同步问题</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(六)-hexo-jacman主题文章页优化]]></title>
      <url>http://www.troylc.cc/hexo/2016/06/28/Hexo-6.html</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>上一篇对hexo博客基于jacman主题的首页页面的各项优化，本次为针对文章页的页面优化。<br>jacman主题优化之文章页优化,文章页的头尾及侧边栏和首页的一样，这里就不做说明了。主要说一下文章页中的文章内容部分的优化，顺序从上到下，从左到右进行优化</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><img src="/images/hexo-5/article-context.png" alt="文章内容页"><br><img src="/images/hexo-5/article-context-3.png" alt="文章内容页"></p>
<h4 id="文章访问量、评论数"><a href="#文章访问量、评论数" class="headerlink" title="文章访问量、评论数"></a>文章访问量、评论数</h4><p>这里我添加到标题右下方，正文上面的地方。在themes\jacman\layout_partial\post\header.ejs中，找到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"article-time"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"&lt;%= date_xml(item.date) %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"datePublished"</span>&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">datepublished</span>') %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>增加如下内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"article-time"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.duoshuo_shortname</span> &amp;&amp; <span class="attr">page.comments</span>)&#123; %&gt;</span></div><div class="line">	   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"head-plus"</span>&gt;</span></div><div class="line">	     阅读次数<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次,</div><div class="line">	   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"head-plus"</span>&gt;</span></div><div class="line">	   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ds-thread-count"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%- page.path %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"&lt;%= date_xml(item.date) %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"datePublished"</span>&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">datepublished</span>') %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上判断了是否开启多说评论，在<a href="http://www.troylc.cc/hexo/2016/06/27/Hexo-5.html" title="Hexo教程(五)-hexo博客jacman主题首页优化">前一篇文章</a>中我们已经有说过，多说评论数和网站的访问量，这里涉及到了文章的访问量，都是静态数据，不会对IP进行限制，一刷新就多一次访问量，因为在<a href="http://www.troylc.cc/hexo/2016/06/27/Hexo-5.html" title="Hexo教程(五)-hexo博客jacman主题首页优化">前一篇文章</a>中已经加载了记数的JS，所以这里只要放入显示位置就可以了</p>
<h4 id="修改文章页内分享"><a href="#修改文章页内分享" class="headerlink" title="修改文章页内分享"></a>修改文章页内分享</h4><p>用jiathis的站内分享：首页进入网站注册：<a href="http://www.jiathis.com" title="jiathis的站内分享" target="_blank" rel="external">http://www.jiathis.com</a>然后配置修改\themes\jacman_config.yml文件中的jiathis分享属性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jiathis:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">## if you use jiathis as your share tool,the built-in share tool won't be display.</span></div><div class="line">  id: 2103875   <span class="comment">## e.g. 1889330 your jiathis ID. </span></div><div class="line">  tsina: 2705524937 <span class="comment">## e.g. 2176287895 Your weibo id,It will be used in share button.</span></div></pre></td></tr></table></figure></p>
<p>默认jacman好像已经集成了这个分享，只是没有开启，如果你的主题里没有集成，看看在\hexo\themes\jacman\layout_partial\post目录是否有jiathis.ejs这个文件，如果有说明已经集成了，没有的话，可以自己添加集成上，在此目录下创建一个jiathis.ejs文件，内容为在jiathis分享上获取的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.jiathis.enable</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jiathis_style_24x24"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_tsina"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_weixin"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_renren"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_qzone"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_googleplus"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_button_douban"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.jiathis.com/share"</span> <span class="attr">class</span>=<span class="string">"jiathis jiathis_txt jtico jtico_jiathis"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jiathis_counter_style"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> jiathis_config=&#123;</div><div class="line">    <span class="attr">data_track_clickback</span>:<span class="literal">true</span>,</div><div class="line">    <span class="attr">sm</span>:<span class="string">"copy,renren,cqq"</span>,</div><div class="line">    <span class="attr">pic</span>:<span class="string">"&lt;%- item.photos %&gt;"</span>,</div><div class="line">    <span class="attr">summary</span>:<span class="string">""</span>,</div><div class="line">    &lt;% <span class="keyword">if</span> (theme.jiathis.tsina)&#123; %&gt; ralateuid:&#123;<span class="string">"tsina"</span>:<span class="string">"&lt;%= theme.jiathis.tsina %&gt;"</span>&#125;,<span class="attr">hideMore</span>:<span class="literal">false</span>&#125;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//v3.jiathis.com/code/jia.js?uid=</span></span></div><div class="line">&lt;% if (theme.jiathis.id)&#123; %&gt;&lt;%= theme.jiathis.id %&gt;&lt;% &#125; %&gt;" <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>在\hexo\themes\jacman\layout_partial\post目录下找到footer.ejs文件，在此文件添加判断：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>)&#123; %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-share"</span> <span class="attr">id</span>=<span class="string">"share"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.jiathis.enable</span>)&#123; %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share-jiathis"</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">jiathis</span>') %&gt;</span></div><div class="line">	 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-url</span>=<span class="string">"&lt;%- item.permalink %&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;% if (item.title)&#123; %&gt;&lt;%= item.title %&gt; | &lt;% &#125; %&gt;&lt;%= config.title %&gt;"</span> <span class="attr">data-tsina</span>=<span class="string">"&lt;%= theme.author.tsina %&gt;"</span> <span class="attr">class</span>=<span class="string">"share clearfix"</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>设置完成，可以到文章页内容下面看到分享的按钮。</p>
<h4 id="增加文章页的评论"><a href="#增加文章页的评论" class="headerlink" title="增加文章页的评论"></a>增加文章页的评论</h4><p>修改\themes\jacman下_config.yml中的duoshuo_shortname属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### Comment</span></div><div class="line">duoshuo_shortname: troylc   <span class="comment">## e.g. troylc   your duoshuo short name.</span></div><div class="line">disqus_shortname:     <span class="comment">## e.g. wuchong   your disqus short name.</span></div></pre></td></tr></table></figure></p>
<p>关于获取shoutname，shoutname不是登陆的用户昵称，而是多说首页点击我要安装，注册你的多说二级域名。去掉 .duoshuo.com 部分 就是你的shoutname，下图中troylc就是我的shoutname。<br><img src="/images/hexo-5/article-context-2.png" alt="多说安装"><br><img src="/images/hexo-5/article-context-1.png" alt="多说安装"></p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://tengj.top/2016/03/06/hexo干货系列：（三）hexo的Jacman主题优化/" title="hexo的Jacman主题优化" target="_blank" rel="external">hexo的Jacman主题优化</a><br><a href="http://www.tuicool.com/articles/FRrQvi3" title="Hexo博客Jacman主题的一些优化" target="_blank" rel="external">Hexo博客Jacman主题的一些优化</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(五)-hexo-jacman主题首页优化]]></title>
      <url>http://www.troylc.cc/hexo/2016/06/27/Hexo-5.html</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>上一篇说到了hexo的博客被百度和google收录的方法，虽然搜索引擎是收录了，但是我在百度上搜索我文章的标题，还是没有搜索结果，结果只有首页一个。这个不知道是什么原因，有可能是百度索引量的问题，后续再观察，再折腾吧。下面来分享一下优化jacman主题，包括首页和文章页等，</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>jacman主题优化之首页优化,顺序从上到下，从左到右进行优化</p>
<h4 id="首页头部优化"><a href="#首页头部优化" class="headerlink" title="首页头部优化"></a>首页头部优化</h4><p><img src="/images/hexo-5/header.png" alt="头部header"></p>
<p>1.修改网站文字描述，修改hexo(F:\Blog\hexo_config.yml)主配置文件_config.yml中的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site 网站</span></div><div class="line">title: troylc博客                   <span class="comment">#网站标题</span></div><div class="line">subtitle: 爱生活爱编程，一起来进步吧！  <span class="comment">#网站副标题</span></div><div class="line">description:  hello,every body!         <span class="comment">#网站描述</span></div><div class="line">author: troylc                          <span class="comment">#您的名字 </span></div><div class="line">language: zh-CN                         <span class="comment">#网站使用的语言</span></div><div class="line">timezone:                               <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></div></pre></td></tr></table></figure></p>
<p>2.修改文章URL结构<br>默认文章链结是以: <a href="http://xxx.com/2016/06/06/your-title/" target="_blank" rel="external">http://xxx.com/2016/06/06/your-title/</a> 的格式，末尾没有.html结尾有点动态页面的感觉，对搜索引擎能否收录也是个问题，于是，我改成了 <a href="http://xxx.com/hexo/2016/03/18/hello-world.html" target="_blank" rel="external">http://xxx.com/hexo/2016/03/18/hello-world.html</a> 这样的格式，具体方法是在 根目录(F:\Blog\hexo_config.yml)下的_config.yml文件里:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></div><div class="line">permalink: :category/:year/:month/:day/:title.html</div></pre></td></tr></table></figure></p>
<p>3.开启URL目录映射<br>如果你的分类是中文的，在url中也会显示相应的中文，为了在URL尽量少出现中文，做以下修改，方法是在_config.yml 下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Category &amp; Tag  分类和标签的设置</div><div class="line">default_category: uncategorized   #默认分类         </div><div class="line">category_map:                     #分类别名 category_map 是为了让url中尽量少出现中文，做的映射。如下配置</div><div class="line">    心得: experience</div><div class="line">#    生活: life</div><div class="line">#    其他: other</div><div class="line">tag_map:                          #标签别名</div></pre></td></tr></table></figure></p>
<p>其中, category_map，tag_map 是为了让url中尽量少出现中文，做的映射。<br>例如:<br>在文章开头，标柱目录为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ---</div><div class="line">xxx: xxx</div><div class="line">categories: 心得</div><div class="line"> ---</div></pre></td></tr></table></figure></p>
<p>则在url中， 会变成: <a href="http://xxx.com/experience/year/month/day/xxx.html" target="_blank" rel="external">http://xxx.com/experience/year/month/day/xxx.html</a></p>
<p>4.修改网站小图标、博客logo,在jacman(F:\Blog\hexo\themes\jacman)主题目录下的配置文件_config.yml,找到以下配置,指定favicon，imglogo的图片位置，或者把原本对应位置下的图片名称不变，直接换成自己喜欢的图片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### Image</span></div><div class="line">imglogo:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>             <span class="comment">## display image logo true/false. 是否显示logo</span></div><div class="line">  src: img/logo.png        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">favicon: img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     </span></div><div class="line">apple_icon: img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">author_img: img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></div><div class="line">banner_img: <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></div><div class="line"><span class="comment">### Theme Color </span></div><div class="line">theme_color:          <span class="comment">##主题颜色</span></div><div class="line">    theme: <span class="string">'#2ca6cb'</span>    <span class="comment">##the defaut theme color is blue</span></div></pre></td></tr></table></figure></p>
<p>5.首页头部的菜单menu 默认没有启用 /tags 和 /categories 页面，如果需要启用请在博客目录下的(F:\Blog\hexo\source)source文件夹中分别建立tags和categories文件夹每个文件夹中分别包含一个index.md文件。内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ---</div><div class="line">layout: tags (或categories)</div><div class="line">title: tags (或categories)</div><div class="line"> ---</div></pre></td></tr></table></figure></p>
<p>在jacman(F:\Blog\hexo\themes\jacman_config.yml)主题目录下的配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##### Menu</span></div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div><div class="line">  archives: /archives</div><div class="line"><span class="comment">##  life: /life</span></div><div class="line"><span class="comment">##  about: /about</span></div><div class="line"><span class="comment">## you can create `tags` and `categories` folders in `../source`.</span></div><div class="line"><span class="comment">## And create a `index.md` file in each of them.</span></div><div class="line"><span class="comment">## set `front-matter`as</span></div><div class="line"><span class="comment">## layout: tags (or categories)</span></div><div class="line"><span class="comment">## title: tags (or categories)</span></div><div class="line"><span class="comment">## ---</span></div></pre></td></tr></table></figure></p>
<p>6.增加百度站内搜索-<a href="http://zn.baidu.com/cse/wiki/index?category_id=25" title="百度站内搜索-极速体验版本" target="_blank" rel="external">极速体验版本</a><br>在百度站内搜索-帮助中心-极速体验版中填空站内搜索代码，获取搜索展示代码，放在(F:\Blog\hexo\themes\jacman\layout_partial\header.ejs):<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;% &#125; else if(theme.baidu_search.enable)&#123; %&gt;</div><div class="line">   &lt;form class="search" action="&lt;%- theme.baidu_search.site %&gt;" target="_blank"&gt;</div><div class="line">    &lt;label&gt;Search&lt;/label&gt;</div><div class="line">    &lt;input name="cc" type="hidden" value= &lt;%= theme.baidu_search.id %&gt; &gt;&lt;input type="text" name="q" size="30" placeholder="&lt;%= __('search') %&gt;"&gt;&lt;br&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">&lt;% &#125; else if(theme.swift_search.enable)&#123; %&gt;</div></pre></td></tr></table></figure></p>
<p>再修改F:\Blog\hexo\themes\jacman_config.yml文件中的百度搜索属性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">baidu_search:     <span class="comment">## http://zn.baidu.com/  极速体验版本http://zn.baidu.com/cse/wiki/index?category_id=25</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  id: troylc.cc  <span class="comment">## e.g. "troylc.cc"  for your baidu search webname</span></div><div class="line">  site: http://zhannei.baidu.com/cse/site  <span class="comment">## your can change to your site instead of the default site</span></div></pre></td></tr></table></figure></p>
<p>百度搜索极速检验版，需要百度搜索引擎收录你的网站，具体参考<a href="http://www.troylc.cc/hexo/2016/06/16/Hexo-4.html" title="搜索引擎收录网站">《Hexo教程(四)-hexo博客被搜索引擎收录》</a></p>
<h4 id="首页内容部分优化"><a href="#首页内容部分优化" class="headerlink" title="首页内容部分优化"></a>首页内容部分优化</h4><p><img src="/images/hexo-5/index-context.png" alt="内容部分优化"></p>
<h5 id="首页文章列表的优化"><a href="#首页文章列表的优化" class="headerlink" title="首页文章列表的优化"></a>首页文章列表的优化</h5><p>1.文章列表的展示方式，默认是全部展开，感觉展示文章全部内容比较没有吸引力，我关闭掉了，只展示少量摘要。修改\themes\jacman下面_config.yml中的expand改成false即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  expand: <span class="literal">false</span>    <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></div><div class="line">  excerpt_link: Read More</div></pre></td></tr></table></figure></p>
<p>2.文章列表的展示形式，修改成列表模式，并在每一格列表的头显示标题，中间显示文章的摘要，尾显示发布时间，分类，标签，及评论数。修改F:\java\githubPages\Blog\hexo\themes\jacman\layout_partial\article.ejs文件中的以下部分：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"post"</span> <span class="attr">itemscope</span> <span class="attr">itemprop</span>=<span class="string">"blogitem"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">item.link</span>) &#123; %&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- item.link %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span>&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.title %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">desc</span>)&#123; %&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.description</span>)&#123; %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.description</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span>(<span class="attr">item.excerpt</span>)&#123; %&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">strip_html</span>(<span class="attr">item.excerpt</span>)<span class="attr">.replace</span>(/^\<span class="attr">s</span>*/, '')<span class="attr">.replace</span>(/\<span class="attr">s</span>*$/, '')<span class="attr">.substring</span>(<span class="attr">0</span>, <span class="attr">140</span>) %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123;%&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">strip_html</span>(<span class="attr">item.content</span>)<span class="attr">.replace</span>(/^\<span class="attr">s</span>*/, '')<span class="attr">.replace</span>(/\<span class="attr">s</span>*$/, '')<span class="attr">.substring</span>(<span class="attr">0</span>, <span class="attr">140</span>) %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"&lt;%= date_xml(item.date) %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"datePublished"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.date.format</span>(<span class="attr">config.date_format</span>) %&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span>            </div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post-expand &lt;%= item.layout %&gt;"</span>" <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">header-index</span>') %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 0.5em 0.5em 0.5em 0.8em"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">item.link</span>) &#123; %&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- item.link %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span>&#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.title %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">desc</span>)&#123; %&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.description</span>)&#123; %&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">item.description</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span>(<span class="attr">item.excerpt</span>)&#123; %&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">strip_html</span>(<span class="attr">item.excerpt</span>)<span class="attr">.replace</span>(/^\<span class="attr">s</span>*/, '')<span class="attr">.replace</span>(/\<span class="attr">s</span>*$/, '')<span class="attr">.substring</span>(<span class="attr">0</span>, <span class="attr">240</span>) %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123;%&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">p</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">strip_html</span>(<span class="attr">item.content</span>)<span class="attr">.replace</span>(/^\<span class="attr">s</span>*/, '')<span class="attr">.replace</span>(/\<span class="attr">s</span>*$/, '')<span class="attr">.substring</span>(<span class="attr">0</span>, <span class="attr">240</span>) %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">footer-index</span>', &#123;<span class="attr">index:</span> <span class="attr">true</span>&#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在当前目录下的post目录里增加三个文件catetags-index.ejs,footer-index.ejs,header-index.ejs<br>catetags-index.ejs 内容:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;div class="article-catetags"&gt;</div><div class="line">&lt;% if (item.categories &amp;&amp; item.categories.length)&#123; %&gt;</div><div class="line">&lt;div style="float: left;padding: 0.5em 0;margin-right: 3em;margin-top: 0.3em;"&gt;</div><div class="line">    &lt;time datetime="&lt;%= date_xml(item.date) %&gt;" itemprop="datePublished"&gt; &lt;%= __('datepublished') %&gt; &lt;%= item.date.format(config.date_format) %&gt;&lt;/time&gt;</div><div class="line">    By&lt;% if(theme.author.google_plus)&#123; %&gt;</div><div class="line">        &lt;a href="https://plus.google.com/&lt;%=theme.author.google_plus %&gt;?rel=author" title="&lt;%= config.author %&gt;" target="_blank" itemprop="author"&gt;&lt;%= config.author %&gt;&lt;/a&gt;</div><div class="line">        &lt;% &#125;else&#123; %&gt;</div><div class="line">        &lt;a href="&lt;%= config.root %&gt;about" title="&lt;%= config.author %&gt;" target="_blank" itemprop="author"&gt;&lt;%= config.author %&gt;&lt;/a&gt;</div><div class="line">        &lt;% &#125; %&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class="article-categories"&gt;</div><div class="line">  &lt;span&gt;&lt;/span&gt;</div><div class="line">  &lt;%- list_categories(item.categories, &#123;</div><div class="line">      show_count: false,</div><div class="line">      class: 'article-category',</div><div class="line">      style: 'none',</div><div class="line">      separator: '►'</div><div class="line">  &#125;) %&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;% if (item.tags &amp;&amp; item.tags.length)&#123; %&gt;</div><div class="line">  &lt;div class="article-tags"&gt;</div><div class="line">  &lt;% var tags = [];</div><div class="line">    item.tags.forEach(function(tag)&#123;</div><div class="line">      tags.push('&lt;a href="' + config.root + tag.path + '"&gt;' + tag.name + '&lt;/a&gt;');</div><div class="line">    &#125;); %&gt;</div><div class="line">  &lt;span&gt;&lt;/span&gt; &lt;%- tags.join('') %&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>footer-index.ejs 内容:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"article-footer clearfix"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">catetags-index</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-share"</span> <span class="attr">id</span>=<span class="string">"share"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.jiathis.enable</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share-jiathis"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">jiathis</span>') %&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-url</span>=<span class="string">"&lt;%- item.permalink %&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;% if (item.title)&#123; %&gt;&lt;%= item.title %&gt; | &lt;% &#125; %&gt;&lt;%= config.title %&gt;"</span> <span class="attr">data-tsina</span>=<span class="string">"&lt;%= theme.author.tsina %&gt;"</span> <span class="attr">class</span>=<span class="string">"share clearfix"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">index</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments-count"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>((<span class="attr">config.disqus_shortname</span> || <span class="attr">theme.disqus_shortname</span>) &amp;&amp; !<span class="attr">theme.duoshuo_shortname</span>) &#123; %&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;#disqus_thread"</span> <span class="attr">class</span>=<span class="string">"comments-count-link"</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span>(<span class="attr">theme.duoshuo_shortname</span>) &#123; %&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;#comments"</span> <span class="attr">class</span>=<span class="string">"ds-thread-count comments-count-link"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%- item.path %&gt;"</span> <span class="attr">data-count-type</span>=<span class="string">"comments"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>header-index.ejs 内容:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-info clearfix"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">item.link</span>) &#123; %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- item.link %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.title %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- config.root %&gt;&lt;%- item.path %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= item.title %&gt;"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>调整对应的样式：<br>具体:<br>    1.\jacman\source\css_partial\index.styl<br>    2.\jacman\source\css_partial\footer.styl<br>    3.\jacman\source\css_partial\article.styl<br>    4.\jacman\source\css_partial\helper.styl<br>我主要调整了以上四个文件中的样式，具体各位自己找着改吧。太多了，我也是通过firefox的firebug工具慢慢找得。</p>
<p>3.文章列表分页条数限制（含首页文章列表页，分类列表页，标签列表页）修改hexo(F:\Blog\hexo_config.yml)主配置文件_config.yml中的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Others</span></div><div class="line">index_generator:</div><div class="line">  per_page: 5 <span class="comment">##首页默认10篇文章标题 如果值为0不分页</span></div><div class="line">archive_generator:</div><div class="line">    per_page: 0 <span class="comment">##归档页面默认10篇文章标题</span></div><div class="line">    yearly: <span class="literal">true</span>  <span class="comment">##生成年视图</span></div><div class="line">    monthly: <span class="literal">true</span> <span class="comment">##生成月视图</span></div><div class="line">tag_generator:</div><div class="line">    per_page: 0 <span class="comment">##标签分类页面默认10篇文章</span></div><div class="line">category_generator: </div><div class="line">    per_page: 0 <span class="comment">###分类页面默认10篇文章</span></div><div class="line">feed:</div><div class="line">    <span class="built_in">type</span>: atom <span class="comment">##feed类型 atom或者rss2</span></div><div class="line">    path: atom.xml <span class="comment">##feed路径</span></div><div class="line">    <span class="built_in">limit</span>: 20  <span class="comment">##feed文章最小数量</span></div></pre></td></tr></table></figure></p>
<h5 id="首页内容侧边栏优化"><a href="#首页内容侧边栏优化" class="headerlink" title="首页内容侧边栏优化"></a>首页内容侧边栏优化</h5><p>侧边栏顺序配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### Widgets  首页侧边栏</span></div><div class="line">widgets: </div><div class="line">- github-card</div><div class="line">- category</div><div class="line">- tag</div><div class="line">- hot</div><div class="line">- tagcloud</div><div class="line">- links</div><div class="line"><span class="comment">#- douban</span></div><div class="line">- weibo</div><div class="line">- rss</div><div class="line">  <span class="comment">## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span></div></pre></td></tr></table></figure></p>
<p>1.github名片，友情链接,RSS订阅，在<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html#%E5%AE%89%E8%A3%85Hexo%E6%8F%92%E4%BB%B6">Hexo教程(一)-hexo环境搭建</a>中的安装插件时，安装RSS插件. 在jacman(F:\Blog\hexo\themes\jacman)主题目录下的配置文件_config.yml,找到以下配置,并修改如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">author:</div><div class="line">  intro_line1:  <span class="string">"Hello ,I'm troylc Page in github."</span>    <span class="comment">## your introduction on the bottom of the page</span></div><div class="line">  intro_line2:  <span class="string">"This is my blog,believe it or not."</span>  <span class="comment">## the 2nd line</span></div><div class="line">  ...</div><div class="line">  github: xxxx     <span class="comment">## e.g. 配置你对应的github用户名</span></div><div class="line">  ...</div><div class="line"><span class="comment">##----------------------------------------------------------------------------</span></div><div class="line"><span class="comment">#### RSS  RSS订阅 </span></div><div class="line">rss: /atom.xml <span class="comment">## RSS address.</span></div><div class="line"><span class="comment">##----------------------------------------------------------------------------</span></div><div class="line"><span class="comment">#### Links</span></div><div class="line">links:</div><div class="line">  攻城狮: http://www.troylc.cc/, 一个面向程序员交流分享的博客</div><div class="line">  troylc<span class="string">'s Blog: http://www.troylc.cc/</span></div></pre></td></tr></table></figure></p>
<p>2.分类，标签，标签云，这几个只有在创建文章中写上分类和标签，就会在此处自动显示分类，标签，标签云，以分类和标签的文章个数。</p>
<p>3.热评文章、我的微博<br><strong>热评文章：</strong><br>由于hexo没有内置诸如“热评文章”，“最新评论”等的widget，那么只能自定义widget,仿照其他的widget，在themes的_config.yml文件中的widgets下添加自定义widget的名称，如上面我添加了一个hot，然后在F:\Blog\hexo\themes\jacman\layout_widget目录下新建一个hot.ejs，在<a href="http://duoshuo.com/" title="多说网站" target="_blank" rel="external">多说</a>(如果没有多说账号就注册一个，后续文章页的文章评论也会用到)-&gt;后台管理-&gt;工具-&gt;热评文章中获取代码，写到hot.ejs文件中，然后在其上面写上名字“热评文章”，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 国际化文件(F:\Blog\hexo\themes\jacman\languages\zh-CN.yml)定义hot --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"asidetitle"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">hot</span>') %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说热评文章 start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-top-threads"</span> <span class="attr">data-range</span>=<span class="string">"daily"</span> <span class="attr">data-num-items</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说热评文章 end --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">"troylc"</span>&#125;;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">		ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">		ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">		ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">		(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </div><div class="line">		 || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>我的微博-微博秀</strong><br>需要注意的是，如果要启用微博秀，您必须填上author属性下tsina和weibo_verifier的值，前者是您微博ID，后者是您微博秀的验证码，登录新浪微博后，访问 <a href="http://app.weibo.com/tool/weiboshow" title="微博秀" target="_blank" rel="external">http://app.weibo.com/tool/weiboshow</a> 在如下图位置，可以获得您的 verifier，如：我的是0f3h06c8。<br><img src="/images/hexo-5/index-context-2.png" alt="内容侧边栏-微博秀"><br>在jacman(F:\Blog\hexo\themes\jacman)主题目录下的配置文件_config.yml,找到以下配置,并修改如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">author:</div><div class="line">  ...</div><div class="line">  weibo_verifier: 0f3h06c8    <span class="comment">## e.g. 0f81d6c8 Your weibo-show widget verifier ,if you use weibo-show it is needed.</span></div><div class="line">  tsina: 2705522637      <span class="comment">## e.g. 2705522637  Your weibo ID,It will be used in share button.</span></div><div class="line">  weibo: 2705522637     <span class="comment">## e.g. troylc or 2705522637 for http://weibo.com/2705522637</span></div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>第一次不知道是什么原因，要么无法显示，要么显示出现问题，耐心的多刷新，或者等待几天再去刷新。</p>
<h4 id="首页footer优化"><a href="#首页footer优化" class="headerlink" title="首页footer优化"></a>首页footer优化</h4><p><img src="/images/hexo-5/footer.png" alt="尾部footer"><br>1.修改网站的主页的头和尾的英文字体：\hexo\themes\jacman\source\css_base\variable.styl中的font-custom-family = “covered_by_your_graceregular”修改为inherit如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//Font</div><div class="line">font-default = "Helvetica Neue", "Helvetica","Microsoft YaHei", "WenQuanYi Micro Hei",Arial, sans-serif</div><div class="line">font-serif = "Georgia", serif</div><div class="line">font-mono = Monaco, Menlo, Consolas, Courier New, monospace</div><div class="line">font-custom-family = inherit  //英文字体inherit</div><div class="line">font-custom-filename = coveredbyyourgrace-webfont</div><div class="line">font-icon-family = "FontAwesome"</div><div class="line">font-icon-filename = fontawesome-webfont</div><div class="line">font-icon-version = "4.0.3"</div><div class="line">font-icon-diao = "fontdiao"</div><div class="line">font-icon-diao-filename = "fontdiao"</div><div class="line">font-icon-diao-version = "0.0.8"</div><div class="line">ShowCustomFont = hexo-config("ShowCustomFont")</div><div class="line">font-size = 100%</div><div class="line">line-height = 1.5</div><div class="line">//image</div><div class="line">author-img = hexo-config("author_img")</div></pre></td></tr></table></figure></p>
<p>2.尾部的作者图片，在上面头部优化中，有提到，在jacman(F:\Blog\hexo\themes\jacman)主题目录下的配置文件_config.yml,找到以下配置,指定author_img的图片位置，或者把原本对应位置下的图片名称不变，直接换成自己喜欢的图片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### Image</span></div><div class="line">imglogo:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>             <span class="comment">## display image logo true/false. 是否显示logo</span></div><div class="line">  src: img/logo.png        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">favicon: img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     </span></div><div class="line">apple_icon: img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">author_img: img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></div><div class="line">banner_img: <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></div><div class="line"><span class="comment">### Theme Color </span></div><div class="line">theme_color:          <span class="comment">##主题颜色</span></div><div class="line">    theme: <span class="string">'#2ca6cb'</span>    <span class="comment">##the defaut theme color is blue</span></div></pre></td></tr></table></figure></p>
<p>3.添加网站的总pv计数和总uv计数<br>在F:\Blog\hexo\themes\jacman\layout_partial\footer.ejs中最后面添加脚本和总pv计数和总uv计数：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></div><div class="line">      Total visits: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">    You are Visiter No.<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" title="如何使用 Jacman 主题 " target="_blank" rel="external">如何使用 Jacman 主题</a><br><a href="http://www.tuicool.com/articles/FRrQvi3" title="Hexo博客Jacman主题的一些优化" target="_blank" rel="external">Hexo博客Jacman主题的一些优化</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(四)-hexo博客被搜索引擎收录]]></title>
      <url>http://www.troylc.cc/hexo/2016/06/16/Hexo-4.html</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>现在我们的博客搭起来了，也写了几篇博文，但是各大搜索引擎还是搜索不到你写的文章，如何查看是否被搜索引擎收录，如何设置博客被搜索引擎收录，如何让搜索引擎能及时的搜索到你的文章，这篇就来和大家一起填坑</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>下面准备分别介绍谷歌和百度如何提交搜索引擎，其中有一些共同的地方，这里先说明：</p>
<h4 id="确认博客是否被收录"><a href="#确认博客是否被收录" class="headerlink" title="确认博客是否被收录"></a>确认博客是否被收录</h4><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的<br>输入：site:troylc.cc<br><img src="/images/hexo-3/google-troylc.png" alt="查看google是否收录"><br><img src="/images/hexo-3/baidu-troylc.png" alt="查看baidu是否收录"><br>我这里是已经做完了，在写这篇文章的，所以显示已经收录了</p>
<h4 id="验证博客网站"><a href="#验证博客网站" class="headerlink" title="验证博客网站"></a>验证博客网站</h4><p>两个搜索引擎入口：<br><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" title="Google搜索引擎提交入口" target="_blank" rel="external">Google搜索引擎提交入口</a><br><a href="http://zhanzhang.baidu.com/linksubmit/url" title="百度搜索引擎入口" target="_blank" rel="external">百度搜索引擎入口</a><br>如果没有对应的账号，请对应的注册相应的账号：<br><img src="/images/hexo-3/baidu-create.png" alt="添加百度验证博客网站"><br><img src="/images/hexo-3/google-create1.png" alt="添加google验证博客网站"><br><img src="/images/hexo-3/google-create2.png" alt="添加google验证博客网站"><br>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的source下面<br><img src="/images/hexo-3/hexo-verify-file.png" alt="查看本地hexo验证文件"><br>然后部署到服务器,输入地址：<a href="http://www.troylc.cc/googlecb7f6bfb684c40c5.html">http://www.troylc.cc/googlecb7f6bfb684c40c5.html</a> 能访问到就可以点验证按钮。<br><code>注</code>：这个验证的时候，google有可能会失败，可以等个一两天，再去验证，就好了。</p>
<h4 id="生成站点地图sitemap"><a href="#生成站点地图sitemap" class="headerlink" title="生成站点地图sitemap"></a>生成站点地图sitemap</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。<br>先安装一下插件，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>编译你的博客<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<p>如果在你的博客根目录的public下面生成了sitemap.xml以及baidusitemap.xml就表示成功了。<br>这时候sitemap.xml跟baidusitemap.xml里面的内容有点相似.<br>部署后你分别访问<br><a href="http://www.troylc.cc/sitemap.xml">http://www.troylc.cc/sitemap.xml</a><br><a href="http://www.troylc.cc/baidusitemap.xml">http://www.troylc.cc/baidusitemap.xml</a></p>
<h4 id="收录hexo博客"><a href="#收录hexo博客" class="headerlink" title="收录hexo博客"></a>收录hexo博客</h4><h5 id="让谷歌收录我们的博客"><a href="#让谷歌收录我们的博客" class="headerlink" title="让谷歌收录我们的博客"></a>让谷歌收录我们的博客</h5><p>谷歌操作比较简单，就是向Google站长工具提交sitemap<br>登录Google账号，添加了站点验证通过后，选择站点，之后在抓取——站点地图中就能看到添加/测试站点地图，如下图：<br><img src="/images/hexo-3/google-sitemap.png" alt="谷歌收录我们的博客"><br>谷歌提交过了一两天就能搜索到博客了。</p>
<h5 id="让百度收录我们的博客"><a href="#让百度收录我们的博客" class="headerlink" title="让百度收录我们的博客"></a>让百度收录我们的博客</h5><p>相比google百度操作可能比较麻烦一点：这里是百度介绍的几种主动提交博客文章链接的方式：<br>如何选择链接提交方式</p>
<ol>
<li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li>
<li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li>
<li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li>
<li>手动提交：一次性提交链接给百度，可以使用此种方式。<br>从效率上来说：主动推送&gt;自动推送&gt;sitemap<br>这里介绍自动推送和sitemap提交方式：  </li>
</ol>
<p><strong>自动推送：</strong><br><img src="/images/hexo-3/baidu-zd1.png" alt="百度自动推送"><br><img src="/images/hexo-3/baidu-zd2.png" alt="百度自动推送"><br>自动推送是百度站长平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</div><div class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>我是放在\themes\jacman\layout_partial\after_footer.ejs中，添加到下面就行。</p>
<p><strong>sitemap提交:</strong><br>直接提交<a href="http://www.troylc.cc/baidusitemap.xml">http://www.troylc.cc/baidusitemap.xml</a> 就行，看下图。<br><img src="/images/hexo-3/baidu-sitemaptj.png" alt="百度自动推送"></p>
<p>至此我们的博客已经被百度与google这样的搜索引擎收录，如果出现无法收录，可以过几天再登录看看结果</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://tengj.top/2016/03/14/hexo6seo/" target="_blank" rel="external">hexo提交搜索引擎（百度+谷歌）</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(三)-hexo博客同时托管到github和coding]]></title>
      <url>http://www.troylc.cc/hexo/2016/06/15/Hexo-3.html</url>
      <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>之前已经把hexo部署到github，但是有时候挺慢的，于是就像跟大家一样搞到国内的coding.net上，申请coding的邮箱尽量与github使用同一个邮箱，这样配置ssh就省了事情，不用配置两个ssh了</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="coding配置"><a href="#coding配置" class="headerlink" title="coding配置"></a>coding配置</h4><p>基本流程跟github一样，都是先申请帐号。这里需要说一下的是，申请coding的邮箱尽量与github使用同一个邮箱，这样配置ssh就省了事情，不用配置两个ssh了。<br><img src="/images/hexo-4/coding.png" alt="coding网站"><br>ssh对接基本和github一样，如果之前生成过ssh的话，就可以直接使用，一般存放在~/.ssh/id_rsa.pub。如果没有的话，那就下面几步就可以了,参考：<a href="http://www.troylc.cc/hexo/2016/05/31/Hexo%E6%95%99%E7%A8%8B2.html#%E9%85%8D%E7%BD%AESSH%E5%AF%86%E9%92%A5">Hexo教程(一)-hexo环境搭建</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b4096 -C <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/hexo-4/coding-ssh.png" alt="coding网站"><br><strong>新建项目</strong><br>直接新建一个coding项目，需要注意就是：项目名尽量与用户名一样，这样可以省去后续的一些麻烦.设置为公有的项目，其余的都不用动，直接默认就行了。</p>
<h4 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h4><p>新建好了coding的项目之后，修改一下站点的根目录配置文件_config.yml,找到deploy位置，修改如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: </div><div class="line">      github: git@github.com:xxxx/xxxxx.github.io.git</div><div class="line">      coding: git@git.coding.net:xxxx/xxxxx.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>如果都是master分支，所以两个写到一起了，如果不是同一个分支的话，可以如下的写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository:</div><div class="line">      github: git@github.com:xxxx/xxxxx.github.io.git,分支名称</div><div class="line">      coding: git@git.coding.net:xxxx/xxxxx.git,分支名称</div></pre></td></tr></table></figure></p>
<p>其实就是在原来的基础再加一个就好了。只需要把repo的地址改成自己对应项目的就好。<br>还有一步，就是在博客的source/目录下需要创建一个空白文件,至于原因，是因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span></div><div class="line">$ touch Staticfile  <span class="comment">#名字必须是Staticfile</span></div></pre></td></tr></table></figure></p>
<p>现在可以deploy了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<p>会看到有两个发布。发布完成之后，还需要托管coding.net上。</p>
<p><strong>coding使用Pages部署</strong><br>这种方式的话，可以绑定自己的域名。就跟Github Pages一样。项目名字必须与coding的用户名一致!!!只需要在如下:<br><img src="/images/hexo-4/coding-pages.png" alt="coding网站"><br>因为前面配置的分支是master,因此开启之后，也需要是master。然后看起之后就可访问了,下面两个链接都可以访问<br><code>http://troylc.coding.me/troylc</code><br><code>http://troylc.coding.me/</code></p>
<h4 id="绑定域名："><a href="#绑定域名：" class="headerlink" title="绑定域名："></a>绑定域名：</h4><p>在万网上面购买了troylc.cc域名，三年只要50多块，个人用的就不用com这种超级贵的域名了。现在要实现国内的走coding，海外的走github，只要配置2个CNAME就行(详细参考：<a href="https://wanwang.aliyun.com/" title="购买万网域名" target="_blank" rel="external">万网</a>，这里就不做详细说明了).域名解析如下：<br><img src="/images/hexo-4/wanwang.png" alt="coding网站"><br><strong>coding-pages绑定域名：</strong><br><img src="/images/hexo-4/coding-ww.png" alt="coding网站"><br><strong>github-pages绑定域名：</strong><br>在hexo根目录下的source/目录下需要创建一个CNAME,内容为：troylc.cc<br><img src="/images/hexo-4/github-CNAME.png" alt="github-CNAME"><br>然后在hexo根目录下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<p>过十几分钟后检测troylc.cc看到的解析是正确的，国内解析到Coding，国外解析到Github</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://shomy.top/2016/03/03/hexo-in-coding-github/" target="_blank" rel="external">hexo同时部署到coding(gitcafe)和github</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(二)-hexo-jacman主题优化]]></title>
      <url>http://www.troylc.cc/hexo/2016/05/31/Hexo-2.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇博文把我们的博客已经部署到了github pages服务上，别人可以通过网址来登陆我们的博客了，但是我们这时博客并不好看，怎么优化hexo博客，在Hexo下已经有很多人开发了各种主题给我们使用，我们只需要把他克隆过来，然后通过修改配置文件即可达到要的效果。那么我们应该怎么修改呢？</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="Hexo官网主题专栏"><a href="#Hexo官网主题专栏" class="headerlink" title="Hexo官网主题专栏"></a><a href="https://hexo.io/themes/" title="hexo主题专栏" target="_blank" rel="external">Hexo官网</a>主题专栏</h4><p><img src="/images/hexo-2/themes.png" alt="Hexo官网主题"><br>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：jacman这个主题)<br><img src="/images/hexo-2/jacmangithub.png" alt="Hexo官网主题"></p>
<h4 id="克隆主题jacman"><a href="#克隆主题jacman" class="headerlink" title="克隆主题jacman"></a>克隆主题jacman</h4><p>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/wuchong/jacman.git themes/jacman</div></pre></td></tr></table></figure></p>
<p>等待下载完成</p>
<h4 id="启用主题jacman"><a href="#启用主题jacman" class="headerlink" title="启用主题jacman"></a>启用主题jacman</h4><p>修改你的博客根目录(F:\Blog\hexo)下的_config.yml配置文件中的theme属性，将其设置为jacman。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="comment">#theme: landscape</span></div><div class="line">theme: jacman</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h4 id="部署主题jacman"><a href="#部署主题jacman" class="headerlink" title="部署主题jacman"></a>部署主题jacman</h4><p>返回Hexo目录，右键Git Bash，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>打开本地浏览器，输入<code>http://localhost:4000/</code> 即可看见我们的主题已经更换了<br><img src="/images/hexo-2/usejacman.png" alt="Hexo官网主题"></p>
<p>如果效果满意，将它部署到Github上;打开Hexo文件夹，右键Git Bash，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)</div><div class="line">hexo g -d</div></pre></td></tr></table></figure></p>
<p>打开自己github pages的主页(<code>https://xxxxx.github.io</code>)，即可看到修改后的效果</p>
<h4 id="优化hexo主配置"><a href="#优化hexo主配置" class="headerlink" title="优化hexo主配置"></a>优化hexo主配置</h4><p>修改你的博客根目录(F:\Blog\hexo)下的_config.yml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site 网站</span></div><div class="line">title: troylc技术博客                   <span class="comment">#网站标题</span></div><div class="line">subtitle: 爱生活爱编程，一起来进步吧！  <span class="comment">#网站副标题</span></div><div class="line">description:  hello,every body!         <span class="comment">#网站描述</span></div><div class="line">author: troylc                          <span class="comment">#您的名字 </span></div><div class="line">language: zh-CN                         <span class="comment">#网站使用的语言</span></div><div class="line">timezone:                               <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></div><div class="line"></div><div class="line"><span class="comment"># URL 网址</span></div><div class="line"><span class="comment">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/</span></div><div class="line">url: https://www.troylc.cc/</div><div class="line">root: /</div><div class="line"><span class="comment">#permalink: :year/:month/:day/:title/</span></div><div class="line">permalink: :category/:year/:month/:day/:title.html  <span class="comment">#生成文章的链接格式</span></div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"><span class="comment"># Directory 目录配置</span></div><div class="line">source_dir: <span class="built_in">source</span>              <span class="comment">#源文件夹，这个文件夹用来存放内容。</span></div><div class="line">public_dir: public              <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></div><div class="line">tag_dir: tags                   <span class="comment">#标签文件夹</span></div><div class="line">archive_dir: archives           <span class="comment">#归档文件夹</span></div><div class="line">category_dir: categories        <span class="comment">#分类文件夹</span></div><div class="line">code_dir: downloads/code        <span class="comment">#nclude code 文件夹</span></div><div class="line">i18n_dir: :lang                 <span class="comment">#国际化（i18n）文件夹</span></div><div class="line">skip_render:                    <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></div><div class="line"></div><div class="line"><span class="comment"># Writing 文章</span></div><div class="line">new_post_name: :title.md        <span class="comment"># File name of new posts 新建文章默认文件名</span></div><div class="line">default_layout: post            <span class="comment"># 默认布局</span></div><div class="line">titlecase: <span class="literal">false</span>                <span class="comment"># Transform title into titlecase</span></div><div class="line">external_link: <span class="literal">true</span>             <span class="comment"># Open external links in new tab  在新标签中打开一个外部链接，默认为true</span></div><div class="line">filename_case: 0                <span class="comment">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span></div><div class="line">render_drafts: <span class="literal">false</span>            <span class="comment">#是否渲染_drafts目录下的文章，默认为false</span></div><div class="line">post_asset_folder: <span class="literal">false</span>        <span class="comment">#启动 Asset 文件夹</span></div><div class="line">relative_link: <span class="literal">false</span>            <span class="comment">#把链接改为与根目录的相对位址，默认false</span></div><div class="line">future: <span class="literal">true</span>                    <span class="comment">#显示未来的文章，默认false</span></div><div class="line">highlight:    <span class="comment">#代码块的设置</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  line_number: <span class="literal">true</span></div><div class="line">  auto_detect: <span class="literal">false</span></div><div class="line">  tab_replace:</div><div class="line"><span class="comment"># 代码高亮主题</span></div><div class="line"><span class="comment"># available: default | night</span></div><div class="line">available: night</div><div class="line">highlight_theme: night  </div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag  分类和标签的设置</span></div><div class="line">default_category: uncategorized   <span class="comment">#默认分类         </span></div><div class="line">category_map:                     <span class="comment">#分类别名 category_map 是为了让url中尽量少出现中文，做的映射。如下配置</span></div><div class="line"><span class="comment">#    编程: programming</span></div><div class="line"><span class="comment">#    生活: life</span></div><div class="line"><span class="comment">#    其他: other</span></div><div class="line">tag_map:                          <span class="comment">#标签别名</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="comment">#theme: landscape</span></div><div class="line">theme: jacman  <span class="comment">#主题</span></div><div class="line">stylus: </div><div class="line">  compress: <span class="literal">true</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: </div><div class="line">      github: git@github.com:xxxx/xxxxx.github.io.git <span class="comment">#部署到github pages</span></div><div class="line">      coding: git@git.coding.net:xxxx/xxxx.git <span class="comment">#部署到coding pages</span></div><div class="line">  branch: master <span class="comment">#上传到git服务的主分支上</span></div><div class="line"></div><div class="line"><span class="comment"># 自动生成sitemap</span></div><div class="line"><span class="comment">#sitemap:</span></div><div class="line"><span class="comment">#path: sitemap.xml</span></div><div class="line"><span class="comment">#baidusitemap:</span></div><div class="line"><span class="comment">#path: baidusitemap.xml</span></div><div class="line"><span class="comment"># Others</span></div><div class="line">index_generator:</div><div class="line">  per_page: 5 <span class="comment">##首页默认10篇文章标题 如果值为0不分页</span></div><div class="line">archive_generator:</div><div class="line">    per_page: 0 <span class="comment">##归档页面默认10篇文章标题</span></div><div class="line">    yearly: <span class="literal">true</span>  <span class="comment">##生成年视图</span></div><div class="line">    monthly: <span class="literal">true</span> <span class="comment">##生成月视图</span></div><div class="line">tag_generator:</div><div class="line">    per_page: 0 <span class="comment">##标签分类页面默认10篇文章</span></div><div class="line">category_generator: </div><div class="line">    per_page: 0 <span class="comment">###分类页面默认10篇文章</span></div><div class="line">feed:</div><div class="line">    <span class="built_in">type</span>: atom <span class="comment">##feed类型 atom或者rss2</span></div><div class="line">    path: atom.xml <span class="comment">##feed路径</span></div><div class="line">    <span class="built_in">limit</span>: 20  <span class="comment">##feed文章最小数量</span></div></pre></td></tr></table></figure></p>
<h4 id="优化jacman主题配置"><a href="#优化jacman主题配置" class="headerlink" title="优化jacman主题配置"></a>优化jacman主题配置</h4><p>修改你的博客主题根目录(F:\Blog\hexo\themes\下的_config.yml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##### Menu  #一级菜单</span></div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div><div class="line">  archives: /archives</div><div class="line">  life: /life</div><div class="line">  about: /about</div><div class="line"><span class="comment">## you can create `tags` and `categories` folders in `../source`.</span></div><div class="line"><span class="comment">## And create a `index.md` file in each of them.</span></div><div class="line"><span class="comment">## set `front-matter`as</span></div><div class="line"><span class="comment">## layout: tags (or categories)</span></div><div class="line"><span class="comment">## title: tags (or categories)</span></div><div class="line"><span class="comment">## ---</span></div><div class="line"></div><div class="line"><span class="comment">#### Widgets #内容区域的左侧内容</span></div><div class="line">widgets: </div><div class="line">- github-card</div><div class="line">- category</div><div class="line">- tag</div><div class="line">- hot</div><div class="line">- tagcloud</div><div class="line">- links</div><div class="line"><span class="comment">#- douban</span></div><div class="line">- weibo</div><div class="line">- rss</div><div class="line">  <span class="comment">## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span></div><div class="line">  </div><div class="line"><span class="comment">#### RSS </span></div><div class="line">rss: /atom.xml <span class="comment">## RSS address.</span></div><div class="line"></div><div class="line"><span class="comment">#### Image  #网站相关logo图片 及主题颜色</span></div><div class="line">imglogo:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>             <span class="comment">## display image logo true/false.</span></div><div class="line">  src: img/logo.png        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">favicon: img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     </span></div><div class="line">apple_icon: img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></div><div class="line">author_img: img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></div><div class="line">banner_img: <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></div><div class="line"><span class="comment">### Theme Color #主题颜色</span></div><div class="line">theme_color:</div><div class="line">    theme: <span class="string">'#2ca6cb'</span>    <span class="comment">##the defaut theme color is blue</span></div><div class="line"></div><div class="line"><span class="comment"># 代码高亮主题</span></div><div class="line"><span class="comment"># available: default | night</span></div><div class="line">available: night</div><div class="line">highlight_theme: night</div><div class="line"></div><div class="line"><span class="comment">#### index post is expanding or not  该主题首页文章列表默认是全部展开，这里关闭，只展示标题和描述</span></div><div class="line">index:</div><div class="line">  expand: <span class="literal">false</span>   <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></div><div class="line">  excerpt_link: Read More  </div><div class="line"></div><div class="line">close_aside: <span class="literal">false</span>  <span class="comment">#close sidebar in post page if true</span></div><div class="line">mathjax: <span class="literal">false</span>      <span class="comment">#enable mathjax if true</span></div><div class="line"></div><div class="line"><span class="comment">### Creative Commons License Support, see http://creativecommons.org/ </span></div><div class="line"><span class="comment">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span></div><div class="line">creative_commons: none</div><div class="line"></div><div class="line"><span class="comment">#### Author information  #作者信息</span></div><div class="line">author:</div><div class="line">  intro_line1:  <span class="string">"Hello ,I'm troylc Page in github."</span>    <span class="comment">## your introduction on the bottom of the page</span></div><div class="line">  intro_line2:  <span class="string">"This is my blog,believe it or not."</span>  <span class="comment">## the 2nd line</span></div><div class="line">  weibo_verifier: 0f81d6c8    <span class="comment">## e.g. 0f81d6c8 Your weibo-show widget verifier ,if you use weibo-show it is needed.</span></div><div class="line">  tsina: xxxxxx    <span class="comment">## e.g. xxxxxx  Your weibo ID,It will be used in share button.</span></div><div class="line">  weibo: xxxxxx     <span class="comment">## e.g. xxxxx or xxxxx for http://weibo.com/xxxxxx</span></div><div class="line">  douban:     <span class="comment">## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span></div><div class="line">  zhihu:      <span class="comment">## e.g. jark  for http://www.zhihu.com/people/jark</span></div><div class="line">  email:      <span class="comment">## e.g. imjark@gmail.com</span></div><div class="line">  twitter:    <span class="comment">## e.g. jarkwu for https://twitter.com/jarkwu</span></div><div class="line">  github: xxxxx     <span class="comment">## e.g. xxxxxx for https://github.com/xxxxx</span></div><div class="line">  facebook:   <span class="comment">## e.g. imjark for https://facebook.com/imjark</span></div><div class="line">  linkedin:   <span class="comment">## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span></div><div class="line">  google_plus:    <span class="comment">## e.g. "111190881341800841449" for https://plus.google.com/u/0/111190881341800841449, the "" is needed!</span></div><div class="line">  stackoverflow:  <span class="comment">## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span></div><div class="line"><span class="comment">## if you set them, the corresponding  share button will show on the footer</span></div><div class="line"></div><div class="line"><span class="comment">#### Toc</span></div><div class="line">toc:</div><div class="line">  article: <span class="literal">true</span>   <span class="comment">## show contents in article.</span></div><div class="line">  aside: <span class="literal">true</span>     <span class="comment">## show contents in aside.</span></div><div class="line"><span class="comment">## you can set both of the value to true of neither of them.</span></div><div class="line"><span class="comment">## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span></div><div class="line"></div><div class="line"><span class="comment">#### Links</span></div><div class="line">links:</div><div class="line">  攻城狮: https://www.troylc.cc/，一个面向程序员交流分享的博客</div><div class="line">  troylc<span class="string">'s Blog: https://www.troylc.cc/</span></div><div class="line"></div><div class="line">#### Comment</div><div class="line">duoshuo_shortname: xxxx   ## e.g. xxxx   your duoshuo short name.</div><div class="line">disqus_shortname:     ## e.g. wuchong   your disqus short name.</div><div class="line"></div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">#leancloud_visitors:</div><div class="line">#  enable: true</div><div class="line">#  app_id: CqxYlI0bMsyMrs3ODUxr2mpV-gzGzoHsz # your app_id</div><div class="line">#  app_key eX5MnY61mQfgQx2aiXnajze5 # your app_key</div><div class="line"></div><div class="line">#### Share button 采用jiathis分享</div><div class="line">jiathis: </div><div class="line">  enable: true ## if you use jiathis as your share tool,the built-in share tool won't be display.</div><div class="line">  id: xxxxx   <span class="comment">## e.g. 1889330 your jiathis ID. </span></div><div class="line">  tsina: xxxxx2176287895 Your weibo id,It will be used <span class="keyword">in</span> share button.</div><div class="line"></div><div class="line"><span class="comment">#### Analytics</span></div><div class="line">google_analytics:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></div><div class="line">  id:        <span class="comment">## e.g. UA-46321946-2 your google analytics ID.</span></div><div class="line">  site:      <span class="comment">## e.g. wuchong.me your google analytics site or set the value as auto.</span></div><div class="line"><span class="comment">## You MUST upgrade to Universal Analytics first!</span></div><div class="line"><span class="comment">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span></div><div class="line">baidu_tongji:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  sitecode: b991924b21cd080f0a0e761dd1a69288 <span class="comment">## e.g. b991924b21cd080f0a0e761dd1a69288 your baidu tongji site code</span></div><div class="line">cnzz_tongji:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></div><div class="line">  siteid:    <span class="comment">## e.g. 1253575964 your cnzz tongji site id</span></div><div class="line"></div><div class="line"><span class="comment">#### Miscellaneous</span></div><div class="line">ShowCustomFont: <span class="literal">true</span>  <span class="comment">## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span></div><div class="line">fancybox: <span class="literal">true</span>        <span class="comment">## if you use gallery post or want use fancybox please set the value to true.</span></div><div class="line">totop: <span class="literal">true</span>           <span class="comment">## if you want to scroll to top in every post set the value to true返回顶部按钮，totop。在博客右下脚显示一件返回顶部按钮</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#### Custom Search</span></div><div class="line">google_cse: </div><div class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></div><div class="line">  cx:   <span class="comment">## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span></div><div class="line"><span class="comment">## https://www.google.com/cse/ </span></div><div class="line"><span class="comment">## To enable the custom search You must create a "search" folder in '/source' and a "index.md" file</span></div><div class="line"><span class="comment">## set the 'front-matter' as</span></div><div class="line"><span class="comment">## layout: search </span></div><div class="line"><span class="comment">## title: search</span></div><div class="line"><span class="comment">## ---</span></div><div class="line">baidu_search:     <span class="comment">## http://zn.baidu.com/  极速体验版本http://zn.baidu.com/cse/wiki/index?category_id=25</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  id: troylc.cc  <span class="comment">## e.g. "783281470518440642"  for your baidu search id</span></div><div class="line">  site: http://zhannei.baidu.com/cse/site  <span class="comment">## your can change to your site instead of the default site</span></div><div class="line">  </div><div class="line">tinysou_search:     <span class="comment">## http://tinysou.com/</span></div><div class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></div><div class="line">  id:  <span class="comment">## e.g. "4ac092ad8d749fdc6293" for your tiny search id</span></div><div class="line"></div><div class="line"><span class="comment">#swiftype搜索</span></div><div class="line">swift_search:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>注意：凡是有XXXXX处的，都要换成自己对应的账号。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://jacman.wuchong.me/2014/11/20/how-to-use-jacman/" title="如何使用Jacman主题" target="_blank" rel="external">如何使用Jacman主题</a><br><a href="https://github.com/wuchong/jacman" title="jacman-github" target="_blank" rel="external">jacman-github</a></p>
<p>后续针对具体的jacman的首页和文章页进行优化。持续更新中</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo教程(一)-hexo环境搭建]]></title>
      <url>http://www.troylc.cc/hexo/2016/05/31/Hexo-1.html</url>
      <content type="html"><![CDATA[<h3 id="hexo-Github-Pages静态博客"><a href="#hexo-Github-Pages静态博客" class="headerlink" title="hexo-Github Pages静态博客"></a>hexo-Github Pages静态博客</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>在 Windows7 64 环境下安装 Node.js 非常简单，仅须到<a href="https://nodejs.org/en/download/" title="nodejs官网" target="_blank" rel="external">官网</a>下载安装文件并执行即可完成安装<br><img src="/images/hexo-1/nodejs.jpg" alt="nodejs官网下载"></p>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>从<a href="https://git-scm.com/download" title="git下载" target="_blank" rel="external">git官网</a>下载git并执行即可完成安装。<a href="http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" title="windows安装过程" target="_blank" rel="external">安装过程</a>。安装完后，右击鼠标选择 git bash here<br><img src="/images/hexo-1/git.png" alt="git窗口"></p>
<ul>
<li>Git教程：<a href="http://git.oschina.net/progit/" title="git教程" target="_blank" rel="external">Pro Git（中文版）</a></li>
<li>git基本操作：</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git init</td>
<td>git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的</td>
</tr>
<tr>
<td>git clone</td>
<td>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</td>
</tr>
<tr>
<td>git add</td>
<td>git add 命令可将该文件添加到缓存</td>
</tr>
<tr>
<td>git status</td>
<td>git status 以查看在你上次提交之后是否有修改。加 -s 参数，以获得简短的结果输出。</td>
</tr>
<tr>
<td>git commit</td>
<td>执行 git commit 将缓存区内容添加到本地仓库中</td>
</tr>
<tr>
<td>git push</td>
<td>推送本地仓库的更新到远程仓库，语法git push [远程仓库名][本地分支][远程分支]</td>
</tr>
<tr>
<td>git pull</td>
<td>抓取远程仓库所有分支更新并合并到本地仓库  </td>
</tr>
</tbody>
</table>
<h4 id="hexo环境安装"><a href="#hexo环境安装" class="headerlink" title="hexo环境安装"></a>hexo环境安装</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h5 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h5><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">npm install hexo --save</div><div class="line"><span class="comment">#如果命令无法运行，可以尝试更换taobao的npm源，[http://npm.taobao.org](http://npm.taobao.org "淘宝npm源说明") ,请进入查看相关说明</span></div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h5 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h5><p>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下：<br><img src="/images/hexo-1/hexo-dir.png" alt="hexo初始化目录"><br>下面依次介绍上面各个文件或者目录的用途：</p>
<ul>
<li>_config.yml 站点配置文件，很多全局配置都在这个文件中。</li>
<li>package.json 应用数据。从它可以看出hexo版本信息，以及它所默认或者说依赖的一些组件。</li>
<li>scaffolds 模版文件。当你创建一篇新的文章时，hexo会依据模版文件进行创建，主要用在你想在每篇文章都添加一些共性的内容的情况下。</li>
<li>source 这个文件夹就是放文章的地方了，除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。</li>
<li>themes 主题文件夹。</li>
</ul>
<h5 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h5><p>如果想不出错，就将下面的插件都安装完。（如果用淘宝源，请把npm换成cnpm）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure></p>
<h5 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h5><p>执行下面语句，执行完即可登录localhost:4000查看效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>登录localhost:4000，即可看到本地的效果如下：<br><img src="/images/hexo-1/hexo-view.png" alt="hexo初始化目录"></p>
<h4 id="将博客部署Github-Pages上"><a href="#将博客部署Github-Pages上" class="headerlink" title="将博客部署Github Pages上"></a>将博客部署Github Pages上</h4><p>本地的博客已经搭建起来了，但是目前只可以通过本地服务查看我们的博客。现在需要做的就是把本地的博客发布到Github服务器上，通过Github Pages这个功能让别人也可以访问我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。所以需要在Github上面创建一个新的项目。</p>
<h5 id="注册Github账户创建代码库"><a href="#注册Github账户创建代码库" class="headerlink" title="注册Github账户创建代码库"></a>注册Github账户创建代码库</h5><ol>
<li>访问<a href="http://www.github.com/" target="_blank" rel="external">Github</a>首页</li>
<li>点击右上角的 Sign Up，注册自己的账户</li>
<li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository.创建要点如下：<br><img src="/images/hexo-1/github-reposity.png" alt="github reposity"></li>
</ol>
<h5 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h5><ol>
<li>看看是否存在SSH密钥(keys)<br>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure>
</li>
</ol>
<p>检查你本机用户home目录下是否存在.ssh目录<br>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p>
<ol>
<li><p>创建一对新的SSH密钥(keys)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#输入 ssh-keygen -t rsa -C "xxxxx@126.com" 这将按照你提供的邮箱地址，创建一对密钥</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"xxxxx@126.com"</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Administrator/.ssh/id_rsa): 回车，则将密钥按默认文件进行存储 c/Users/you/.ssh/github_rsa</div><div class="line">Created directory <span class="string">'/c/Users/Administrator/.ssh'</span>.</div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): 输入密码，</div><div class="line">Enter same passphrase again: 确认密码</div><div class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Administrator/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Administrator/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:j9GCdXhgo+Up1af6XB/E9yZDv8XyZsZNXIA917q/72U xxxxx@126.com</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line">+---[RSA 2048]----+</div><div class="line">|        *.   o  .|</div><div class="line">|       * =. o + o|</div><div class="line">|      o = oo . = |</div><div class="line">|       + +.   = o|</div><div class="line">|      . S..  o *o|</div><div class="line">|        .=  . * O|</div><div class="line">|        .o.. . @E|</div><div class="line">|          o   .oX|</div><div class="line">|               *=|</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
</li>
<li><p>在GitHub账户中添加你的公钥<br>直接用文本打开当前用户目录下的.ssh/id_rsa.pub文件，复制文件中的内容<br>登陆GitHub,进入你的Account Settings.<br><img src="/images/hexo-1/github-settings.png" alt="github settings"><br>选择New SSH Keys<br><img src="/images/hexo-1/github-sshkey.png" alt="github sshkey"><br>粘贴密钥，添加即可<br><img src="/images/hexo-1/ithub-SSH-OK.png" alt="github sshkey"></p>
</li>
<li>测试SSH密钥<br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果是下面的反馈，表示成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">The authenticity of host <span class="string">'github.com (192.30.252.123)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes  不要紧张，输入yes就好，然后会看到：</div><div class="line">Warning: Permanently added 'github.com,192.30.252.123<span class="string">' (RSA) to the list of known hosts.</span></div><div class="line">Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa<span class="string">': 输入上面的创建SSHKEY的密码</span></div><div class="line">Hi troychn! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>如果出现以下问题，没有权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">The authenticity of host <span class="string">'github.com (192.30.252.120)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added 'github.com,192.30.252.120<span class="string">' (RSA) to the list of known hosts.</span></div><div class="line">**Permission denied (publickey).**</div></pre></td></tr></table></figure></p>
<p>解决办法：<br>重新执行:第二步、创建一对新的SSH密钥(keys) 最好是输入密码,然后一步一步往下走，直至测试这步<br>如还有问题，请参考：<br>GitHub Help - <a href="https://help.github.com/articles/generating-an-ssh-key/" title="Generating an SSH key" target="_blank" rel="external">Generating SSH Keys</a><br>Error: <a href="https://help.github.com/articles/error-permission-denied-publickey/" title="Permission denied (publickey)" target="_blank" rel="external">Permission denied (publickey)</a></p>
<h5 id="将本地Hexo文件更新到Github库中"><a href="#将本地Hexo文件更新到Github库中" class="headerlink" title="将本地Hexo文件更新到Github库中"></a>将本地Hexo文件更新到Github库中</h5><p>登录Github打开上面创建的的项目 username.github.io 复制地址<br><img src="/images/hexo-1/cp-githubaddr.png" alt="github sshkey"><br>打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件<br><img src="/images/hexo-1/git-gitml_4.png" alt="github sshkey"><br>在配置文件里作如下修改，保存<br><img src="/images/hexo-1/cp-githubaddr-2.png" alt="github sshkey"><br>在Hexo文件夹下执行，右击打开git bash here 执行以下命令 ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io。<br><img src="/images/hexo-1/username-passw.png" alt="github sshkey"><br>在浏览器上输入自己的主页地址 （<a href="https://username.github.io/）username为你的github账号" target="_blank" rel="external">https://username.github.io/）username为你的github账号</a><br>在浏览器上输入即可看到我们自己的博客，别人电脑输入也可以哦。<br><img src="/images/hexo-1/view-cg.png" alt="github sshkey"></p>
<h4 id="开始编写一篇博客文章"><a href="#开始编写一篇博客文章" class="headerlink" title="开始编写一篇博客文章"></a>开始编写一篇博客文章</h4><h5 id="创建一个新文章："><a href="#创建一个新文章：" class="headerlink" title="创建一个新文章："></a>创建一个新文章：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>默认的文章布局是 post ，当然你可用提供自己的布局文件。你可以编辑_config.yml 修改默认布局。<br>Layout（布局）Hexo提供了3个默认布局： post 、 page 和 draft 。不同布局的文章会被保存到不同的目录，这取决于它的布局类型。 自定义布局保存到 source/_posts 文件夹。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody>
</table>
<p>对应三个布局，有三个相对应的模板文件(draft.md,page.md,post.md)在F:\Blog\hexo\scaffolds目录下,模板文件的格式设置以及默认值：</p>
<table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>文章标题</td>
</tr>
<tr>
<td>date</td>
<td>发布时间，默认为文件创建时间</td>
</tr>
<tr>
<td>updated</td>
<td>文件修改时间</td>
</tr>
<tr>
<td>comments</td>
<td>是否开启评论，默认为true</td>
</tr>
<tr>
<td>tags</td>
<td>文章标签</td>
</tr>
<tr>
<td>categories</td>
<td>文章所属分类</td>
</tr>
<tr>
<td>permalink</td>
<td>文章永久链接，一般不用写，默认就行</td>
</tr>
</tbody>
</table>
<p>如我这里的post.md的内容为：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout:  #文章布局 ---------#默认文章的模板-hexo new "title" 就会以这个模板创建文</div><div class="line">title: &#123;&#123; title &#125;&#125; #文章标题</div><div class="line">date: &#123;&#123; date &#125;&#125; #时间，一般不用改</div><div class="line">updated: &#123;&#123; date &#125;&#125;  # 更新时间</div><div class="line">comments:  #是否开启评论，默认为true</div><div class="line">categories:  #目录分类</div><div class="line">tags:  #标签，格式可以是[Hexo,总结]，中间用英文逗号分开 hexo new "text"  报错YAMLException: duplicated mapping key at line 6, column 1: 因为模板中有两个tags:</div><div class="line">permalink:  #文章永久链接，一般不用写，默认就行</div></pre></td></tr></table></figure></p>
<h5 id="创建Drafts（草稿）"><a href="#创建Drafts（草稿）" class="headerlink" title="创建Drafts（草稿）"></a>创建Drafts（草稿）</h5><p>前面hexo提到一个特殊的布局： draft 。 这种布局的帖子保存到source/_drafts 文件夹。你可以使用 publish 命令移动草稿到 source/_posts文件夹。 这个命令类似于你使用了 new 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>草稿默认不显示，你可以添加 –draft 选项或者设置 _config.yml 中的render_drafts 使hexo显示草稿。</p>
<p>到此利用github Pages 搭建hexo静态博客就成功了，下一篇准备美化我们的博客。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客折腾记]]></title>
      <url>http://www.troylc.cc/experience/2016/05/30/Hexo-0.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名一直从事技术方面的从业者，一直想拥有一个属于自己的一个空间。虽然之前也折腾过wordpress,但最终因为不免费而放弃。近年来github越来越流行，国内越来越多的人也对开源相当热情;hexo的出现，让想拥有自己博客想法的人成为可能。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>以下是通过别人的想法给自己打气的一些话。</p>
<h4 id="为什么你应该（从现在开始就）写博客"><a href="#为什么你应该（从现在开始就）写博客" class="headerlink" title="为什么你应该（从现在开始就）写博客"></a>为什么你应该（从现在开始就）写博客</h4><p>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。认为写一个长期的有价值博客的最大的几点好处：</p>
<ul>
<li>能够交到很多志同道合的朋友：<br>在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。</li>
<li>书写是为了更好的思考<br>书写是对思维的备忘，书写是对思维的缓存，书写是对思维的缓存，书写是与别人的交流，有时候，语言自己也会思考；如果你逼着自己将一些不成熟的想法写下来，看着自己写的内容，试着进一步拓展它们，就有可能在理性的道路上走得很远，很远。</li>
<li>“教”是最好的“学”<br>如果一件事情你不能讲清楚，十有八九你还没有完全理解；为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透.<br>　　去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。</li>
<li>讨论是绝佳的反思<br>很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息</li>
<li>激励你去持续学习和思考<br>如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…<br>打破这个死循环，就不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</li>
<li>学会持之以恒地做一件事情<br>很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</li>
<li>一个长期的价值博客是一份很好的简历<br>这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。</li>
</ul>
<h4 id="怎么做到长期写一个价值博客"><a href="#怎么做到长期写一个价值博客" class="headerlink" title="怎么做到长期写一个价值博客"></a>怎么做到长期写一个价值博客</h4><p>　　一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。<br>　　怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：<br>　　让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。<br><em><code>意志力很大程度上来源于有正确的方法，而非天生。</code></em> </p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://kb.cnblogs.com/page/517038/" title="为什么你应该（从现在开始就）写博客" target="_blank" rel="external">牛人是怎么思考写博客的</a></p>
]]></content>
    </entry>
    
  
  
</search>
